<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Represents a relationship between a note and a single share invitation recipient. The recipient
 * is identified via an Identity, and has a given privilege that specifies what actions they may
 * take on the note.
 * 
 * <dl>
 *   <dt>sharerUserID</dt>
 *   <dd>The user ID of the user who shared the note with the recipient.</dd>
 * 
 *   <dt>recipientIdentity</dt>
 *   <dd>The identity of the recipient of the share. For a given note, there may be only one
 *     SharedNote per recipient identity. Only recipientIdentity.id is guaranteed to be set.
 *     Other fields on the Identity may or my not be set based on the requesting user's
 *     relationship with the recipient.</dd>
 * 
 *   <dt>privilege</dt>
 *   <dd>The privilege level that the share grants to the recipient.</dd>
 * 
 *   <dt>serviceCreated</dt>
 *   <dd>The time at which the share was created.</dd>
 * 
 *   <dt>serviceUpdated</dt>
 *   <dd>The time at which the share was last updated.</dd>
 * 
 *   <dt>serviceAssigned</dt>
 *   <dd>The time at which the share was assigned to a specific recipient user ID.</dd>
 * </dl>
 */
class SharedNote
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'sharerUserID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'recipientIdentity',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\Identity',
        ),
        3 => array(
            'var' => 'privilege',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\Types\SharedNotePrivilegeLevel',
        ),
        4 => array(
            'var' => 'serviceCreated',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        5 => array(
            'var' => 'serviceUpdated',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        6 => array(
            'var' => 'serviceAssigned',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var int
     */
    public $sharerUserID = null;
    /**
     * @var \EDAM\Types\Identity
     */
    public $recipientIdentity = null;
    /**
     * @var int
     */
    public $privilege = null;
    /**
     * @var int
     */
    public $serviceCreated = null;
    /**
     * @var int
     */
    public $serviceUpdated = null;
    /**
     * @var int
     */
    public $serviceAssigned = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['sharerUserID'])) {
                $this->sharerUserID = $vals['sharerUserID'];
            }
            if (isset($vals['recipientIdentity'])) {
                $this->recipientIdentity = $vals['recipientIdentity'];
            }
            if (isset($vals['privilege'])) {
                $this->privilege = $vals['privilege'];
            }
            if (isset($vals['serviceCreated'])) {
                $this->serviceCreated = $vals['serviceCreated'];
            }
            if (isset($vals['serviceUpdated'])) {
                $this->serviceUpdated = $vals['serviceUpdated'];
            }
            if (isset($vals['serviceAssigned'])) {
                $this->serviceAssigned = $vals['serviceAssigned'];
            }
        }
    }

    public function getName()
    {
        return 'SharedNote';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->sharerUserID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->recipientIdentity = new \EDAM\Types\Identity();
                        $xfer += $this->recipientIdentity->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->privilege);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->serviceCreated);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->serviceUpdated);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->serviceAssigned);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('SharedNote');
        if ($this->sharerUserID !== null) {
            $xfer += $output->writeFieldBegin('sharerUserID', TType::I32, 1);
            $xfer += $output->writeI32($this->sharerUserID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->recipientIdentity !== null) {
            if (!is_object($this->recipientIdentity)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('recipientIdentity', TType::STRUCT, 2);
            $xfer += $this->recipientIdentity->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->privilege !== null) {
            $xfer += $output->writeFieldBegin('privilege', TType::I32, 3);
            $xfer += $output->writeI32($this->privilege);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->serviceCreated !== null) {
            $xfer += $output->writeFieldBegin('serviceCreated', TType::I64, 4);
            $xfer += $output->writeI64($this->serviceCreated);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->serviceUpdated !== null) {
            $xfer += $output->writeFieldBegin('serviceUpdated', TType::I64, 5);
            $xfer += $output->writeI64($this->serviceUpdated);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->serviceAssigned !== null) {
            $xfer += $output->writeFieldBegin('serviceAssigned', TType::I64, 6);
            $xfer += $output->writeI64($this->serviceAssigned);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
