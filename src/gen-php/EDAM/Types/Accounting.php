<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 *  This represents the bookkeeping information for the user's subscription.
 * 
 * <dl>
 *  <dt>uploadLimitEnd</dt>
 *    <dd>The date and time when the current upload limit
 *    expires.  At this time, the monthly upload count reverts to 0 and a new
 *    limit is imposed.  This date and time is exclusive, so this is effectively
 *    the start of the new month.
 *    </dd>
 *  <dt>uploadLimitNextMonth</dt>
 *    <dd> When uploadLimitEnd is reached, the service
 *    will change uploadLimit to uploadLimitNextMonth. If a premium account is
 *    canceled, this mechanism will reset the quota appropriately.
 *    </dd>
 *  <dt>premiumServiceStatus</dt>
 *    <dd>Indicates the phases of a premium account
 *    during the billing process.
 *    </dd>
 *  <dt>premiumOrderNumber</dt>
 *    <dd>The order number used by the commerce system to
 *    process recurring payments
 *    </dd>
 *  <dt>premiumServiceStart</dt>
 *    <dd>The start date when this premium promotion
 *    began (this number will get overwritten if a premium service is canceled
 *    and then re-activated).
 *    </dd>
 *  <dt>premiumCommerceService</dt>
 *    <dd>The commerce system used (paypal, Google
 *    checkout, etc)
 *    </dd>
 *  <dt>premiumServiceSKU</dt>
 *    <dd>The code associated with the purchase eg. monthly
 *    or annual purchase. Clients should interpret this value and localize it.
 *    </dd>
 *  <dt>lastSuccessfulCharge</dt>
 *    <dd>Date the last time the user was charged.
 *    Null if never charged.
 *    </dd>
 *  <dt>lastFailedCharge</dt>
 *    <dd>Date the last time a charge was attempted and
 *    failed.
 *    </dd>
 *  <dt>lastFailedChargeReason</dt>
 *    <dd>Reason provided for the charge failure
 *    </dd>
 *  <dt>nextPaymentDue</dt>
 *    <dd>The end of the billing cycle. This could be in the
 *    past if there are failed charges.
 *    </dd>
 *  <dt>premiumLockUntil</dt>
 *    <dd>An internal variable to manage locking operations
 *    on the commerce variables.
 *    </dd>
 *  <dt>updated</dt>
 *    <dd>The date any modification where made to this record.
 *    </dd>
 *  <dt>premiumSubscriptionNumber</dt>
 *    <dd>The number number identifying the
 *    recurring subscription used to make the recurring charges.
 *    </dd>
 *  <dt>lastRequestedCharge</dt>
 *    <dd>Date charge last attempted</dd>
 *  <dt>currency</dt>
 *    <dd>ISO 4217 currency code</dd>
 *  <dt>unitPrice</dt>
 *    <dd>charge in the smallest unit of the currency (e.g. cents for USD)</dd>
 *  <dt>businessId</dt>
 *    <dd><i>DEPRECATED:</i>See BusinessUserInfo.</dd>
 *  <dt>businessName</dt>
 *    <dd><i>DEPRECATED:</i>See BusinessUserInfo.</dd>
 *  <dt>businessRole</dt>
 *    <dd><i>DEPRECATED:</i>See BusinessUserInfo.</dd>
 *  <dt>unitDiscount</dt>
 *    <dd>discount per seat in negative amount and smallest unit of the currency (e.g.
 *        cents for USD)</dd>
 *  <dt>nextChargeDate</dt>
 *    <dd>The next time the user will be charged, may or may not be the same as
 *        nextPaymentDue</dd>
 *  </dl>
 */
class Accounting
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        2 => array(
            'var' => 'uploadLimitEnd',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'uploadLimitNextMonth',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        4 => array(
            'var' => 'premiumServiceStatus',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\Types\PremiumOrderStatus',
        ),
        5 => array(
            'var' => 'premiumOrderNumber',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'premiumCommerceService',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'premiumServiceStart',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        8 => array(
            'var' => 'premiumServiceSKU',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'lastSuccessfulCharge',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        10 => array(
            'var' => 'lastFailedCharge',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        11 => array(
            'var' => 'lastFailedChargeReason',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'nextPaymentDue',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        13 => array(
            'var' => 'premiumLockUntil',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        14 => array(
            'var' => 'updated',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        16 => array(
            'var' => 'premiumSubscriptionNumber',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        17 => array(
            'var' => 'lastRequestedCharge',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        18 => array(
            'var' => 'currency',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        19 => array(
            'var' => 'unitPrice',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        20 => array(
            'var' => 'businessId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        21 => array(
            'var' => 'businessName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        22 => array(
            'var' => 'businessRole',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\Types\BusinessUserRole',
        ),
        23 => array(
            'var' => 'unitDiscount',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        24 => array(
            'var' => 'nextChargeDate',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        25 => array(
            'var' => 'availablePoints',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var int
     */
    public $uploadLimitEnd = null;
    /**
     * @var int
     */
    public $uploadLimitNextMonth = null;
    /**
     * @var int
     */
    public $premiumServiceStatus = null;
    /**
     * @var string
     */
    public $premiumOrderNumber = null;
    /**
     * @var string
     */
    public $premiumCommerceService = null;
    /**
     * @var int
     */
    public $premiumServiceStart = null;
    /**
     * @var string
     */
    public $premiumServiceSKU = null;
    /**
     * @var int
     */
    public $lastSuccessfulCharge = null;
    /**
     * @var int
     */
    public $lastFailedCharge = null;
    /**
     * @var string
     */
    public $lastFailedChargeReason = null;
    /**
     * @var int
     */
    public $nextPaymentDue = null;
    /**
     * @var int
     */
    public $premiumLockUntil = null;
    /**
     * @var int
     */
    public $updated = null;
    /**
     * @var string
     */
    public $premiumSubscriptionNumber = null;
    /**
     * @var int
     */
    public $lastRequestedCharge = null;
    /**
     * @var string
     */
    public $currency = null;
    /**
     * @var int
     */
    public $unitPrice = null;
    /**
     * @var int
     */
    public $businessId = null;
    /**
     * @var string
     */
    public $businessName = null;
    /**
     * @var int
     */
    public $businessRole = null;
    /**
     * @var int
     */
    public $unitDiscount = null;
    /**
     * @var int
     */
    public $nextChargeDate = null;
    /**
     * @var int
     */
    public $availablePoints = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['uploadLimitEnd'])) {
                $this->uploadLimitEnd = $vals['uploadLimitEnd'];
            }
            if (isset($vals['uploadLimitNextMonth'])) {
                $this->uploadLimitNextMonth = $vals['uploadLimitNextMonth'];
            }
            if (isset($vals['premiumServiceStatus'])) {
                $this->premiumServiceStatus = $vals['premiumServiceStatus'];
            }
            if (isset($vals['premiumOrderNumber'])) {
                $this->premiumOrderNumber = $vals['premiumOrderNumber'];
            }
            if (isset($vals['premiumCommerceService'])) {
                $this->premiumCommerceService = $vals['premiumCommerceService'];
            }
            if (isset($vals['premiumServiceStart'])) {
                $this->premiumServiceStart = $vals['premiumServiceStart'];
            }
            if (isset($vals['premiumServiceSKU'])) {
                $this->premiumServiceSKU = $vals['premiumServiceSKU'];
            }
            if (isset($vals['lastSuccessfulCharge'])) {
                $this->lastSuccessfulCharge = $vals['lastSuccessfulCharge'];
            }
            if (isset($vals['lastFailedCharge'])) {
                $this->lastFailedCharge = $vals['lastFailedCharge'];
            }
            if (isset($vals['lastFailedChargeReason'])) {
                $this->lastFailedChargeReason = $vals['lastFailedChargeReason'];
            }
            if (isset($vals['nextPaymentDue'])) {
                $this->nextPaymentDue = $vals['nextPaymentDue'];
            }
            if (isset($vals['premiumLockUntil'])) {
                $this->premiumLockUntil = $vals['premiumLockUntil'];
            }
            if (isset($vals['updated'])) {
                $this->updated = $vals['updated'];
            }
            if (isset($vals['premiumSubscriptionNumber'])) {
                $this->premiumSubscriptionNumber = $vals['premiumSubscriptionNumber'];
            }
            if (isset($vals['lastRequestedCharge'])) {
                $this->lastRequestedCharge = $vals['lastRequestedCharge'];
            }
            if (isset($vals['currency'])) {
                $this->currency = $vals['currency'];
            }
            if (isset($vals['unitPrice'])) {
                $this->unitPrice = $vals['unitPrice'];
            }
            if (isset($vals['businessId'])) {
                $this->businessId = $vals['businessId'];
            }
            if (isset($vals['businessName'])) {
                $this->businessName = $vals['businessName'];
            }
            if (isset($vals['businessRole'])) {
                $this->businessRole = $vals['businessRole'];
            }
            if (isset($vals['unitDiscount'])) {
                $this->unitDiscount = $vals['unitDiscount'];
            }
            if (isset($vals['nextChargeDate'])) {
                $this->nextChargeDate = $vals['nextChargeDate'];
            }
            if (isset($vals['availablePoints'])) {
                $this->availablePoints = $vals['availablePoints'];
            }
        }
    }

    public function getName()
    {
        return 'Accounting';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uploadLimitEnd);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uploadLimitNextMonth);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->premiumServiceStatus);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->premiumOrderNumber);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->premiumCommerceService);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->premiumServiceStart);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->premiumServiceSKU);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->lastSuccessfulCharge);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->lastFailedCharge);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->lastFailedChargeReason);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->nextPaymentDue);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->premiumLockUntil);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->updated);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->premiumSubscriptionNumber);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->lastRequestedCharge);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->currency);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->unitPrice);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->businessId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->businessName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->businessRole);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->unitDiscount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->nextChargeDate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 25:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->availablePoints);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Accounting');
        if ($this->uploadLimitEnd !== null) {
            $xfer += $output->writeFieldBegin('uploadLimitEnd', TType::I64, 2);
            $xfer += $output->writeI64($this->uploadLimitEnd);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->uploadLimitNextMonth !== null) {
            $xfer += $output->writeFieldBegin('uploadLimitNextMonth', TType::I64, 3);
            $xfer += $output->writeI64($this->uploadLimitNextMonth);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->premiumServiceStatus !== null) {
            $xfer += $output->writeFieldBegin('premiumServiceStatus', TType::I32, 4);
            $xfer += $output->writeI32($this->premiumServiceStatus);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->premiumOrderNumber !== null) {
            $xfer += $output->writeFieldBegin('premiumOrderNumber', TType::STRING, 5);
            $xfer += $output->writeString($this->premiumOrderNumber);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->premiumCommerceService !== null) {
            $xfer += $output->writeFieldBegin('premiumCommerceService', TType::STRING, 6);
            $xfer += $output->writeString($this->premiumCommerceService);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->premiumServiceStart !== null) {
            $xfer += $output->writeFieldBegin('premiumServiceStart', TType::I64, 7);
            $xfer += $output->writeI64($this->premiumServiceStart);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->premiumServiceSKU !== null) {
            $xfer += $output->writeFieldBegin('premiumServiceSKU', TType::STRING, 8);
            $xfer += $output->writeString($this->premiumServiceSKU);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->lastSuccessfulCharge !== null) {
            $xfer += $output->writeFieldBegin('lastSuccessfulCharge', TType::I64, 9);
            $xfer += $output->writeI64($this->lastSuccessfulCharge);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->lastFailedCharge !== null) {
            $xfer += $output->writeFieldBegin('lastFailedCharge', TType::I64, 10);
            $xfer += $output->writeI64($this->lastFailedCharge);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->lastFailedChargeReason !== null) {
            $xfer += $output->writeFieldBegin('lastFailedChargeReason', TType::STRING, 11);
            $xfer += $output->writeString($this->lastFailedChargeReason);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->nextPaymentDue !== null) {
            $xfer += $output->writeFieldBegin('nextPaymentDue', TType::I64, 12);
            $xfer += $output->writeI64($this->nextPaymentDue);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->premiumLockUntil !== null) {
            $xfer += $output->writeFieldBegin('premiumLockUntil', TType::I64, 13);
            $xfer += $output->writeI64($this->premiumLockUntil);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->updated !== null) {
            $xfer += $output->writeFieldBegin('updated', TType::I64, 14);
            $xfer += $output->writeI64($this->updated);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->premiumSubscriptionNumber !== null) {
            $xfer += $output->writeFieldBegin('premiumSubscriptionNumber', TType::STRING, 16);
            $xfer += $output->writeString($this->premiumSubscriptionNumber);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->lastRequestedCharge !== null) {
            $xfer += $output->writeFieldBegin('lastRequestedCharge', TType::I64, 17);
            $xfer += $output->writeI64($this->lastRequestedCharge);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->currency !== null) {
            $xfer += $output->writeFieldBegin('currency', TType::STRING, 18);
            $xfer += $output->writeString($this->currency);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->unitPrice !== null) {
            $xfer += $output->writeFieldBegin('unitPrice', TType::I32, 19);
            $xfer += $output->writeI32($this->unitPrice);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->businessId !== null) {
            $xfer += $output->writeFieldBegin('businessId', TType::I32, 20);
            $xfer += $output->writeI32($this->businessId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->businessName !== null) {
            $xfer += $output->writeFieldBegin('businessName', TType::STRING, 21);
            $xfer += $output->writeString($this->businessName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->businessRole !== null) {
            $xfer += $output->writeFieldBegin('businessRole', TType::I32, 22);
            $xfer += $output->writeI32($this->businessRole);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->unitDiscount !== null) {
            $xfer += $output->writeFieldBegin('unitDiscount', TType::I32, 23);
            $xfer += $output->writeI32($this->unitDiscount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->nextChargeDate !== null) {
            $xfer += $output->writeFieldBegin('nextChargeDate', TType::I64, 24);
            $xfer += $output->writeI64($this->nextChargeDate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->availablePoints !== null) {
            $xfer += $output->writeFieldBegin('availablePoints', TType::I32, 25);
            $xfer += $output->writeI32($this->availablePoints);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
