<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 *  A structure holding the optional attributes that can be stored
 *  on a User.  These are generally less critical than the core User fields.
 * 
 * <dl>
 *  <dt>defaultLocationName</dt>
 *    <dd>the location string that should be associated
 *    with the user in order to determine where notes are taken if not otherwise
 *    specified.<br/>
 *    Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
 *    </dd>
 * 
 *  <dt>defaultLatitude</dt>
 *    <dd>if set, this is the latitude that should be
 *    assigned to any notes that have no other latitude information.
 *    </dd>
 * 
 *  <dt>defaultLongitude</dt>
 *    <dd>if set, this is the longitude that should be
 *    assigned to any notes that have no other longitude information.
 *    </dd>
 * 
 *  <dt>preactivation</dt>
 *    <dd>if set, the user account is not yet confirmed for
 *    login.  I.e. the account has been created, but we are still waiting for
 *    the user to complete the activation step.
 *    </dd>
 * 
 *  <dt>viewedPromotions</dt>
 *    <dd>a list of promotions the user has seen.
 *     This list may occasionally be modified by the system when promotions are
 *     no longer available.<br/>
 *     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
 *    </dd>
 * 
 *  <dt>incomingEmailAddress</dt>
 *    <dd>if set, this is the email address that the
 *     user may send email to in order to add an email note directly into the
 *     account via the SMTP email gateway.  This is the part of the email
 *     address before the '@' symbol ... our domain is not included.
 *     If this is not set, the user may not add notes via the gateway.<br/>
 *     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
 *    </dd>
 * 
 *  <dt>recentMailedAddresses</dt>
 *    <dd>if set, this will contain a list of email
 *     addresses that have recently been used as recipients
 *     of outbound emails by the user.  This can be used to pre-populate a
 *     list of possible destinations when a user wishes to send a note via
 *     email.<br/>
 *     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX each<br/>
 *     Max:  EDAM_USER_RECENT_MAILED_ADDRESSES_MAX entries
 *    </dd>
 * 
 *  <dt>comments</dt>
 *    <dd>Free-form text field that may hold general support
 *     information, etc.<br/>
 *     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
 *    </dd>
 * 
 *  <dt>dateAgreedToTermsOfService</dt>
 *    <dd>The date/time when the user agreed to
 *     the terms of service.  This can be used as the effective "start date"
 *     for the account.
 *    </dd>
 * 
 *  <dt>maxReferrals</dt>
 *    <dd>The number of referrals that the user is permitted
 *     to make.
 *    </dd>
 * 
 *  <dt>referralCount</dt>
 *    <dd>The number of referrals sent from this account.
 *    </dd>
 * 
 *  <dt>refererCode</dt>
 *    <dd>A code indicating where the user was sent from. AKA
 *     promotion code
 *    </dd>
 * 
 *  <dt>sentEmailDate</dt>
 *    <dd>The most recent date when the user sent outbound
 *     emails from the service.  Used with sentEmailCount to limit the number
 *     of emails that can be sent per day.
 *    </dd>
 * 
 *  <dt>sentEmailCount</dt>
 *    <dd>The number of emails that were sent from the user
 *     via the service on sentEmailDate.  Used to enforce a limit on the number
 *     of emails per user per day to prevent spamming.
 *    </dd>
 * 
 *  <dt>dailyEmailLimit</dt>
 *    <dd>If set, this is the maximum number of emails that
 *     may be sent in a given day from this account.  If unset, the server will
 *     use the configured default limit.
 *    </dd>
 * 
 *  <dt>emailOptOutDate</dt>
 *    <dd>If set, this is the date when the user asked
 *     to be excluded from offers and promotions sent by Evernote.  If not set,
 *     then the user currently agrees to receive these messages.
 *    </dd>
 * 
 *  <dt>partnerEmailOptInDate</dt>
 *    <dd>If set, this is the date when the user asked
 *     to be included in offers and promotions sent by Evernote's partners.
 *     If not sent, then the user currently does not agree to receive these
 *     emails.
 *    </dd>
 * 
 *  <dt>preferredLanguage</dt>
 *    <dd>a 2 character language codes based on:
 *        http://ftp.ics.uci.edu/pub/ietf/http/related/iso639.txt used for
 *       localization purposes to determine what language to use for the web
 *       interface and for other direct communication (e.g. emails).
 *    </dd>
 * 
 *  <dt>preferredCountry</dt>
 *    <dd>Preferred country code based on ISO 3166-1-alpha-2 indicating the
 *    users preferred country</dd>
 * 
 *  <dt>clipFullPage</dt>
 *    <dd>Boolean flag set to true if the user wants to clip full pages by
 *    default when they use the web clipper without a selection.</dd>
 * 
 *  <dt>twitterUserName</dt>
 *    <dd>The username of the account of someone who has chosen to enable
 *    Twittering into Evernote.  This value is subject to change, since users
 *    may change their Twitter user name.</dd>
 * 
 *  <dt>twitterId</dt>
 *    <dd>The unique identifier of the user's Twitter account if that user
 *    has chosen to enable Twittering into Evernote.</dd>
 * 
 *  <dt>groupName</dt>
 *    <dd>A name identifier used to identify a particular set of branding and
 *     light customization.</dd>
 * 
 *  <dt>recognitionLanguage</dt>
 *    <dd>a 2 character language codes based on:
 *        http://ftp.ics.uci.edu/pub/ietf/http/related/iso639.txt
 *        If set, this is used to determine the language that should be used
 *        when processing images and PDF files to find text.
 *        If not set, then the 'preferredLanguage' will be used.
 *    </dd>
 * 
 *  <dt>educationalInstitution</dt>
 *    <dd>a flag indicating that the user is part of an educational institution which
 *    makes them eligible for discounts on bulk purchases
 *    </dd>
 * 
 *  <dt>businessAddress</dt>
 *    <dd>A string recording the business address of a Sponsored Account user who has requested invoicing.
 *    </dd>
 * 
 *  <dt>hideSponsorBilling</dt>
 *    <dd>A flag indicating whether to hide the billing information on a sponsored
 *        account owner's settings page
 *    </dd>
 * 
 *  <dt>useEmailAutoFiling</dt>
 *    <dd>A flag indicating whether the user chooses to allow Evernote to automatically
 *        file and tag emailed notes
 *    </dd>
 * 
 *  <dt>reminderEmailConfig</dt>
 *    <dd>Configuration state for whether or not the user wishes to receive
 *        reminder e-mail.  This setting applies to both the reminder e-mail sent
 *        for personal reminder notes and for the reminder e-mail sent for reminder
 *        notes in the user's business notebooks that the user has configured for
 *        e-mail notifications.
 *    </dd>
 * 
 *  <dt>emailAddressLastConfirmed</dt>
 *    <dd>If set, this contains the time at which the user last confirmed that the
 *        configured email address for this account is correct and up-to-date. If this is
 *        unset that indicates that the user's email address is unverified.
 *    </dd>
 * 
 *  <dt>passwordUpdated</dt>
 *    <dd>If set, this contains the time at which the user's password last changed. This
 *        will be unset for users created before the addition of this field who have not
 *        changed their passwords since the addition of this field.
 *    </dd>
 * 
 *  <dt>shouldLogClientEvent</dt>
 *    <dd>If set to True, the server will record LogRequest send from clients of this
 *         user as ClientEventLog.
 *    </dd>
 * 
 *  <dt>optOutMachineLearning</dt>
 *    <dd>If set to True, no Machine Learning nor human review will be done to this
 *         user's note contents.
 *    </dd>
 *    </dl>
 */
class UserAttributes
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'defaultLocationName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'defaultLatitude',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        3 => array(
            'var' => 'defaultLongitude',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        4 => array(
            'var' => 'preactivation',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'viewedPromotions',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        6 => array(
            'var' => 'incomingEmailAddress',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'recentMailedAddresses',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        9 => array(
            'var' => 'comments',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'dateAgreedToTermsOfService',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        12 => array(
            'var' => 'maxReferrals',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        13 => array(
            'var' => 'referralCount',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        14 => array(
            'var' => 'refererCode',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'sentEmailDate',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        16 => array(
            'var' => 'sentEmailCount',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        17 => array(
            'var' => 'dailyEmailLimit',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        18 => array(
            'var' => 'emailOptOutDate',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        19 => array(
            'var' => 'partnerEmailOptInDate',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        20 => array(
            'var' => 'preferredLanguage',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        21 => array(
            'var' => 'preferredCountry',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        22 => array(
            'var' => 'clipFullPage',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        23 => array(
            'var' => 'twitterUserName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        24 => array(
            'var' => 'twitterId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        25 => array(
            'var' => 'groupName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        26 => array(
            'var' => 'recognitionLanguage',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        28 => array(
            'var' => 'referralProof',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        29 => array(
            'var' => 'educationalDiscount',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        30 => array(
            'var' => 'businessAddress',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        31 => array(
            'var' => 'hideSponsorBilling',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        33 => array(
            'var' => 'useEmailAutoFiling',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        34 => array(
            'var' => 'reminderEmailConfig',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\Types\ReminderEmailConfig',
        ),
        35 => array(
            'var' => 'emailAddressLastConfirmed',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        36 => array(
            'var' => 'passwordUpdated',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        37 => array(
            'var' => 'salesforcePushEnabled',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        38 => array(
            'var' => 'shouldLogClientEvent',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        39 => array(
            'var' => 'optOutMachineLearning',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var string
     */
    public $defaultLocationName = null;
    /**
     * @var double
     */
    public $defaultLatitude = null;
    /**
     * @var double
     */
    public $defaultLongitude = null;
    /**
     * @var bool
     */
    public $preactivation = null;
    /**
     * @var string[]
     */
    public $viewedPromotions = null;
    /**
     * @var string
     */
    public $incomingEmailAddress = null;
    /**
     * @var string[]
     */
    public $recentMailedAddresses = null;
    /**
     * @var string
     */
    public $comments = null;
    /**
     * @var int
     */
    public $dateAgreedToTermsOfService = null;
    /**
     * @var int
     */
    public $maxReferrals = null;
    /**
     * @var int
     */
    public $referralCount = null;
    /**
     * @var string
     */
    public $refererCode = null;
    /**
     * @var int
     */
    public $sentEmailDate = null;
    /**
     * @var int
     */
    public $sentEmailCount = null;
    /**
     * @var int
     */
    public $dailyEmailLimit = null;
    /**
     * @var int
     */
    public $emailOptOutDate = null;
    /**
     * @var int
     */
    public $partnerEmailOptInDate = null;
    /**
     * @var string
     */
    public $preferredLanguage = null;
    /**
     * @var string
     */
    public $preferredCountry = null;
    /**
     * @var bool
     */
    public $clipFullPage = null;
    /**
     * @var string
     */
    public $twitterUserName = null;
    /**
     * @var string
     */
    public $twitterId = null;
    /**
     * @var string
     */
    public $groupName = null;
    /**
     * @var string
     */
    public $recognitionLanguage = null;
    /**
     * @var string
     */
    public $referralProof = null;
    /**
     * @var bool
     */
    public $educationalDiscount = null;
    /**
     * @var string
     */
    public $businessAddress = null;
    /**
     * @var bool
     */
    public $hideSponsorBilling = null;
    /**
     * @var bool
     */
    public $useEmailAutoFiling = null;
    /**
     * @var int
     */
    public $reminderEmailConfig = null;
    /**
     * @var int
     */
    public $emailAddressLastConfirmed = null;
    /**
     * @var int
     */
    public $passwordUpdated = null;
    /**
     * @var bool
     */
    public $salesforcePushEnabled = null;
    /**
     * @var bool
     */
    public $shouldLogClientEvent = null;
    /**
     * @var bool
     */
    public $optOutMachineLearning = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['defaultLocationName'])) {
                $this->defaultLocationName = $vals['defaultLocationName'];
            }
            if (isset($vals['defaultLatitude'])) {
                $this->defaultLatitude = $vals['defaultLatitude'];
            }
            if (isset($vals['defaultLongitude'])) {
                $this->defaultLongitude = $vals['defaultLongitude'];
            }
            if (isset($vals['preactivation'])) {
                $this->preactivation = $vals['preactivation'];
            }
            if (isset($vals['viewedPromotions'])) {
                $this->viewedPromotions = $vals['viewedPromotions'];
            }
            if (isset($vals['incomingEmailAddress'])) {
                $this->incomingEmailAddress = $vals['incomingEmailAddress'];
            }
            if (isset($vals['recentMailedAddresses'])) {
                $this->recentMailedAddresses = $vals['recentMailedAddresses'];
            }
            if (isset($vals['comments'])) {
                $this->comments = $vals['comments'];
            }
            if (isset($vals['dateAgreedToTermsOfService'])) {
                $this->dateAgreedToTermsOfService = $vals['dateAgreedToTermsOfService'];
            }
            if (isset($vals['maxReferrals'])) {
                $this->maxReferrals = $vals['maxReferrals'];
            }
            if (isset($vals['referralCount'])) {
                $this->referralCount = $vals['referralCount'];
            }
            if (isset($vals['refererCode'])) {
                $this->refererCode = $vals['refererCode'];
            }
            if (isset($vals['sentEmailDate'])) {
                $this->sentEmailDate = $vals['sentEmailDate'];
            }
            if (isset($vals['sentEmailCount'])) {
                $this->sentEmailCount = $vals['sentEmailCount'];
            }
            if (isset($vals['dailyEmailLimit'])) {
                $this->dailyEmailLimit = $vals['dailyEmailLimit'];
            }
            if (isset($vals['emailOptOutDate'])) {
                $this->emailOptOutDate = $vals['emailOptOutDate'];
            }
            if (isset($vals['partnerEmailOptInDate'])) {
                $this->partnerEmailOptInDate = $vals['partnerEmailOptInDate'];
            }
            if (isset($vals['preferredLanguage'])) {
                $this->preferredLanguage = $vals['preferredLanguage'];
            }
            if (isset($vals['preferredCountry'])) {
                $this->preferredCountry = $vals['preferredCountry'];
            }
            if (isset($vals['clipFullPage'])) {
                $this->clipFullPage = $vals['clipFullPage'];
            }
            if (isset($vals['twitterUserName'])) {
                $this->twitterUserName = $vals['twitterUserName'];
            }
            if (isset($vals['twitterId'])) {
                $this->twitterId = $vals['twitterId'];
            }
            if (isset($vals['groupName'])) {
                $this->groupName = $vals['groupName'];
            }
            if (isset($vals['recognitionLanguage'])) {
                $this->recognitionLanguage = $vals['recognitionLanguage'];
            }
            if (isset($vals['referralProof'])) {
                $this->referralProof = $vals['referralProof'];
            }
            if (isset($vals['educationalDiscount'])) {
                $this->educationalDiscount = $vals['educationalDiscount'];
            }
            if (isset($vals['businessAddress'])) {
                $this->businessAddress = $vals['businessAddress'];
            }
            if (isset($vals['hideSponsorBilling'])) {
                $this->hideSponsorBilling = $vals['hideSponsorBilling'];
            }
            if (isset($vals['useEmailAutoFiling'])) {
                $this->useEmailAutoFiling = $vals['useEmailAutoFiling'];
            }
            if (isset($vals['reminderEmailConfig'])) {
                $this->reminderEmailConfig = $vals['reminderEmailConfig'];
            }
            if (isset($vals['emailAddressLastConfirmed'])) {
                $this->emailAddressLastConfirmed = $vals['emailAddressLastConfirmed'];
            }
            if (isset($vals['passwordUpdated'])) {
                $this->passwordUpdated = $vals['passwordUpdated'];
            }
            if (isset($vals['salesforcePushEnabled'])) {
                $this->salesforcePushEnabled = $vals['salesforcePushEnabled'];
            }
            if (isset($vals['shouldLogClientEvent'])) {
                $this->shouldLogClientEvent = $vals['shouldLogClientEvent'];
            }
            if (isset($vals['optOutMachineLearning'])) {
                $this->optOutMachineLearning = $vals['optOutMachineLearning'];
            }
        }
    }

    public function getName()
    {
        return 'UserAttributes';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->defaultLocationName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->defaultLatitude);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->defaultLongitude);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->preactivation);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->viewedPromotions = array();
                        $_size0 = 0;
                        $_etype3 = 0;
                        $xfer += $input->readListBegin($_etype3, $_size0);
                        for ($_i4 = 0; $_i4 < $_size0; ++$_i4) {
                            $elem5 = null;
                            $xfer += $input->readString($elem5);
                            $this->viewedPromotions []= $elem5;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->incomingEmailAddress);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::LST) {
                        $this->recentMailedAddresses = array();
                        $_size6 = 0;
                        $_etype9 = 0;
                        $xfer += $input->readListBegin($_etype9, $_size6);
                        for ($_i10 = 0; $_i10 < $_size6; ++$_i10) {
                            $elem11 = null;
                            $xfer += $input->readString($elem11);
                            $this->recentMailedAddresses []= $elem11;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->comments);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->dateAgreedToTermsOfService);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->maxReferrals);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->referralCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->refererCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->sentEmailDate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->sentEmailCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->dailyEmailLimit);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->emailOptOutDate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->partnerEmailOptInDate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->preferredLanguage);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->preferredCountry);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->clipFullPage);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->twitterUserName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->twitterId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 25:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->groupName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 26:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->recognitionLanguage);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 28:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->referralProof);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 29:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->educationalDiscount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 30:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->businessAddress);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 31:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->hideSponsorBilling);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 33:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->useEmailAutoFiling);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 34:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->reminderEmailConfig);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 35:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->emailAddressLastConfirmed);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 36:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->passwordUpdated);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 37:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->salesforcePushEnabled);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 38:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->shouldLogClientEvent);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 39:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->optOutMachineLearning);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('UserAttributes');
        if ($this->defaultLocationName !== null) {
            $xfer += $output->writeFieldBegin('defaultLocationName', TType::STRING, 1);
            $xfer += $output->writeString($this->defaultLocationName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->defaultLatitude !== null) {
            $xfer += $output->writeFieldBegin('defaultLatitude', TType::DOUBLE, 2);
            $xfer += $output->writeDouble($this->defaultLatitude);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->defaultLongitude !== null) {
            $xfer += $output->writeFieldBegin('defaultLongitude', TType::DOUBLE, 3);
            $xfer += $output->writeDouble($this->defaultLongitude);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->preactivation !== null) {
            $xfer += $output->writeFieldBegin('preactivation', TType::BOOL, 4);
            $xfer += $output->writeBool($this->preactivation);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->viewedPromotions !== null) {
            if (!is_array($this->viewedPromotions)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('viewedPromotions', TType::LST, 5);
            $output->writeListBegin(TType::STRING, count($this->viewedPromotions));
            foreach ($this->viewedPromotions as $iter12) {
                $xfer += $output->writeString($iter12);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->incomingEmailAddress !== null) {
            $xfer += $output->writeFieldBegin('incomingEmailAddress', TType::STRING, 6);
            $xfer += $output->writeString($this->incomingEmailAddress);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->recentMailedAddresses !== null) {
            if (!is_array($this->recentMailedAddresses)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('recentMailedAddresses', TType::LST, 7);
            $output->writeListBegin(TType::STRING, count($this->recentMailedAddresses));
            foreach ($this->recentMailedAddresses as $iter13) {
                $xfer += $output->writeString($iter13);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->comments !== null) {
            $xfer += $output->writeFieldBegin('comments', TType::STRING, 9);
            $xfer += $output->writeString($this->comments);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dateAgreedToTermsOfService !== null) {
            $xfer += $output->writeFieldBegin('dateAgreedToTermsOfService', TType::I64, 11);
            $xfer += $output->writeI64($this->dateAgreedToTermsOfService);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->maxReferrals !== null) {
            $xfer += $output->writeFieldBegin('maxReferrals', TType::I32, 12);
            $xfer += $output->writeI32($this->maxReferrals);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->referralCount !== null) {
            $xfer += $output->writeFieldBegin('referralCount', TType::I32, 13);
            $xfer += $output->writeI32($this->referralCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->refererCode !== null) {
            $xfer += $output->writeFieldBegin('refererCode', TType::STRING, 14);
            $xfer += $output->writeString($this->refererCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sentEmailDate !== null) {
            $xfer += $output->writeFieldBegin('sentEmailDate', TType::I64, 15);
            $xfer += $output->writeI64($this->sentEmailDate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sentEmailCount !== null) {
            $xfer += $output->writeFieldBegin('sentEmailCount', TType::I32, 16);
            $xfer += $output->writeI32($this->sentEmailCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dailyEmailLimit !== null) {
            $xfer += $output->writeFieldBegin('dailyEmailLimit', TType::I32, 17);
            $xfer += $output->writeI32($this->dailyEmailLimit);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->emailOptOutDate !== null) {
            $xfer += $output->writeFieldBegin('emailOptOutDate', TType::I64, 18);
            $xfer += $output->writeI64($this->emailOptOutDate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->partnerEmailOptInDate !== null) {
            $xfer += $output->writeFieldBegin('partnerEmailOptInDate', TType::I64, 19);
            $xfer += $output->writeI64($this->partnerEmailOptInDate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->preferredLanguage !== null) {
            $xfer += $output->writeFieldBegin('preferredLanguage', TType::STRING, 20);
            $xfer += $output->writeString($this->preferredLanguage);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->preferredCountry !== null) {
            $xfer += $output->writeFieldBegin('preferredCountry', TType::STRING, 21);
            $xfer += $output->writeString($this->preferredCountry);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->clipFullPage !== null) {
            $xfer += $output->writeFieldBegin('clipFullPage', TType::BOOL, 22);
            $xfer += $output->writeBool($this->clipFullPage);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->twitterUserName !== null) {
            $xfer += $output->writeFieldBegin('twitterUserName', TType::STRING, 23);
            $xfer += $output->writeString($this->twitterUserName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->twitterId !== null) {
            $xfer += $output->writeFieldBegin('twitterId', TType::STRING, 24);
            $xfer += $output->writeString($this->twitterId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->groupName !== null) {
            $xfer += $output->writeFieldBegin('groupName', TType::STRING, 25);
            $xfer += $output->writeString($this->groupName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->recognitionLanguage !== null) {
            $xfer += $output->writeFieldBegin('recognitionLanguage', TType::STRING, 26);
            $xfer += $output->writeString($this->recognitionLanguage);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->referralProof !== null) {
            $xfer += $output->writeFieldBegin('referralProof', TType::STRING, 28);
            $xfer += $output->writeString($this->referralProof);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->educationalDiscount !== null) {
            $xfer += $output->writeFieldBegin('educationalDiscount', TType::BOOL, 29);
            $xfer += $output->writeBool($this->educationalDiscount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->businessAddress !== null) {
            $xfer += $output->writeFieldBegin('businessAddress', TType::STRING, 30);
            $xfer += $output->writeString($this->businessAddress);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->hideSponsorBilling !== null) {
            $xfer += $output->writeFieldBegin('hideSponsorBilling', TType::BOOL, 31);
            $xfer += $output->writeBool($this->hideSponsorBilling);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->useEmailAutoFiling !== null) {
            $xfer += $output->writeFieldBegin('useEmailAutoFiling', TType::BOOL, 33);
            $xfer += $output->writeBool($this->useEmailAutoFiling);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->reminderEmailConfig !== null) {
            $xfer += $output->writeFieldBegin('reminderEmailConfig', TType::I32, 34);
            $xfer += $output->writeI32($this->reminderEmailConfig);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->emailAddressLastConfirmed !== null) {
            $xfer += $output->writeFieldBegin('emailAddressLastConfirmed', TType::I64, 35);
            $xfer += $output->writeI64($this->emailAddressLastConfirmed);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->passwordUpdated !== null) {
            $xfer += $output->writeFieldBegin('passwordUpdated', TType::I64, 36);
            $xfer += $output->writeI64($this->passwordUpdated);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->salesforcePushEnabled !== null) {
            $xfer += $output->writeFieldBegin('salesforcePushEnabled', TType::BOOL, 37);
            $xfer += $output->writeBool($this->salesforcePushEnabled);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->shouldLogClientEvent !== null) {
            $xfer += $output->writeFieldBegin('shouldLogClientEvent', TType::BOOL, 38);
            $xfer += $output->writeBool($this->shouldLogClientEvent);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->optOutMachineLearning !== null) {
            $xfer += $output->writeFieldBegin('optOutMachineLearning', TType::BOOL, 39);
            $xfer += $output->writeBool($this->optOutMachineLearning);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
