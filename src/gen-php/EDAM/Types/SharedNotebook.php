<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Shared notebooks represent a relationship between a notebook and a single
 * share invitation recipient.
 * <dl>
 * <dt>id</dt>
 * <dd>The primary identifier of the share, which is not globally unique.</dd>
 * 
 * <dt>userId</dt>
 * <dd>The user id of the owner of the notebook.</dd>
 * 
 * <dt>notebookGuid</dt>
 * <dd>The GUID of the notebook that has been shared.</dd>
 * 
 * <dt>email</dt>
 * <dd>A string containing a display name for the recipient of the share. This may
 *     be an email address, a phone number, a full name, or some other descriptive
 *     string This field is read-only to clients. It will be filled in by the service
 *     when returning shared notebooks.
 * </dd>
 * 
 * <dt>recipientIdentityId</dt>
 * <dd>The IdentityID of the share recipient. If present, only the user who has
 *     claimed that identity may access this share.
 * </dd>
 * 
 * <dt>notebookModifiable</dt>
 * <dd>DEPRECATED</dd>
 * 
 * <dt>serviceCreated</dt>
 * <dd>The date that the owner first created the share with the specific email
 *   address.</dd>
 * 
 * <dt>serviceUpdated</dt>
 * <dd>The date the shared notebook was last updated on the service.  This
 *     will be updated when authenticateToSharedNotebook is called the first
 *     time with a shared notebook (i.e. when the username is bound to that
 *     shared notebook), and also when the SharedNotebook privilege is updated
 *     as part of a shareNotebook(...) call, as well as on any calls to
 *     updateSharedNotebook(...).
 * </dd>
 * 
 * <dt>username</dt>
 * <dd>DEPRECATED. The username of the user who can access this share. This
 *     value is read-only to clients. It will be filled in by the service when
 *     returning shared notebooks.
 * </dd>
 * 
 * <dt>privilege</dt>
 * <dd>The privilege level granted to the notebook, activity stream, and
 *     invitations.  See the corresponding enumeration for details.
 * </dd>
 * 
 * <dt>recipientSettings</dt>
 * <dd>Settings intended for use only by the recipient of this shared
 *     notebook.  You should skip setting this value unless you want
 *     to change the value contained inside the structure, and only if
 *     you are the recipient.</dd>
 * 
 * <dt>globalId</dt>
 * <dd>An immutable, opaque string that acts as a globally unique
 *     identifier for this shared notebook record.  You can use this field to
 *     match linked notebook and shared notebook records as well as to
 *     create new LinkedNotebook records.  This field replaces the deprecated
 *     shareKey field.
 * </dd>
 * 
 * <dt>sharerUserId</dt>
 * <dd>The user id of the user who shared a notebook via this shared notebook
 *     instance. This may not be the same as userId, since a user with full
 *     access to a notebook may have created a new share for that notebook. For
 *     Business, this represents the user who shared the business notebook. This
 *     field is currently unset for a SharedNotebook created by joining a
 *     notebook that has been published to the business.
 * </dd>
 * 
 * <dt>recipientUsername</dt>
 * <dd>The username of the user who can access this share. This is the username
 *     for the user with the id in recipientUserId. This value can be set
 *     by clients when calling shareNotebook(...), and that will result in the
 *     created SharedNotebook being assigned to a user. This value is always set
 *     if serviceAssigned is set.
 * </dd>
 * 
 * <dt>recipientUserId</dt>
 * <dd>The id of the user who can access this share. This is the id for the user
 *     with the username in recipientUsername. This value is read-only and set
 *     by the service. Value set by clients will be ignored. This field may be unset
 *     for unjoined notebooks and is always set if serviceAssigned is set. Clients should
 *     prefer this field over recipientUsername unless they need to use usernames
 *     directly.
 * </dd>
 * 
 * <dt>serviceAssigned</dt>
 * <dd>The date this SharedNotebook was assigned (i.e. has been associated with an
 *     Evernote user whose user ID is set in recipientUserId). Unset if the SharedNotebook
 *     is not assigned. This field is a read-only value that is set by the service.
 * </dd>
 * </dl>
 */
class SharedNotebook
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'userId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'notebookGuid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'email',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        18 => array(
            'var' => 'recipientIdentityId',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        5 => array(
            'var' => 'notebookModifiable',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'serviceCreated',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        10 => array(
            'var' => 'serviceUpdated',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        8 => array(
            'var' => 'globalId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'username',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'privilege',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\Types\SharedNotebookPrivilegeLevel',
        ),
        13 => array(
            'var' => 'recipientSettings',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\SharedNotebookRecipientSettings',
        ),
        14 => array(
            'var' => 'sharerUserId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        15 => array(
            'var' => 'recipientUsername',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        17 => array(
            'var' => 'recipientUserId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        16 => array(
            'var' => 'serviceAssigned',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var int
     */
    public $id = null;
    /**
     * @var int
     */
    public $userId = null;
    /**
     * @var string
     */
    public $notebookGuid = null;
    /**
     * @var string
     */
    public $email = null;
    /**
     * @var int
     */
    public $recipientIdentityId = null;
    /**
     * @var bool
     */
    public $notebookModifiable = null;
    /**
     * @var int
     */
    public $serviceCreated = null;
    /**
     * @var int
     */
    public $serviceUpdated = null;
    /**
     * @var string
     */
    public $globalId = null;
    /**
     * @var string
     */
    public $username = null;
    /**
     * @var int
     */
    public $privilege = null;
    /**
     * @var \EDAM\Types\SharedNotebookRecipientSettings
     */
    public $recipientSettings = null;
    /**
     * @var int
     */
    public $sharerUserId = null;
    /**
     * @var string
     */
    public $recipientUsername = null;
    /**
     * @var int
     */
    public $recipientUserId = null;
    /**
     * @var int
     */
    public $serviceAssigned = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['userId'])) {
                $this->userId = $vals['userId'];
            }
            if (isset($vals['notebookGuid'])) {
                $this->notebookGuid = $vals['notebookGuid'];
            }
            if (isset($vals['email'])) {
                $this->email = $vals['email'];
            }
            if (isset($vals['recipientIdentityId'])) {
                $this->recipientIdentityId = $vals['recipientIdentityId'];
            }
            if (isset($vals['notebookModifiable'])) {
                $this->notebookModifiable = $vals['notebookModifiable'];
            }
            if (isset($vals['serviceCreated'])) {
                $this->serviceCreated = $vals['serviceCreated'];
            }
            if (isset($vals['serviceUpdated'])) {
                $this->serviceUpdated = $vals['serviceUpdated'];
            }
            if (isset($vals['globalId'])) {
                $this->globalId = $vals['globalId'];
            }
            if (isset($vals['username'])) {
                $this->username = $vals['username'];
            }
            if (isset($vals['privilege'])) {
                $this->privilege = $vals['privilege'];
            }
            if (isset($vals['recipientSettings'])) {
                $this->recipientSettings = $vals['recipientSettings'];
            }
            if (isset($vals['sharerUserId'])) {
                $this->sharerUserId = $vals['sharerUserId'];
            }
            if (isset($vals['recipientUsername'])) {
                $this->recipientUsername = $vals['recipientUsername'];
            }
            if (isset($vals['recipientUserId'])) {
                $this->recipientUserId = $vals['recipientUserId'];
            }
            if (isset($vals['serviceAssigned'])) {
                $this->serviceAssigned = $vals['serviceAssigned'];
            }
        }
    }

    public function getName()
    {
        return 'SharedNotebook';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->userId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->notebookGuid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->email);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->recipientIdentityId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->notebookModifiable);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->serviceCreated);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->serviceUpdated);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->globalId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->username);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->privilege);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRUCT) {
                        $this->recipientSettings = new \EDAM\Types\SharedNotebookRecipientSettings();
                        $xfer += $this->recipientSettings->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->sharerUserId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->recipientUsername);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->recipientUserId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->serviceAssigned);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('SharedNotebook');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::I64, 1);
            $xfer += $output->writeI64($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userId !== null) {
            $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
            $xfer += $output->writeI32($this->userId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notebookGuid !== null) {
            $xfer += $output->writeFieldBegin('notebookGuid', TType::STRING, 3);
            $xfer += $output->writeString($this->notebookGuid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->email !== null) {
            $xfer += $output->writeFieldBegin('email', TType::STRING, 4);
            $xfer += $output->writeString($this->email);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notebookModifiable !== null) {
            $xfer += $output->writeFieldBegin('notebookModifiable', TType::BOOL, 5);
            $xfer += $output->writeBool($this->notebookModifiable);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->serviceCreated !== null) {
            $xfer += $output->writeFieldBegin('serviceCreated', TType::I64, 7);
            $xfer += $output->writeI64($this->serviceCreated);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->globalId !== null) {
            $xfer += $output->writeFieldBegin('globalId', TType::STRING, 8);
            $xfer += $output->writeString($this->globalId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->username !== null) {
            $xfer += $output->writeFieldBegin('username', TType::STRING, 9);
            $xfer += $output->writeString($this->username);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->serviceUpdated !== null) {
            $xfer += $output->writeFieldBegin('serviceUpdated', TType::I64, 10);
            $xfer += $output->writeI64($this->serviceUpdated);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->privilege !== null) {
            $xfer += $output->writeFieldBegin('privilege', TType::I32, 11);
            $xfer += $output->writeI32($this->privilege);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->recipientSettings !== null) {
            if (!is_object($this->recipientSettings)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('recipientSettings', TType::STRUCT, 13);
            $xfer += $this->recipientSettings->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sharerUserId !== null) {
            $xfer += $output->writeFieldBegin('sharerUserId', TType::I32, 14);
            $xfer += $output->writeI32($this->sharerUserId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->recipientUsername !== null) {
            $xfer += $output->writeFieldBegin('recipientUsername', TType::STRING, 15);
            $xfer += $output->writeString($this->recipientUsername);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->serviceAssigned !== null) {
            $xfer += $output->writeFieldBegin('serviceAssigned', TType::I64, 16);
            $xfer += $output->writeI64($this->serviceAssigned);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->recipientUserId !== null) {
            $xfer += $output->writeFieldBegin('recipientUserId', TType::I32, 17);
            $xfer += $output->writeI32($this->recipientUserId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->recipientIdentityId !== null) {
            $xfer += $output->writeFieldBegin('recipientIdentityId', TType::I64, 18);
            $xfer += $output->writeI64($this->recipientIdentityId);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
