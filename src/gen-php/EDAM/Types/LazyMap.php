<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * A structure that wraps a map of name/value pairs whose values are not
 * always present in the structure in order to reduce space when obtaining
 * batches of entities that contain the map.
 * 
 * When the server provides the client with a LazyMap, it will fill in either
 * the keysOnly field or the fullMap field, but never both, based on the API
 * and parameters.
 * 
 * When a client provides a LazyMap to the server as part of an update to
 * an object, the server will only update the LazyMap if the fullMap field is
 * set. If the fullMap field is not set, the server will not make any changes
 * to the map.
 * 
 * Check the API documentation of the individual calls involving the LazyMap
 * for full details including the constraints of the names and values of the
 * map.
 * 
 * <dl>
 * <dt>keysOnly</dt>
 *   <dd>The set of keys for the map.  This field is ignored by the
 *       server when set.
 *   </dd>
 * 
 * <dt>fullMap</dt>
 *   <dd>The complete map, including all keys and values.
 *   </dd>
 * </dl>
 */
class LazyMap
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'keysOnly',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        2 => array(
            'var' => 'fullMap',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string[]
     */
    public $keysOnly = null;
    /**
     * @var array
     */
    public $fullMap = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['keysOnly'])) {
                $this->keysOnly = $vals['keysOnly'];
            }
            if (isset($vals['fullMap'])) {
                $this->fullMap = $vals['fullMap'];
            }
        }
    }

    public function getName()
    {
        return 'LazyMap';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::SET) {
                        $this->keysOnly = array();
                        $_size14 = 0;
                        $_etype17 = 0;
                        $xfer += $input->readSetBegin($_etype17, $_size14);
                        for ($_i18 = 0; $_i18 < $_size14; ++$_i18) {
                            $elem19 = null;
                            $xfer += $input->readString($elem19);
                            $this->keysOnly[$elem19] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::MAP) {
                        $this->fullMap = array();
                        $_size20 = 0;
                        $_ktype21 = 0;
                        $_vtype22 = 0;
                        $xfer += $input->readMapBegin($_ktype21, $_vtype22, $_size20);
                        for ($_i24 = 0; $_i24 < $_size20; ++$_i24) {
                            $key25 = '';
                            $val26 = '';
                            $xfer += $input->readString($key25);
                            $xfer += $input->readString($val26);
                            $this->fullMap[$key25] = $val26;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('LazyMap');
        if ($this->keysOnly !== null) {
            if (!is_array($this->keysOnly)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('keysOnly', TType::SET, 1);
            $output->writeSetBegin(TType::STRING, count($this->keysOnly));
            foreach ($this->keysOnly as $iter27 => $iter28) {
                $xfer += $output->writeString($iter27);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->fullMap !== null) {
            if (!is_array($this->fullMap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('fullMap', TType::MAP, 2);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->fullMap));
            foreach ($this->fullMap as $kiter29 => $viter30) {
                $xfer += $output->writeString($kiter29);
                $xfer += $output->writeString($viter30);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
