<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Represents the owner's account related limits on a Note.
 * The field uploaded represents the total number of bytes that have been uploaded
 * to this account and is taken from the SyncState struct. All other fields
 * represent account related limits and are taken from the AccountLimits struct.
 * <p />
 * See SyncState and AccountLimits struct field definitions for more details.
 */
class NoteLimits
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'noteResourceCountMax',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'uploadLimit',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'resourceSizeMax',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        4 => array(
            'var' => 'noteSizeMax',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        5 => array(
            'var' => 'uploaded',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var int
     */
    public $noteResourceCountMax = null;
    /**
     * @var int
     */
    public $uploadLimit = null;
    /**
     * @var int
     */
    public $resourceSizeMax = null;
    /**
     * @var int
     */
    public $noteSizeMax = null;
    /**
     * @var int
     */
    public $uploaded = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['noteResourceCountMax'])) {
                $this->noteResourceCountMax = $vals['noteResourceCountMax'];
            }
            if (isset($vals['uploadLimit'])) {
                $this->uploadLimit = $vals['uploadLimit'];
            }
            if (isset($vals['resourceSizeMax'])) {
                $this->resourceSizeMax = $vals['resourceSizeMax'];
            }
            if (isset($vals['noteSizeMax'])) {
                $this->noteSizeMax = $vals['noteSizeMax'];
            }
            if (isset($vals['uploaded'])) {
                $this->uploaded = $vals['uploaded'];
            }
        }
    }

    public function getName()
    {
        return 'NoteLimits';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->noteResourceCountMax);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uploadLimit);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->resourceSizeMax);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->noteSizeMax);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uploaded);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('NoteLimits');
        if ($this->noteResourceCountMax !== null) {
            $xfer += $output->writeFieldBegin('noteResourceCountMax', TType::I32, 1);
            $xfer += $output->writeI32($this->noteResourceCountMax);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->uploadLimit !== null) {
            $xfer += $output->writeFieldBegin('uploadLimit', TType::I64, 2);
            $xfer += $output->writeI64($this->uploadLimit);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->resourceSizeMax !== null) {
            $xfer += $output->writeFieldBegin('resourceSizeMax', TType::I64, 3);
            $xfer += $output->writeI64($this->resourceSizeMax);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->noteSizeMax !== null) {
            $xfer += $output->writeFieldBegin('noteSizeMax', TType::I64, 4);
            $xfer += $output->writeI64($this->noteSizeMax);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->uploaded !== null) {
            $xfer += $output->writeFieldBegin('uploaded', TType::I64, 5);
            $xfer += $output->writeI64($this->uploaded);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
