<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * This structure captures information about the operations that cannot be performed on a given
 * note that has been shared with a recipient via a SharedNote. The following operations are
 * <b>never</b> allowed based on SharedNotes, and as such are left out of the NoteRestrictions
 * structure for brevity:
 * 
 * <ul>
 *   <li>Expunging a note (NoteStore.expungeNote)</li>
 *   <li>Moving a note to the trash (Note.active)</li>
 *   <li>Updating a note's notebook (Note.notebookGuid)</li>
 *   <li>Updating a note's tags (Note.tagGuids, Note.tagNames)</li>
 *   <li>Updating a note's attributes (Note.attributes)</li>
 *   <li>Sharing a note with the business (NoteStore.shareNoteWithBusiness</li>
 *   <li>Getting a note's version history (NoteStore.listNoteVersions,
 *     NoteStore.getNoteVersion)</li>
 * </ul>
 * 
 * When a client has permission to update a note's title or content, it may also update the
 * Note.updated timestamp.
 * 
 * <b>This structure reflects only the privileges / restrictions conveyed by the SharedNote.</b>
 * It does not incorporate privileges conveyed by a potential SharedNotebook to the same
 * recipient. As such, the actual permissions that the recipient has on the note may differ from
 * the permissions expressed in this structure.
 * 
 * For example, consider a user with read-only access to a shared notebook, and a read-write share
 * of a specific note in the notebook. The note restrictions would contain noUpdateTitle = false,
 * while the notebook restrictions would contain noUpdateNotes = true. In this case, the user is
 * allowed to update the note title based on the note restrictions.
 * 
 * Alternatively, consider a user with read-write access to a shared notebook, and a read-only
 * share of a specific note in that notebook. The note restrictions would contain
 * noUpdateTitle = true, while the notebook restrictions would contain noUpdateNotes = false. In
 * this case, the user would have full edit permissions on the note based on the notebook
 * restrictions.
 * 
 * <dl>
 *   <dt>noUpdateTitle</dt>
 *   <dd>The client may not update the note's title (Note.title).</dd>
 * 
 *   <dt>noUpdateContent<dt>
 *   <dd>The client may not update the note's content. Content includes Note.content
 *     and Note.resources, as well as the related fields Note.contentHash and
 *     Note.contentLength.</dd>
 * 
 *   <dt>noEmail</dt>
 *   <dd>The client may not email the note (NoteStore.emailNote).</dd>
 * 
 *   <dt>noShare</dt>
 *   <dd>The client may not share the note with specific recipients
 *     (NoteStore.createOrUpdateSharedNotes).</dd>
 * 
 *   <dt>noSharePublicly</dt>
 *   <dd>The client may not make the note public (NoteStore.shareNote).</dd>
 * </dl>
 */
class NoteRestrictions
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'noUpdateTitle',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        2 => array(
            'var' => 'noUpdateContent',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        3 => array(
            'var' => 'noEmail',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        4 => array(
            'var' => 'noShare',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'noSharePublicly',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var bool
     */
    public $noUpdateTitle = null;
    /**
     * @var bool
     */
    public $noUpdateContent = null;
    /**
     * @var bool
     */
    public $noEmail = null;
    /**
     * @var bool
     */
    public $noShare = null;
    /**
     * @var bool
     */
    public $noSharePublicly = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['noUpdateTitle'])) {
                $this->noUpdateTitle = $vals['noUpdateTitle'];
            }
            if (isset($vals['noUpdateContent'])) {
                $this->noUpdateContent = $vals['noUpdateContent'];
            }
            if (isset($vals['noEmail'])) {
                $this->noEmail = $vals['noEmail'];
            }
            if (isset($vals['noShare'])) {
                $this->noShare = $vals['noShare'];
            }
            if (isset($vals['noSharePublicly'])) {
                $this->noSharePublicly = $vals['noSharePublicly'];
            }
        }
    }

    public function getName()
    {
        return 'NoteRestrictions';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->noUpdateTitle);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->noUpdateContent);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->noEmail);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->noShare);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->noSharePublicly);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('NoteRestrictions');
        if ($this->noUpdateTitle !== null) {
            $xfer += $output->writeFieldBegin('noUpdateTitle', TType::BOOL, 1);
            $xfer += $output->writeBool($this->noUpdateTitle);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->noUpdateContent !== null) {
            $xfer += $output->writeFieldBegin('noUpdateContent', TType::BOOL, 2);
            $xfer += $output->writeBool($this->noUpdateContent);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->noEmail !== null) {
            $xfer += $output->writeFieldBegin('noEmail', TType::BOOL, 3);
            $xfer += $output->writeBool($this->noEmail);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->noShare !== null) {
            $xfer += $output->writeFieldBegin('noShare', TType::BOOL, 4);
            $xfer += $output->writeBool($this->noShare);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->noSharePublicly !== null) {
            $xfer += $output->writeFieldBegin('noSharePublicly', TType::BOOL, 5);
            $xfer += $output->writeBool($this->noSharePublicly);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
