<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 *  This structure is used to provide account limits that are in effect for this user.
 * <dl>
 *  <dt>userMailLimitDaily</dt>
 *    <dd>The number of emails of any type that can be sent by a user from the
 *        service per day.  If an email is sent to two different recipients, this
 *        counts as two emails.
 *    </dd>
 *  <dt>noteSizeMax</dt>
 *    <dd>Maximum total size of a Note that can be added.  The size of a note is
 *        calculated as:
 *        ENML content length (in Unicode characters) plus the sum of all resource
 *        sizes (in bytes).
 *    </dd>
 *  <dt>resourceSizeMax</dt>
 *    <dd>Maximum size of a resource, in bytes
 *    </dd>
 *  <dt>userLinkedNotebookMax</dt>
 *    <dd>Maximum number of linked notebooks per account.
 *    </dd>
 *  <dt>uploadLimit</dt>
 *    <dd>The number of bytes that can be uploaded to the account
 *    in the current month.  For new notes that are created, this is the length
 *    of the note content (in Unicode characters) plus the size of each resource
 *    (in bytes).  For edited notes, this is the the difference between the old
 *    length and the new length (if this is greater than 0) plus the size of
 *    each new resource.
 *    </dd>
 *  <dt>userNoteCountMax</dt>
 *    <dd>Maximum number of Notes per user</dd>
 *  <dt>userNotebookCountMax</dt>
 *    <dd>Maximum number of Notebooks per user</dd>
 *  <dt>userTagCountMax</dt>
 *    <dd>Maximum number of Tags per account</dd>
 *  <dt>noteTagCountMax</dt>
 *    <dd>Maximum number of Tags per Note</dd>
 *  <dt>userSavedSearchesMax</dt>
 *    <dd>Maximum number of SavedSearches per account</dd>
 *  <dt>noteResourceCountMax</dt>
 *    <dd>The maximum number of Resources per Note</dd>
 *  </dl>
 */
class AccountLimits
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'userMailLimitDaily',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'noteSizeMax',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'resourceSizeMax',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        4 => array(
            'var' => 'userLinkedNotebookMax',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'uploadLimit',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        6 => array(
            'var' => 'userNoteCountMax',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'userNotebookCountMax',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        8 => array(
            'var' => 'userTagCountMax',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        9 => array(
            'var' => 'noteTagCountMax',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        10 => array(
            'var' => 'userSavedSearchesMax',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        11 => array(
            'var' => 'noteResourceCountMax',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var int
     */
    public $userMailLimitDaily = null;
    /**
     * @var int
     */
    public $noteSizeMax = null;
    /**
     * @var int
     */
    public $resourceSizeMax = null;
    /**
     * @var int
     */
    public $userLinkedNotebookMax = null;
    /**
     * @var int
     */
    public $uploadLimit = null;
    /**
     * @var int
     */
    public $userNoteCountMax = null;
    /**
     * @var int
     */
    public $userNotebookCountMax = null;
    /**
     * @var int
     */
    public $userTagCountMax = null;
    /**
     * @var int
     */
    public $noteTagCountMax = null;
    /**
     * @var int
     */
    public $userSavedSearchesMax = null;
    /**
     * @var int
     */
    public $noteResourceCountMax = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['userMailLimitDaily'])) {
                $this->userMailLimitDaily = $vals['userMailLimitDaily'];
            }
            if (isset($vals['noteSizeMax'])) {
                $this->noteSizeMax = $vals['noteSizeMax'];
            }
            if (isset($vals['resourceSizeMax'])) {
                $this->resourceSizeMax = $vals['resourceSizeMax'];
            }
            if (isset($vals['userLinkedNotebookMax'])) {
                $this->userLinkedNotebookMax = $vals['userLinkedNotebookMax'];
            }
            if (isset($vals['uploadLimit'])) {
                $this->uploadLimit = $vals['uploadLimit'];
            }
            if (isset($vals['userNoteCountMax'])) {
                $this->userNoteCountMax = $vals['userNoteCountMax'];
            }
            if (isset($vals['userNotebookCountMax'])) {
                $this->userNotebookCountMax = $vals['userNotebookCountMax'];
            }
            if (isset($vals['userTagCountMax'])) {
                $this->userTagCountMax = $vals['userTagCountMax'];
            }
            if (isset($vals['noteTagCountMax'])) {
                $this->noteTagCountMax = $vals['noteTagCountMax'];
            }
            if (isset($vals['userSavedSearchesMax'])) {
                $this->userSavedSearchesMax = $vals['userSavedSearchesMax'];
            }
            if (isset($vals['noteResourceCountMax'])) {
                $this->noteResourceCountMax = $vals['noteResourceCountMax'];
            }
        }
    }

    public function getName()
    {
        return 'AccountLimits';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->userMailLimitDaily);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->noteSizeMax);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->resourceSizeMax);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->userLinkedNotebookMax);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uploadLimit);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->userNoteCountMax);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->userNotebookCountMax);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->userTagCountMax);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->noteTagCountMax);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->userSavedSearchesMax);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->noteResourceCountMax);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('AccountLimits');
        if ($this->userMailLimitDaily !== null) {
            $xfer += $output->writeFieldBegin('userMailLimitDaily', TType::I32, 1);
            $xfer += $output->writeI32($this->userMailLimitDaily);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->noteSizeMax !== null) {
            $xfer += $output->writeFieldBegin('noteSizeMax', TType::I64, 2);
            $xfer += $output->writeI64($this->noteSizeMax);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->resourceSizeMax !== null) {
            $xfer += $output->writeFieldBegin('resourceSizeMax', TType::I64, 3);
            $xfer += $output->writeI64($this->resourceSizeMax);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userLinkedNotebookMax !== null) {
            $xfer += $output->writeFieldBegin('userLinkedNotebookMax', TType::I32, 4);
            $xfer += $output->writeI32($this->userLinkedNotebookMax);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->uploadLimit !== null) {
            $xfer += $output->writeFieldBegin('uploadLimit', TType::I64, 5);
            $xfer += $output->writeI64($this->uploadLimit);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userNoteCountMax !== null) {
            $xfer += $output->writeFieldBegin('userNoteCountMax', TType::I32, 6);
            $xfer += $output->writeI32($this->userNoteCountMax);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userNotebookCountMax !== null) {
            $xfer += $output->writeFieldBegin('userNotebookCountMax', TType::I32, 7);
            $xfer += $output->writeI32($this->userNotebookCountMax);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userTagCountMax !== null) {
            $xfer += $output->writeFieldBegin('userTagCountMax', TType::I32, 8);
            $xfer += $output->writeI32($this->userTagCountMax);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->noteTagCountMax !== null) {
            $xfer += $output->writeFieldBegin('noteTagCountMax', TType::I32, 9);
            $xfer += $output->writeI32($this->noteTagCountMax);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userSavedSearchesMax !== null) {
            $xfer += $output->writeFieldBegin('userSavedSearchesMax', TType::I32, 10);
            $xfer += $output->writeI32($this->userSavedSearchesMax);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->noteResourceCountMax !== null) {
            $xfer += $output->writeFieldBegin('noteResourceCountMax', TType::I32, 11);
            $xfer += $output->writeI32($this->noteResourceCountMax);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
