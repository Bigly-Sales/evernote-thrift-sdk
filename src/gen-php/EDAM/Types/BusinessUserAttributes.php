<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * A structure holding the optional attributes associated with users
 * in a business.
 * 
 * <dl>
 *  <dt>title</dt>
 *  <dd>Free form text of this user's title in the business</dd>
 * 
 *  <dt>location</dt>
 *  <dd>City, State (for US) or City / Province for other countries</dd>
 * 
 *  <dt>department</dt>
 *  <dd>Free form text of the department this user belongs to.</dd>
 * 
 *  <dt>mobilePhone</dt>
 *  <dd>User's mobile phone number. Stored as plain text without any formatting.</dd>
 * 
 *  <dt>linkedInProfileUrl</dt>
 *  <dd>URL to user's public LinkedIn profile page. This should only contain
 *  the portion relative to the base LinkedIn URL. For example: "/pub/john-smith/".
 *  </dd>
 * 
 *  <dt>workPhone</dt>
 *  <dd>User's work phone number. Stored as plain text without any formatting.</dd>
 * 
 *  <dt>companyStartDate</dt>
 *  <dd>The date on which the user started working at their company.</dd>
 * </dl>
 */
class BusinessUserAttributes
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'title',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'location',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'department',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'mobilePhone',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'linkedInProfileUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'workPhone',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'companyStartDate',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var string
     */
    public $title = null;
    /**
     * @var string
     */
    public $location = null;
    /**
     * @var string
     */
    public $department = null;
    /**
     * @var string
     */
    public $mobilePhone = null;
    /**
     * @var string
     */
    public $linkedInProfileUrl = null;
    /**
     * @var string
     */
    public $workPhone = null;
    /**
     * @var int
     */
    public $companyStartDate = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['title'])) {
                $this->title = $vals['title'];
            }
            if (isset($vals['location'])) {
                $this->location = $vals['location'];
            }
            if (isset($vals['department'])) {
                $this->department = $vals['department'];
            }
            if (isset($vals['mobilePhone'])) {
                $this->mobilePhone = $vals['mobilePhone'];
            }
            if (isset($vals['linkedInProfileUrl'])) {
                $this->linkedInProfileUrl = $vals['linkedInProfileUrl'];
            }
            if (isset($vals['workPhone'])) {
                $this->workPhone = $vals['workPhone'];
            }
            if (isset($vals['companyStartDate'])) {
                $this->companyStartDate = $vals['companyStartDate'];
            }
        }
    }

    public function getName()
    {
        return 'BusinessUserAttributes';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->title);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->location);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->department);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->mobilePhone);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->linkedInProfileUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->workPhone);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->companyStartDate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('BusinessUserAttributes');
        if ($this->title !== null) {
            $xfer += $output->writeFieldBegin('title', TType::STRING, 1);
            $xfer += $output->writeString($this->title);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->location !== null) {
            $xfer += $output->writeFieldBegin('location', TType::STRING, 2);
            $xfer += $output->writeString($this->location);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->department !== null) {
            $xfer += $output->writeFieldBegin('department', TType::STRING, 3);
            $xfer += $output->writeString($this->department);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mobilePhone !== null) {
            $xfer += $output->writeFieldBegin('mobilePhone', TType::STRING, 4);
            $xfer += $output->writeString($this->mobilePhone);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->linkedInProfileUrl !== null) {
            $xfer += $output->writeFieldBegin('linkedInProfileUrl', TType::STRING, 5);
            $xfer += $output->writeString($this->linkedInProfileUrl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->workPhone !== null) {
            $xfer += $output->writeFieldBegin('workPhone', TType::STRING, 6);
            $xfer += $output->writeString($this->workPhone);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->companyStartDate !== null) {
            $xfer += $output->writeFieldBegin('companyStartDate', TType::I64, 7);
            $xfer += $output->writeI64($this->companyStartDate);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
