<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * If a Notebook contained in an Evernote Business account has been published
 * the to business library, the Notebook will have a reference to one of these
 * structures, which specifies how the Notebook will be represented in the
 * library.
 * 
 * <dl>
 * <dt>notebookDescription</dt>
 *   <dd>A short description of the notebook's content that will be displayed
 *       in the business library user interface. The description may not begin
 *       or end with whitespace.
 *   <br/>
 *   Length: EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MIN -
 *           EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MAX
 *   <br/>
 *   Regex:  EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_REGEX
 *   </dd>
 * 
 * <dt>privilege</dt>
 *   <dd>The privileges that will be granted to users who join the notebook through
 *       the business library.
 *   </dd>
 * 
 * <dt>recommended</dt>
 *   <dd>Whether the notebook should be "recommended" when displayed in the business
 *       library user interface.
 *   </dd>
 * </dl>
 */
class BusinessNotebook
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'notebookDescription',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'privilege',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\Types\SharedNotebookPrivilegeLevel',
        ),
        3 => array(
            'var' => 'recommended',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var string
     */
    public $notebookDescription = null;
    /**
     * @var int
     */
    public $privilege = null;
    /**
     * @var bool
     */
    public $recommended = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['notebookDescription'])) {
                $this->notebookDescription = $vals['notebookDescription'];
            }
            if (isset($vals['privilege'])) {
                $this->privilege = $vals['privilege'];
            }
            if (isset($vals['recommended'])) {
                $this->recommended = $vals['recommended'];
            }
        }
    }

    public function getName()
    {
        return 'BusinessNotebook';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->notebookDescription);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->privilege);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->recommended);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('BusinessNotebook');
        if ($this->notebookDescription !== null) {
            $xfer += $output->writeFieldBegin('notebookDescription', TType::STRING, 1);
            $xfer += $output->writeString($this->notebookDescription);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->privilege !== null) {
            $xfer += $output->writeFieldBegin('privilege', TType::I32, 2);
            $xfer += $output->writeI32($this->privilege);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->recommended !== null) {
            $xfer += $output->writeFieldBegin('recommended', TType::BOOL, 3);
            $xfer += $output->writeBool($this->recommended);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
