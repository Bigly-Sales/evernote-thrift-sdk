<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * An object that represents the relationship between a Contact that possibly
 * belongs to an Evernote User.
 * 
 * <dl>
 *  <dt>id</dt>
 *  <dd>The unique identifier for this mapping.
 *  </dd>
 * 
 *  <dt>contact<dt>
 *  <dd>The Contact that can be used to address this Identity. May be unset.
 *  </dd>
 * 
 *  <dt>userId</dt>
 *  <dd>The Evernote User id that is connected to the Contact. May be unset
 *      if this identity has not yet been claimed, or the caller is not
 *      connected to this identity.
 *  </dd>
 * 
 *  <dt>deactivated</dt>
 *  <dd>Indicates that the contact for this identity is no longer active and
 *  should not be used when creating new threads using Destination.recipients,
 *  unless you know of another Identity instance with the same contact information
 *  that is active.  If you are connected to the user (see userConnected), you
 *  can still create threads using their Evernote-type contact.</dd>
 * 
 *  <dt>sameBusiness</dt>
 *  <dd>Does this Identity belong to someone who is in the same business as the
 *      caller?
 *  </dd>
 * 
 *  <dt>blocked</dt>
 *  <dd>Has the caller blocked the Evernote user this Identity represents?
 *  </dd>
 * 
 *  <dt>userConnected</dt>
 *  <dd>Indicates that the caller is "connected" to the user of this
 *  identity via this identity.  When you have a connection via an
 *  identity, you should always create new threads using the
 *  Evernote-type contact (see ContactType) using the userId field
 *  from a connected Identity.  On the Evernote service, the
 *  Evernote-type contact is the most durable. Phone numbers and
 *  e-mail addresses can get re-assigned but your Evernote account
 *  user ID will remain the same.  A connection exists when both of
 *  you are in the same business or the user has replied to a thread
 *  that you are on.  When connected, you will also get to see more
 *  information about the user who has claimed the identity.  Note
 *  that you are never connected to yourself since you won't be
 *  sending messages to yourself, but you will obviously see your own
 *  profile information.
 *  </dd>
 * 
 *  <dt>eventId</dt>
 *  <dd>A server-assigned sequence number for the events in the messages
 *  subsystem.
 *  </dd>
 * </dl>
 */
class Identity
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => true,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'contact',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\Contact',
        ),
        3 => array(
            'var' => 'userId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'deactivated',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'sameBusiness',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        6 => array(
            'var' => 'blocked',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'userConnected',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'eventId',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var int
     */
    public $id = null;
    /**
     * @var \EDAM\Types\Contact
     */
    public $contact = null;
    /**
     * @var int
     */
    public $userId = null;
    /**
     * @var bool
     */
    public $deactivated = null;
    /**
     * @var bool
     */
    public $sameBusiness = null;
    /**
     * @var bool
     */
    public $blocked = null;
    /**
     * @var bool
     */
    public $userConnected = null;
    /**
     * @var int
     */
    public $eventId = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['contact'])) {
                $this->contact = $vals['contact'];
            }
            if (isset($vals['userId'])) {
                $this->userId = $vals['userId'];
            }
            if (isset($vals['deactivated'])) {
                $this->deactivated = $vals['deactivated'];
            }
            if (isset($vals['sameBusiness'])) {
                $this->sameBusiness = $vals['sameBusiness'];
            }
            if (isset($vals['blocked'])) {
                $this->blocked = $vals['blocked'];
            }
            if (isset($vals['userConnected'])) {
                $this->userConnected = $vals['userConnected'];
            }
            if (isset($vals['eventId'])) {
                $this->eventId = $vals['eventId'];
            }
        }
    }

    public function getName()
    {
        return 'Identity';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->contact = new \EDAM\Types\Contact();
                        $xfer += $this->contact->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->userId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->deactivated);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->sameBusiness);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->blocked);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->userConnected);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->eventId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Identity');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::I64, 1);
            $xfer += $output->writeI64($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->contact !== null) {
            if (!is_object($this->contact)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('contact', TType::STRUCT, 2);
            $xfer += $this->contact->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userId !== null) {
            $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
            $xfer += $output->writeI32($this->userId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->deactivated !== null) {
            $xfer += $output->writeFieldBegin('deactivated', TType::BOOL, 4);
            $xfer += $output->writeBool($this->deactivated);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sameBusiness !== null) {
            $xfer += $output->writeFieldBegin('sameBusiness', TType::BOOL, 5);
            $xfer += $output->writeBool($this->sameBusiness);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->blocked !== null) {
            $xfer += $output->writeFieldBegin('blocked', TType::BOOL, 6);
            $xfer += $output->writeBool($this->blocked);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userConnected !== null) {
            $xfer += $output->writeFieldBegin('userConnected', TType::BOOL, 7);
            $xfer += $output->writeBool($this->userConnected);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->eventId !== null) {
            $xfer += $output->writeFieldBegin('eventId', TType::I64, 8);
            $xfer += $output->writeI64($this->eventId);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
