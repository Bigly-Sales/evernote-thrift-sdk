<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * This structure is used to provide information about an Evernote Business
 * membership, for members who are part of a business.
 * 
 * <dl>
 * <dt>businessId</dt>
 *   <dd>The ID of the Evernote Business account that the user is a member of.
 * <dt>businessName</dt>
 *   <dd>The human-readable name of the Evernote Business account that the user
 *       is a member of.</dd>
 * <dt>role</dt>
 *   <dd>The role of the user within the Evernote Business account that
 *       they are a member of.</dd>
 * <dt>email</dt>
 *   <dd>An e-mail address that will be used by the service in the context of your
 *       Evernote Business activities.  For example, this e-mail address will be used
 *       when you e-mail a business note, when you update notes in the account of
 *       your business, etc.  The business e-mail cannot be used for identification
 *       purposes such as for logging into the service.
 *   </dd>
 * <dt>updated</dt>
 *   <dd>Last time the business user or business user attributes were updated.</dd>
 * </dl>
 */
class BusinessUserInfo
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'businessId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'businessName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'role',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\Types\BusinessUserRole',
        ),
        4 => array(
            'var' => 'email',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'updated',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var int
     */
    public $businessId = null;
    /**
     * @var string
     */
    public $businessName = null;
    /**
     * @var int
     */
    public $role = null;
    /**
     * @var string
     */
    public $email = null;
    /**
     * @var int
     */
    public $updated = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['businessId'])) {
                $this->businessId = $vals['businessId'];
            }
            if (isset($vals['businessName'])) {
                $this->businessName = $vals['businessName'];
            }
            if (isset($vals['role'])) {
                $this->role = $vals['role'];
            }
            if (isset($vals['email'])) {
                $this->email = $vals['email'];
            }
            if (isset($vals['updated'])) {
                $this->updated = $vals['updated'];
            }
        }
    }

    public function getName()
    {
        return 'BusinessUserInfo';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->businessId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->businessName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->role);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->email);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->updated);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('BusinessUserInfo');
        if ($this->businessId !== null) {
            $xfer += $output->writeFieldBegin('businessId', TType::I32, 1);
            $xfer += $output->writeI32($this->businessId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->businessName !== null) {
            $xfer += $output->writeFieldBegin('businessName', TType::STRING, 2);
            $xfer += $output->writeString($this->businessName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->role !== null) {
            $xfer += $output->writeFieldBegin('role', TType::I32, 3);
            $xfer += $output->writeI32($this->role);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->email !== null) {
            $xfer += $output->writeFieldBegin('email', TType::STRING, 4);
            $xfer += $output->writeString($this->email);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->updated !== null) {
            $xfer += $output->writeFieldBegin('updated', TType::I64, 5);
            $xfer += $output->writeI64($this->updated);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
