<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * A structure describing an invitation to join a business account.
 * 
 * <dl>
 *   <dt>businessId</dt>
 *     <dd>
 *       The ID of the business to which the invitation grants access.
 *     </dd>
 * 
 *   <dt>email</dt>
 *     <dd>
 *       The email address that was invited to join the business.
 *     </dd>
 * 
 *   <dt>role</dt>
 *     <dd>
 *       The role to grant the user after the invitation is accepted.
 *     </dd>
 * 
 *   <dt>status</dt>
 *     <dd>
 *       The status of the invitation.
 *     </dd>
 * 
 *   <dt>requesterId</dt>
 *     <dd>
 *       For invitations that were initially requested by a non-admin member of the business,
 *       this field specifies the user ID of the requestor. For all other invitations, this field
 *       will be unset.
 *     </dd>
 *   <dt>fromWorkChat</dt>
 *     <dd>
 *       If this invitation was created implicitly via a WorkChat, this field
 *       will be true.
 *     </dd>
 *   <dt>created</dt>
 *     <dd>
 *       The timestamp at which this invitation was created.
 *     </dd>
 *   <dt>mostRecentReminder</dt>
 *     <dd>
 *       The timestamp at which the most recent reminder was sent.
 *     </dd>
 * </dl>
 */
class BusinessInvitation
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'businessId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'email',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'role',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\Types\BusinessUserRole',
        ),
        4 => array(
            'var' => 'status',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\Types\BusinessInvitationStatus',
        ),
        5 => array(
            'var' => 'requesterId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'fromWorkChat',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'created',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        8 => array(
            'var' => 'mostRecentReminder',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var int
     */
    public $businessId = null;
    /**
     * @var string
     */
    public $email = null;
    /**
     * @var int
     */
    public $role = null;
    /**
     * @var int
     */
    public $status = null;
    /**
     * @var int
     */
    public $requesterId = null;
    /**
     * @var bool
     */
    public $fromWorkChat = null;
    /**
     * @var int
     */
    public $created = null;
    /**
     * @var int
     */
    public $mostRecentReminder = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['businessId'])) {
                $this->businessId = $vals['businessId'];
            }
            if (isset($vals['email'])) {
                $this->email = $vals['email'];
            }
            if (isset($vals['role'])) {
                $this->role = $vals['role'];
            }
            if (isset($vals['status'])) {
                $this->status = $vals['status'];
            }
            if (isset($vals['requesterId'])) {
                $this->requesterId = $vals['requesterId'];
            }
            if (isset($vals['fromWorkChat'])) {
                $this->fromWorkChat = $vals['fromWorkChat'];
            }
            if (isset($vals['created'])) {
                $this->created = $vals['created'];
            }
            if (isset($vals['mostRecentReminder'])) {
                $this->mostRecentReminder = $vals['mostRecentReminder'];
            }
        }
    }

    public function getName()
    {
        return 'BusinessInvitation';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->businessId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->email);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->role);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->status);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->requesterId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->fromWorkChat);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->created);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->mostRecentReminder);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('BusinessInvitation');
        if ($this->businessId !== null) {
            $xfer += $output->writeFieldBegin('businessId', TType::I32, 1);
            $xfer += $output->writeI32($this->businessId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->email !== null) {
            $xfer += $output->writeFieldBegin('email', TType::STRING, 2);
            $xfer += $output->writeString($this->email);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->role !== null) {
            $xfer += $output->writeFieldBegin('role', TType::I32, 3);
            $xfer += $output->writeI32($this->role);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->status !== null) {
            $xfer += $output->writeFieldBegin('status', TType::I32, 4);
            $xfer += $output->writeI32($this->status);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->requesterId !== null) {
            $xfer += $output->writeFieldBegin('requesterId', TType::I32, 5);
            $xfer += $output->writeI32($this->requesterId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->fromWorkChat !== null) {
            $xfer += $output->writeFieldBegin('fromWorkChat', TType::BOOL, 6);
            $xfer += $output->writeBool($this->fromWorkChat);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->created !== null) {
            $xfer += $output->writeFieldBegin('created', TType::I64, 7);
            $xfer += $output->writeI64($this->created);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mostRecentReminder !== null) {
            $xfer += $output->writeFieldBegin('mostRecentReminder', TType::I64, 8);
            $xfer += $output->writeI64($this->mostRecentReminder);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
