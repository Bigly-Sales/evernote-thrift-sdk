<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Structure holding the optional attributes of a Resource
 * <dl>
 * <dt>sourceURL</dt>
 *   <dd>the original location where the resource was hosted
 *   <br/>
 *    Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
 *   </dd>
 * 
 * <dt>timestamp</dt>
 *   <dd>the date and time that is associated with this resource
 *   (e.g. the time embedded in an image from a digital camera with a clock)
 *   </dd>
 * 
 * <dt>latitude</dt>
 *   <dd>the latitude where the resource was captured
 *   </dd>
 * 
 * <dt>longitude</dt>
 *   <dd>the longitude where the resource was captured
 *   </dd>
 * 
 * <dt>altitude</dt>
 *   <dd>the altitude where the resource was captured
 *   </dd>
 * 
 * <dt>cameraMake</dt>
 *   <dd>information about an image's camera, e.g. as embedded in
 *   the image's EXIF data
 *   <br/>
 *   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
 *   </dd>
 * 
 * <dt>cameraModel</dt>
 *   <dd>information about an image's camera, e.g. as embedded
 *   in the image's EXIF data
 *   <br/>
 *   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
 *   </dd>
 * 
 * <dt>clientWillIndex</dt>
 *   <dd>if true, then the original client that submitted
 *   the resource plans to submit the recognition index for this resource at a
 *   later time.
 *   </dd>
 * 
 * <dt>recoType</dt>
 *   <dd>DEPRECATED - this field is no longer set by the service, so should
 *     be ignored.
 *   </dd>
 * 
 * <dt>fileName</dt>
 *   <dd>if the resource came from a source that provided an
 *   explicit file name, the original name will be stored here.  Many resources
 *   come from unnamed sources, so this will not always be set.
 *   </dd>
 * 
 * <dt>attachment</dt>
 *   <dd>this will be true if the resource should be displayed as an attachment,
 *   or false if the resource should be displayed inline (if possible).
 *   </dd>
 * 
 * <dt>applicationData</dt>
 * <dd>Provides a location for applications to store a relatively small
 * (4kb) blob of data associated with a Resource that is not visible to the user
 * and that is opaque to the Evernote service. A single application may use at most
 * one entry in this map, using its API consumer key as the map key. See the
 * documentation for LazyMap for a description of when the actual map values
 * are returned by the service.
 * <p>To safely add or modify your application's entry in the map, use
 * NoteStore.setResourceApplicationDataEntry. To safely remove your application's
 * entry from the map, use NoteStore.unsetResourceApplicationDataEntry.</p>
 * Minimum length of a name (key): EDAM_APPLICATIONDATA_NAME_LEN_MIN
 * <br/>
 * Sum max size of key and value: EDAM_APPLICATIONDATA_ENTRY_LEN_MAX
 * <br/>
 * Syntax regex for name (key): EDAM_APPLICATIONDATA_NAME_REGEX
 * </dd>
 * 
 * </dl>
 */
class ResourceAttributes
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'sourceURL',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'timestamp',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'latitude',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        4 => array(
            'var' => 'longitude',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        5 => array(
            'var' => 'altitude',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        6 => array(
            'var' => 'cameraMake',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'cameraModel',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'clientWillIndex',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        9 => array(
            'var' => 'recoType',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'fileName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'attachment',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        12 => array(
            'var' => 'applicationData',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\LazyMap',
        ),
    );

    /**
     * @var string
     */
    public $sourceURL = null;
    /**
     * @var int
     */
    public $timestamp = null;
    /**
     * @var double
     */
    public $latitude = null;
    /**
     * @var double
     */
    public $longitude = null;
    /**
     * @var double
     */
    public $altitude = null;
    /**
     * @var string
     */
    public $cameraMake = null;
    /**
     * @var string
     */
    public $cameraModel = null;
    /**
     * @var bool
     */
    public $clientWillIndex = null;
    /**
     * @var string
     */
    public $recoType = null;
    /**
     * @var string
     */
    public $fileName = null;
    /**
     * @var bool
     */
    public $attachment = null;
    /**
     * @var \EDAM\Types\LazyMap
     */
    public $applicationData = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['sourceURL'])) {
                $this->sourceURL = $vals['sourceURL'];
            }
            if (isset($vals['timestamp'])) {
                $this->timestamp = $vals['timestamp'];
            }
            if (isset($vals['latitude'])) {
                $this->latitude = $vals['latitude'];
            }
            if (isset($vals['longitude'])) {
                $this->longitude = $vals['longitude'];
            }
            if (isset($vals['altitude'])) {
                $this->altitude = $vals['altitude'];
            }
            if (isset($vals['cameraMake'])) {
                $this->cameraMake = $vals['cameraMake'];
            }
            if (isset($vals['cameraModel'])) {
                $this->cameraModel = $vals['cameraModel'];
            }
            if (isset($vals['clientWillIndex'])) {
                $this->clientWillIndex = $vals['clientWillIndex'];
            }
            if (isset($vals['recoType'])) {
                $this->recoType = $vals['recoType'];
            }
            if (isset($vals['fileName'])) {
                $this->fileName = $vals['fileName'];
            }
            if (isset($vals['attachment'])) {
                $this->attachment = $vals['attachment'];
            }
            if (isset($vals['applicationData'])) {
                $this->applicationData = $vals['applicationData'];
            }
        }
    }

    public function getName()
    {
        return 'ResourceAttributes';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->sourceURL);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->timestamp);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->latitude);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->longitude);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->altitude);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cameraMake);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cameraModel);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->clientWillIndex);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->recoType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->fileName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->attachment);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRUCT) {
                        $this->applicationData = new \EDAM\Types\LazyMap();
                        $xfer += $this->applicationData->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ResourceAttributes');
        if ($this->sourceURL !== null) {
            $xfer += $output->writeFieldBegin('sourceURL', TType::STRING, 1);
            $xfer += $output->writeString($this->sourceURL);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timestamp !== null) {
            $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
            $xfer += $output->writeI64($this->timestamp);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->latitude !== null) {
            $xfer += $output->writeFieldBegin('latitude', TType::DOUBLE, 3);
            $xfer += $output->writeDouble($this->latitude);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->longitude !== null) {
            $xfer += $output->writeFieldBegin('longitude', TType::DOUBLE, 4);
            $xfer += $output->writeDouble($this->longitude);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->altitude !== null) {
            $xfer += $output->writeFieldBegin('altitude', TType::DOUBLE, 5);
            $xfer += $output->writeDouble($this->altitude);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cameraMake !== null) {
            $xfer += $output->writeFieldBegin('cameraMake', TType::STRING, 6);
            $xfer += $output->writeString($this->cameraMake);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cameraModel !== null) {
            $xfer += $output->writeFieldBegin('cameraModel', TType::STRING, 7);
            $xfer += $output->writeString($this->cameraModel);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->clientWillIndex !== null) {
            $xfer += $output->writeFieldBegin('clientWillIndex', TType::BOOL, 8);
            $xfer += $output->writeBool($this->clientWillIndex);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->recoType !== null) {
            $xfer += $output->writeFieldBegin('recoType', TType::STRING, 9);
            $xfer += $output->writeString($this->recoType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->fileName !== null) {
            $xfer += $output->writeFieldBegin('fileName', TType::STRING, 10);
            $xfer += $output->writeString($this->fileName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->attachment !== null) {
            $xfer += $output->writeFieldBegin('attachment', TType::BOOL, 11);
            $xfer += $output->writeBool($this->attachment);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->applicationData !== null) {
            if (!is_object($this->applicationData)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('applicationData', TType::STRUCT, 12);
            $xfer += $this->applicationData->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
