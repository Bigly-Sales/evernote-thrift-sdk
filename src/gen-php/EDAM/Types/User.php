<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 *  This represents the information about a single user account.
 * <dl>
 *  <dt>id</dt>
 *    <dd>The unique numeric identifier for the account, which will not
 *    change for the lifetime of the account.
 *    </dd>
 * 
 *  <dt>username</dt>
 *    <dd>The name that uniquely identifies a single user account. This name
 *    may be presented by the user, along with their password, to log into
 *    their account.
 *    May only contain a-z, 0-9, or '-', and may not start or end with the '-'
 *    <br/>
 *    Length:  EDAM_USER_USERNAME_LEN_MIN - EDAM_USER_USERNAME_LEN_MAX
 *    <br/>
 *    Regex:  EDAM_USER_USERNAME_REGEX
 *    </dd>
 * 
 *  <dt>email</dt>
 *    <dd>The email address registered for the user.  Must comply with
 *    RFC 2821 and RFC 2822.<br/>
 *    Third party applications that authenticate using OAuth do not have
 *    access to this field.
 *    Length:  EDAM_EMAIL_LEN_MIN - EDAM_EMAIL_LEN_MAX
 *    <br/>
 *    Regex:  EDAM_EMAIL_REGEX
 *    </dd>
 * 
 *  <dt>name</dt>
 *    <dd>The printable name of the user, which may be a combination
 *    of given and family names.  This is used instead of separate "first"
 *    and "last" names due to variations in international name format/order.
 *    May not start or end with a whitespace character.  May contain any
 *    character but carriage return or newline (Unicode classes Zl and Zp).
 *    <br/>
 *    Length:  EDAM_USER_NAME_LEN_MIN - EDAM_USER_NAME_LEN_MAX
 *    <br/>
 *    Regex:  EDAM_USER_NAME_REGEX
 *    </dd>
 * 
 *  <dt>timezone</dt>
 *    <dd>The zone ID for the user's default location.  If present,
 *    this may be used to localize the display of any timestamp for which no
 *    other timezone is available.
 *    The format must be encoded as a standard zone ID such as
 *    "America/Los_Angeles" or "GMT+08:00"
 *    <br/>
 *    Length:  EDAM_TIMEZONE_LEN_MIN - EDAM_TIMEZONE_LEN_MAX
 *    <br/>
 *    Regex:  EDAM_TIMEZONE_REGEX
 *    </dd>
 * 
 *  <dt>serviceLevel</dt>
 *    <dd>The level of service the user currently receives. This will always be populated
 *        for users retrieved from the Evernote service.
 *    </dd>
 * 
 *  <dt>created</dt>
 *    <dd>The date and time when this user account was created in the
 *    service.
 *    </dd>
 * 
 *  <dt>updated</dt>
 *    <dd>The date and time when this user account was last modified
 *    in the service.
 *    </dd>
 * 
 *  <dt>deleted</dt>
 *    <dd>If the account has been deleted from the system (e.g. as
 *    the result of a legal request by the user), the date and time of the
 *    deletion will be represented here.  If not, this value will not be set.
 *    </dd>
 * 
 *  <dt>active</dt>
 *    <dd>If the user account is available for login and
 *    synchronization, this flag will be set to true.
 *    </dd>
 * 
 *  <dt>shardId</dt>
 *    <dd>DEPRECATED - Client applications should have no need to use this field.
 *    </dd>
 * 
 *  <dt>attributes</dt>
 *    <dd>If present, this will contain a list of the attributes
 *    for this user account.
 *    </dd>
 * 
 *  <dt>accounting</dt>
 *    <dd>Bookkeeping information for the user's subscription.
 *    </dd>
 * 
 *  <dt>businessUserInfo</dt>
 *    <dd>If present, this will contain a set of business information
 *    relating to the user's business membership.  If not present, the
 *    user is not currently part of a business.
 *    </dd>
 * 
 *  <dt>photoUrl</dt>
 *    <dd>The URL of the photo that represents this User. This field is filled in by the
 *    service and is read-only to clients. If <code>photoLastUpdated</code> is
 *    not set, this url will point to a placeholder user photo generated by the
 *    service.</dd>
 * 
 *  <dt>photoLastUpdated</dt>
 *    <dd>The time at which the photo at 'photoUrl' was last updated by this User. This
 *    field will be null if the User never set a profile photo. This field is filled in by
 *    the service and is read-only to clients.</dd>
 * 
 *  <dt>accountLimits</dt>
 *    <dd>Account limits applicable for this user.</dd>
 */
class User
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'username',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'email',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'timezone',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'privilege',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\Types\PrivilegeLevel',
        ),
        21 => array(
            'var' => 'serviceLevel',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\Types\ServiceLevel',
        ),
        9 => array(
            'var' => 'created',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        10 => array(
            'var' => 'updated',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        11 => array(
            'var' => 'deleted',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        13 => array(
            'var' => 'active',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        14 => array(
            'var' => 'shardId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'attributes',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\UserAttributes',
        ),
        16 => array(
            'var' => 'accounting',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\Accounting',
        ),
        18 => array(
            'var' => 'businessUserInfo',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\BusinessUserInfo',
        ),
        19 => array(
            'var' => 'photoUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        20 => array(
            'var' => 'photoLastUpdated',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        22 => array(
            'var' => 'accountLimits',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\AccountLimits',
        ),
    );

    /**
     * @var int
     */
    public $id = null;
    /**
     * @var string
     */
    public $username = null;
    /**
     * @var string
     */
    public $email = null;
    /**
     * @var string
     */
    public $name = null;
    /**
     * @var string
     */
    public $timezone = null;
    /**
     * @var int
     */
    public $privilege = null;
    /**
     * @var int
     */
    public $serviceLevel = null;
    /**
     * @var int
     */
    public $created = null;
    /**
     * @var int
     */
    public $updated = null;
    /**
     * @var int
     */
    public $deleted = null;
    /**
     * @var bool
     */
    public $active = null;
    /**
     * @var string
     */
    public $shardId = null;
    /**
     * @var \EDAM\Types\UserAttributes
     */
    public $attributes = null;
    /**
     * @var \EDAM\Types\Accounting
     */
    public $accounting = null;
    /**
     * @var \EDAM\Types\BusinessUserInfo
     */
    public $businessUserInfo = null;
    /**
     * @var string
     */
    public $photoUrl = null;
    /**
     * @var int
     */
    public $photoLastUpdated = null;
    /**
     * @var \EDAM\Types\AccountLimits
     */
    public $accountLimits = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['username'])) {
                $this->username = $vals['username'];
            }
            if (isset($vals['email'])) {
                $this->email = $vals['email'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['timezone'])) {
                $this->timezone = $vals['timezone'];
            }
            if (isset($vals['privilege'])) {
                $this->privilege = $vals['privilege'];
            }
            if (isset($vals['serviceLevel'])) {
                $this->serviceLevel = $vals['serviceLevel'];
            }
            if (isset($vals['created'])) {
                $this->created = $vals['created'];
            }
            if (isset($vals['updated'])) {
                $this->updated = $vals['updated'];
            }
            if (isset($vals['deleted'])) {
                $this->deleted = $vals['deleted'];
            }
            if (isset($vals['active'])) {
                $this->active = $vals['active'];
            }
            if (isset($vals['shardId'])) {
                $this->shardId = $vals['shardId'];
            }
            if (isset($vals['attributes'])) {
                $this->attributes = $vals['attributes'];
            }
            if (isset($vals['accounting'])) {
                $this->accounting = $vals['accounting'];
            }
            if (isset($vals['businessUserInfo'])) {
                $this->businessUserInfo = $vals['businessUserInfo'];
            }
            if (isset($vals['photoUrl'])) {
                $this->photoUrl = $vals['photoUrl'];
            }
            if (isset($vals['photoLastUpdated'])) {
                $this->photoLastUpdated = $vals['photoLastUpdated'];
            }
            if (isset($vals['accountLimits'])) {
                $this->accountLimits = $vals['accountLimits'];
            }
        }
    }

    public function getName()
    {
        return 'User';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->username);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->email);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->timezone);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->privilege);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->serviceLevel);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->created);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->updated);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->deleted);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->active);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->shardId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRUCT) {
                        $this->attributes = new \EDAM\Types\UserAttributes();
                        $xfer += $this->attributes->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::STRUCT) {
                        $this->accounting = new \EDAM\Types\Accounting();
                        $xfer += $this->accounting->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::STRUCT) {
                        $this->businessUserInfo = new \EDAM\Types\BusinessUserInfo();
                        $xfer += $this->businessUserInfo->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->photoUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->photoLastUpdated);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::STRUCT) {
                        $this->accountLimits = new \EDAM\Types\AccountLimits();
                        $xfer += $this->accountLimits->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('User');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::I32, 1);
            $xfer += $output->writeI32($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->username !== null) {
            $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
            $xfer += $output->writeString($this->username);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->email !== null) {
            $xfer += $output->writeFieldBegin('email', TType::STRING, 3);
            $xfer += $output->writeString($this->email);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timezone !== null) {
            $xfer += $output->writeFieldBegin('timezone', TType::STRING, 6);
            $xfer += $output->writeString($this->timezone);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->privilege !== null) {
            $xfer += $output->writeFieldBegin('privilege', TType::I32, 7);
            $xfer += $output->writeI32($this->privilege);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->created !== null) {
            $xfer += $output->writeFieldBegin('created', TType::I64, 9);
            $xfer += $output->writeI64($this->created);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->updated !== null) {
            $xfer += $output->writeFieldBegin('updated', TType::I64, 10);
            $xfer += $output->writeI64($this->updated);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->deleted !== null) {
            $xfer += $output->writeFieldBegin('deleted', TType::I64, 11);
            $xfer += $output->writeI64($this->deleted);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->active !== null) {
            $xfer += $output->writeFieldBegin('active', TType::BOOL, 13);
            $xfer += $output->writeBool($this->active);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->shardId !== null) {
            $xfer += $output->writeFieldBegin('shardId', TType::STRING, 14);
            $xfer += $output->writeString($this->shardId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->attributes !== null) {
            if (!is_object($this->attributes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 15);
            $xfer += $this->attributes->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->accounting !== null) {
            if (!is_object($this->accounting)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('accounting', TType::STRUCT, 16);
            $xfer += $this->accounting->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->businessUserInfo !== null) {
            if (!is_object($this->businessUserInfo)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('businessUserInfo', TType::STRUCT, 18);
            $xfer += $this->businessUserInfo->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->photoUrl !== null) {
            $xfer += $output->writeFieldBegin('photoUrl', TType::STRING, 19);
            $xfer += $output->writeString($this->photoUrl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->photoLastUpdated !== null) {
            $xfer += $output->writeFieldBegin('photoLastUpdated', TType::I64, 20);
            $xfer += $output->writeI64($this->photoLastUpdated);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->serviceLevel !== null) {
            $xfer += $output->writeFieldBegin('serviceLevel', TType::I32, 21);
            $xfer += $output->writeI32($this->serviceLevel);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->accountLimits !== null) {
            if (!is_object($this->accountLimits)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('accountLimits', TType::STRUCT, 22);
            $xfer += $this->accountLimits->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
