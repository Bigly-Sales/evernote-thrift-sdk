<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * A structure identifying one snippet of related content (some information that is not
 * part of an Evernote account but might still be relevant to the user).
 * 
 * <dl>
 * 
 * <dt>contentId</dt>
 * <dd>An identifier that uniquely identifies the content.</dd>
 * 
 * <dt>title</dt>
 * <dd>The main title to show.</dd>
 * 
 * <dt>url</dt>
 * <dd>The URL the client can use to retrieve the content.</dd>
 * 
 * <dt>sourceId</dt>
 * <dd>An identifier that uniquely identifies the source.</dd>
 * 
 * <dt>sourceUrl</dt>
 * <dd>A URL the client can access to know more about the source.</dd>
 * 
 * <dt>sourceFaviconUrl</dt>
 * <dd>The favicon URL of the source which the content belongs to.</dd>
 * </dl>
 * 
 * <dt>sourceName</dt>
 * <dd>A human-readable name of the source that provided this content.</dd>
 * 
 * <dt>date</dt>
 * <dd>A timestamp telling the user about the recency of the content.</dd>
 * 
 * <dt>teaser</dt>
 * <dd>A teaser text to show to the user; usually the first few sentences of the content,
 *     excluding the title.</dd>
 * 
 * <dt>thumbnails</dt>
 * <dd>A list of thumbnails the client can show in the snippet.</dd>
 * 
 * <dt>contentType</dt>
 * <dd>The type of this related content.</dd>
 * 
 * <dt>accessType</dt>
 * <dd>An indication of how this content can be accessed. This type influences the
 *     semantics of the <code>url</code> parameter.</dd>
 * 
 * <dt>visibleUrl</dt>
 * <dd>If set, the client should show this URL to the user, instead of the URL that was
 *     used to retrieve the content. This URL should be used when opening the content
 *     in an external browser window, or when sharing with another person.</dd>
 * 
 * <dt>clipUrl</dt>
 * <dd>If set, the client should use this URL for clipping purposes, instead of the URL
 *     that was used to retrieve the content. The clipUrl may directly point to an .enex
 *     file, for example.</dd>
 * 
 * <dt>contact</dt>
 * <dd>If set, the client may use this Contact for messaging purposes. This will typically
 *     only be set for user profiles.</dd>
 * 
 * <dt>authors</dt>
 * <dd>For News articles only. A list of names of the article authors, if available.</dd>
 * 
 * </dl>
 */
class RelatedContent
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'contentId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'title',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'url',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'sourceId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'sourceUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'sourceFaviconUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'sourceName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'date',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        9 => array(
            'var' => 'teaser',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'thumbnails',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EDAM\Types\RelatedContentImage',
                ),
        ),
        11 => array(
            'var' => 'contentType',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\Types\RelatedContentType',
        ),
        12 => array(
            'var' => 'accessType',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\Types\RelatedContentAccess',
        ),
        13 => array(
            'var' => 'visibleUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'clipUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'contact',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\Contact',
        ),
        16 => array(
            'var' => 'authors',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $contentId = null;
    /**
     * @var string
     */
    public $title = null;
    /**
     * @var string
     */
    public $url = null;
    /**
     * @var string
     */
    public $sourceId = null;
    /**
     * @var string
     */
    public $sourceUrl = null;
    /**
     * @var string
     */
    public $sourceFaviconUrl = null;
    /**
     * @var string
     */
    public $sourceName = null;
    /**
     * @var int
     */
    public $date = null;
    /**
     * @var string
     */
    public $teaser = null;
    /**
     * @var \EDAM\Types\RelatedContentImage[]
     */
    public $thumbnails = null;
    /**
     * @var int
     */
    public $contentType = null;
    /**
     * @var int
     */
    public $accessType = null;
    /**
     * @var string
     */
    public $visibleUrl = null;
    /**
     * @var string
     */
    public $clipUrl = null;
    /**
     * @var \EDAM\Types\Contact
     */
    public $contact = null;
    /**
     * @var string[]
     */
    public $authors = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['contentId'])) {
                $this->contentId = $vals['contentId'];
            }
            if (isset($vals['title'])) {
                $this->title = $vals['title'];
            }
            if (isset($vals['url'])) {
                $this->url = $vals['url'];
            }
            if (isset($vals['sourceId'])) {
                $this->sourceId = $vals['sourceId'];
            }
            if (isset($vals['sourceUrl'])) {
                $this->sourceUrl = $vals['sourceUrl'];
            }
            if (isset($vals['sourceFaviconUrl'])) {
                $this->sourceFaviconUrl = $vals['sourceFaviconUrl'];
            }
            if (isset($vals['sourceName'])) {
                $this->sourceName = $vals['sourceName'];
            }
            if (isset($vals['date'])) {
                $this->date = $vals['date'];
            }
            if (isset($vals['teaser'])) {
                $this->teaser = $vals['teaser'];
            }
            if (isset($vals['thumbnails'])) {
                $this->thumbnails = $vals['thumbnails'];
            }
            if (isset($vals['contentType'])) {
                $this->contentType = $vals['contentType'];
            }
            if (isset($vals['accessType'])) {
                $this->accessType = $vals['accessType'];
            }
            if (isset($vals['visibleUrl'])) {
                $this->visibleUrl = $vals['visibleUrl'];
            }
            if (isset($vals['clipUrl'])) {
                $this->clipUrl = $vals['clipUrl'];
            }
            if (isset($vals['contact'])) {
                $this->contact = $vals['contact'];
            }
            if (isset($vals['authors'])) {
                $this->authors = $vals['authors'];
            }
        }
    }

    public function getName()
    {
        return 'RelatedContent';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->contentId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->title);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->url);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->sourceId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->sourceUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->sourceFaviconUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->sourceName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->date);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->teaser);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::LST) {
                        $this->thumbnails = array();
                        $_size82 = 0;
                        $_etype85 = 0;
                        $xfer += $input->readListBegin($_etype85, $_size82);
                        for ($_i86 = 0; $_i86 < $_size82; ++$_i86) {
                            $elem87 = null;
                            $elem87 = new \EDAM\Types\RelatedContentImage();
                            $xfer += $elem87->read($input);
                            $this->thumbnails []= $elem87;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->contentType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->accessType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->visibleUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->clipUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRUCT) {
                        $this->contact = new \EDAM\Types\Contact();
                        $xfer += $this->contact->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::LST) {
                        $this->authors = array();
                        $_size88 = 0;
                        $_etype91 = 0;
                        $xfer += $input->readListBegin($_etype91, $_size88);
                        for ($_i92 = 0; $_i92 < $_size88; ++$_i92) {
                            $elem93 = null;
                            $xfer += $input->readString($elem93);
                            $this->authors []= $elem93;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('RelatedContent');
        if ($this->contentId !== null) {
            $xfer += $output->writeFieldBegin('contentId', TType::STRING, 1);
            $xfer += $output->writeString($this->contentId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->title !== null) {
            $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
            $xfer += $output->writeString($this->title);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->url !== null) {
            $xfer += $output->writeFieldBegin('url', TType::STRING, 3);
            $xfer += $output->writeString($this->url);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sourceId !== null) {
            $xfer += $output->writeFieldBegin('sourceId', TType::STRING, 4);
            $xfer += $output->writeString($this->sourceId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sourceUrl !== null) {
            $xfer += $output->writeFieldBegin('sourceUrl', TType::STRING, 5);
            $xfer += $output->writeString($this->sourceUrl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sourceFaviconUrl !== null) {
            $xfer += $output->writeFieldBegin('sourceFaviconUrl', TType::STRING, 6);
            $xfer += $output->writeString($this->sourceFaviconUrl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sourceName !== null) {
            $xfer += $output->writeFieldBegin('sourceName', TType::STRING, 7);
            $xfer += $output->writeString($this->sourceName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->date !== null) {
            $xfer += $output->writeFieldBegin('date', TType::I64, 8);
            $xfer += $output->writeI64($this->date);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->teaser !== null) {
            $xfer += $output->writeFieldBegin('teaser', TType::STRING, 9);
            $xfer += $output->writeString($this->teaser);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->thumbnails !== null) {
            if (!is_array($this->thumbnails)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('thumbnails', TType::LST, 10);
            $output->writeListBegin(TType::STRUCT, count($this->thumbnails));
            foreach ($this->thumbnails as $iter94) {
                $xfer += $iter94->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->contentType !== null) {
            $xfer += $output->writeFieldBegin('contentType', TType::I32, 11);
            $xfer += $output->writeI32($this->contentType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->accessType !== null) {
            $xfer += $output->writeFieldBegin('accessType', TType::I32, 12);
            $xfer += $output->writeI32($this->accessType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->visibleUrl !== null) {
            $xfer += $output->writeFieldBegin('visibleUrl', TType::STRING, 13);
            $xfer += $output->writeString($this->visibleUrl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->clipUrl !== null) {
            $xfer += $output->writeFieldBegin('clipUrl', TType::STRING, 14);
            $xfer += $output->writeString($this->clipUrl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->contact !== null) {
            if (!is_object($this->contact)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('contact', TType::STRUCT, 15);
            $xfer += $this->contact->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->authors !== null) {
            if (!is_array($this->authors)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('authors', TType::LST, 16);
            $output->writeListBegin(TType::STRING, count($this->authors));
            foreach ($this->authors as $iter95) {
                $xfer += $output->writeString($iter95);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
