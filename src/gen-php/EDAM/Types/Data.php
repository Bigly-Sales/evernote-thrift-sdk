<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 *  In several places, EDAM exchanges blocks of bytes of data for a component
 *  which may be relatively large.  For example:  the contents of a clipped
 *  HTML note, the bytes of an embedded image, or the recognition XML for
 *  a large image.  This structure is used in the protocol to represent
 *  any of those large blocks of data when they are transmitted or when
 *  they are only referenced their metadata.
 * 
 * <dl>
 *  <dt>bodyHash</dt>
 *    <dd>This field carries a one-way hash of the contents of the
 *    data body, in binary form.  The hash function is MD5<br/>
 *    Length:  EDAM_HASH_LEN (exactly)
 *    </dd>
 * 
 *  <dt>size</dt>
 *    <dd>The length, in bytes, of the data body.
 *    </dd>
 * 
 *  <dt>body</dt>
 *    <dd>This field is set to contain the binary contents of the data
 *    whenever the resource is being transferred.  If only metadata is
 *    being exchanged, this field will be empty.  For example, a client could
 *    notify the service about the change to an attribute for a resource
 *    without transmitting the binary resource contents.
 *    </dd>
 *  </dl>
 */
class Data
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'bodyHash',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'size',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'body',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $bodyHash = null;
    /**
     * @var int
     */
    public $size = null;
    /**
     * @var string
     */
    public $body = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['bodyHash'])) {
                $this->bodyHash = $vals['bodyHash'];
            }
            if (isset($vals['size'])) {
                $this->size = $vals['size'];
            }
            if (isset($vals['body'])) {
                $this->body = $vals['body'];
            }
        }
    }

    public function getName()
    {
        return 'Data';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bodyHash);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->body);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Data');
        if ($this->bodyHash !== null) {
            $xfer += $output->writeFieldBegin('bodyHash', TType::STRING, 1);
            $xfer += $output->writeString($this->bodyHash);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->size !== null) {
            $xfer += $output->writeFieldBegin('size', TType::I32, 2);
            $xfer += $output->writeI32($this->size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->body !== null) {
            $xfer += $output->writeFieldBegin('body', TType::STRING, 3);
            $xfer += $output->writeString($this->body);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
