<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * A unique container for a set of notes.
 * <dl>
 * <dt>guid</dt>
 *   <dd>The unique identifier of this notebook.
 *   <br/>
 *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
 *   <br/>
 *   Regex:  EDAM_GUID_REGEX
 *   </dd>
 * 
 * <dt>name</dt>
 *   <dd>A sequence of characters representing the name of the
 *   notebook.  May be changed by clients, but the account may not contain two
 *   notebooks with names that are equal via a case-insensitive comparison.
 *   Can't begin or end with a space.
 *   <br/>
 *   Length:  EDAM_NOTEBOOK_NAME_LEN_MIN - EDAM_NOTEBOOK_NAME_LEN_MAX
 *   <br/>
 *   Regex:  EDAM_NOTEBOOK_NAME_REGEX
 *   </dd>
 * 
 * <dt>updateSequenceNum</dt>
 *   <dd>A number identifying the last transaction to
 *   modify the state of this object.  The USN values are sequential within an
 *   account, and can be used to compare the order of modifications within the
 *   service.
 *   </dd>
 * 
 * <dt>defaultNotebook</dt>
 *   <dd>If true, this notebook should be used for new notes
 *   whenever the user has not (or cannot) specify a desired target notebook.
 *   For example, if a note is submitted via SMTP email.
 *   The service will maintain at most one defaultNotebook per account.
 *   If a second notebook is created or updated with defaultNotebook set to
 *   true, the service will automatically update the prior notebook's
 *   defaultNotebook field to false.  If the default notebook is deleted
 *   (i.e. "active" set to false), the "defaultNotebook" field will be
 *   set to false by the service.  If the account has no default notebook
 *   set, the service will use the most recent notebook as the default.
 *   </dd>
 * 
 * <dt>serviceCreated</dt>
 *   <dd>The time when this notebook was created on the
 *   service. This will be set on the service during creation, and the service
 *   will provide this value when it returns a Notebook to a client.
 *   The service will ignore this value if it is sent by clients.
 *   </dd>
 * 
 * <dt>serviceUpdated</dt>
 *   <dd>The time when this notebook was last modified on the
 *   service.  This will be set on the service during creation, and the service
 *   will provide this value when it returns a Notebook to a client.
 *   The service will ignore this value if it is sent by clients.
 *   </dd>
 * 
 * <dt>publishing</dt>
 *   <dd>If the Notebook has been opened for public access, then this will point to the set of
 *   publishing information for the Notebook (URI, description, etc.). A Notebook cannot be
 *   published without providing this information, but it will persist for later use if publishing
 *   is ever disabled on the Notebook. Clients that do not wish to change the publishing behavior
 *   of a Notebook should not set this value when calling NoteStore.updateNotebook().
 *   Note that this structure is never populated for business notebooks, see the businessNotebook
 *   field.
 *   </dd>
 * 
 * <dt>published</dt>
 *   <dd>If this is set to true, then the Notebook will be
 *   accessible either to the public, or for business users to their business,
 *   via the 'publishing' or 'businessNotebook' specifications, which must also be set. If this is
 *   set to false, the Notebook will not be available to the public (or business).
 *   Clients that do not wish to change the publishing behavior of a Notebook
 *   should not set this value when calling NoteStore.updateNotebook().
 *   </dd>
 * 
 * <dt>stack</dt>
 *   <dd>If this is set, then the notebook is visually contained within a stack
 *   of notebooks with this name.  All notebooks in the same account with the
 *   same 'stack' field are considered to be in the same stack.
 *   Notebooks with no stack set are "top level" and not contained within a
 *   stack.
 *   </dd>
 * 
 * <dt>sharedNotebookIds</dt>
 *   <dd><i>DEPRECATED</i> - replaced by sharedNotebooks.</dd>
 * 
 * <dt>sharedNotebooks</dt>
 *   <dd>The list of recipients to whom this notebook has been shared
 *   (one SharedNotebook object per recipient email address). This field will
 *   be unset if you do not have permission to access this data. If you are
 *   accessing the notebook as the owner or via a shared notebook that is
 *   modifiable, then you have access to this data and the value will be set.
 *   This field is read-only. Clients may not make changes to shared notebooks
 *   via this field.
 *   </dd>
 * 
 * <dt>businessNotebook</dt>
 *   <dd>If the notebook is part of a business account and has been shared with the entire
 *   business, this will contain sharing information. The presence or absence of this field
 *   is not a reliable test of whether a given notebook is in fact a business notebook - the
 *   field is only used when a notebook is or has been shared with the entire business.
 *   </dd>
 * 
 * <dt>contact</dt>
 *   <dd>Intended for use with Business accounts, this field identifies the user who
 *   has been designated as the "contact".  For notebooks created in business
 *   accounts, the server will automatically set this value to the user who created
 *   the notebook unless Notebook.contact.username has been set, in which that value
 *   will be used.  When updating a notebook, it is common to leave Notebook.contact
 *   field unset, indicating that no change to the value is being requested and that
 *   the existing value, if any, should be preserved.
 *   </dd>
 * 
 * <dt>recipientSettings</dt>
 *   <dd>This represents the preferences/settings that a recipient has set for this
 *   notebook. These are intended to be changed only by the recipient, and each
 *   recipient has their own recipient settings.
 *   </dd>
 * </dl>
 */
class Notebook
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'guid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'updateSequenceNum',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'defaultNotebook',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'serviceCreated',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        8 => array(
            'var' => 'serviceUpdated',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        10 => array(
            'var' => 'publishing',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\Publishing',
        ),
        11 => array(
            'var' => 'published',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        12 => array(
            'var' => 'stack',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        13 => array(
            'var' => 'sharedNotebookIds',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::I64,
            'elem' => array(
                'type' => TType::I64,
                ),
        ),
        14 => array(
            'var' => 'sharedNotebooks',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EDAM\Types\SharedNotebook',
                ),
        ),
        15 => array(
            'var' => 'businessNotebook',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\BusinessNotebook',
        ),
        16 => array(
            'var' => 'contact',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\User',
        ),
        17 => array(
            'var' => 'restrictions',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\NotebookRestrictions',
        ),
        18 => array(
            'var' => 'recipientSettings',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\NotebookRecipientSettings',
        ),
    );

    /**
     * @var string
     */
    public $guid = null;
    /**
     * @var string
     */
    public $name = null;
    /**
     * @var int
     */
    public $updateSequenceNum = null;
    /**
     * @var bool
     */
    public $defaultNotebook = null;
    /**
     * @var int
     */
    public $serviceCreated = null;
    /**
     * @var int
     */
    public $serviceUpdated = null;
    /**
     * @var \EDAM\Types\Publishing
     */
    public $publishing = null;
    /**
     * @var bool
     */
    public $published = null;
    /**
     * @var string
     */
    public $stack = null;
    /**
     * @var int[]
     */
    public $sharedNotebookIds = null;
    /**
     * @var \EDAM\Types\SharedNotebook[]
     */
    public $sharedNotebooks = null;
    /**
     * @var \EDAM\Types\BusinessNotebook
     */
    public $businessNotebook = null;
    /**
     * @var \EDAM\Types\User
     */
    public $contact = null;
    /**
     * @var \EDAM\Types\NotebookRestrictions
     */
    public $restrictions = null;
    /**
     * @var \EDAM\Types\NotebookRecipientSettings
     */
    public $recipientSettings = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['guid'])) {
                $this->guid = $vals['guid'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['updateSequenceNum'])) {
                $this->updateSequenceNum = $vals['updateSequenceNum'];
            }
            if (isset($vals['defaultNotebook'])) {
                $this->defaultNotebook = $vals['defaultNotebook'];
            }
            if (isset($vals['serviceCreated'])) {
                $this->serviceCreated = $vals['serviceCreated'];
            }
            if (isset($vals['serviceUpdated'])) {
                $this->serviceUpdated = $vals['serviceUpdated'];
            }
            if (isset($vals['publishing'])) {
                $this->publishing = $vals['publishing'];
            }
            if (isset($vals['published'])) {
                $this->published = $vals['published'];
            }
            if (isset($vals['stack'])) {
                $this->stack = $vals['stack'];
            }
            if (isset($vals['sharedNotebookIds'])) {
                $this->sharedNotebookIds = $vals['sharedNotebookIds'];
            }
            if (isset($vals['sharedNotebooks'])) {
                $this->sharedNotebooks = $vals['sharedNotebooks'];
            }
            if (isset($vals['businessNotebook'])) {
                $this->businessNotebook = $vals['businessNotebook'];
            }
            if (isset($vals['contact'])) {
                $this->contact = $vals['contact'];
            }
            if (isset($vals['restrictions'])) {
                $this->restrictions = $vals['restrictions'];
            }
            if (isset($vals['recipientSettings'])) {
                $this->recipientSettings = $vals['recipientSettings'];
            }
        }
    }

    public function getName()
    {
        return 'Notebook';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->guid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->updateSequenceNum);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->defaultNotebook);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->serviceCreated);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->serviceUpdated);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRUCT) {
                        $this->publishing = new \EDAM\Types\Publishing();
                        $xfer += $this->publishing->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->published);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->stack);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::LST) {
                        $this->sharedNotebookIds = array();
                        $_size68 = 0;
                        $_etype71 = 0;
                        $xfer += $input->readListBegin($_etype71, $_size68);
                        for ($_i72 = 0; $_i72 < $_size68; ++$_i72) {
                            $elem73 = null;
                            $xfer += $input->readI64($elem73);
                            $this->sharedNotebookIds []= $elem73;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::LST) {
                        $this->sharedNotebooks = array();
                        $_size74 = 0;
                        $_etype77 = 0;
                        $xfer += $input->readListBegin($_etype77, $_size74);
                        for ($_i78 = 0; $_i78 < $_size74; ++$_i78) {
                            $elem79 = null;
                            $elem79 = new \EDAM\Types\SharedNotebook();
                            $xfer += $elem79->read($input);
                            $this->sharedNotebooks []= $elem79;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRUCT) {
                        $this->businessNotebook = new \EDAM\Types\BusinessNotebook();
                        $xfer += $this->businessNotebook->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::STRUCT) {
                        $this->contact = new \EDAM\Types\User();
                        $xfer += $this->contact->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::STRUCT) {
                        $this->restrictions = new \EDAM\Types\NotebookRestrictions();
                        $xfer += $this->restrictions->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::STRUCT) {
                        $this->recipientSettings = new \EDAM\Types\NotebookRecipientSettings();
                        $xfer += $this->recipientSettings->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Notebook');
        if ($this->guid !== null) {
            $xfer += $output->writeFieldBegin('guid', TType::STRING, 1);
            $xfer += $output->writeString($this->guid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->updateSequenceNum !== null) {
            $xfer += $output->writeFieldBegin('updateSequenceNum', TType::I32, 5);
            $xfer += $output->writeI32($this->updateSequenceNum);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->defaultNotebook !== null) {
            $xfer += $output->writeFieldBegin('defaultNotebook', TType::BOOL, 6);
            $xfer += $output->writeBool($this->defaultNotebook);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->serviceCreated !== null) {
            $xfer += $output->writeFieldBegin('serviceCreated', TType::I64, 7);
            $xfer += $output->writeI64($this->serviceCreated);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->serviceUpdated !== null) {
            $xfer += $output->writeFieldBegin('serviceUpdated', TType::I64, 8);
            $xfer += $output->writeI64($this->serviceUpdated);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->publishing !== null) {
            if (!is_object($this->publishing)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('publishing', TType::STRUCT, 10);
            $xfer += $this->publishing->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->published !== null) {
            $xfer += $output->writeFieldBegin('published', TType::BOOL, 11);
            $xfer += $output->writeBool($this->published);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->stack !== null) {
            $xfer += $output->writeFieldBegin('stack', TType::STRING, 12);
            $xfer += $output->writeString($this->stack);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sharedNotebookIds !== null) {
            if (!is_array($this->sharedNotebookIds)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('sharedNotebookIds', TType::LST, 13);
            $output->writeListBegin(TType::I64, count($this->sharedNotebookIds));
            foreach ($this->sharedNotebookIds as $iter80) {
                $xfer += $output->writeI64($iter80);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sharedNotebooks !== null) {
            if (!is_array($this->sharedNotebooks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('sharedNotebooks', TType::LST, 14);
            $output->writeListBegin(TType::STRUCT, count($this->sharedNotebooks));
            foreach ($this->sharedNotebooks as $iter81) {
                $xfer += $iter81->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->businessNotebook !== null) {
            if (!is_object($this->businessNotebook)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('businessNotebook', TType::STRUCT, 15);
            $xfer += $this->businessNotebook->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->contact !== null) {
            if (!is_object($this->contact)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('contact', TType::STRUCT, 16);
            $xfer += $this->contact->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->restrictions !== null) {
            if (!is_object($this->restrictions)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('restrictions', TType::STRUCT, 17);
            $xfer += $this->restrictions->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->recipientSettings !== null) {
            if (!is_object($this->recipientSettings)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('recipientSettings', TType::STRUCT, 18);
            $xfer += $this->recipientSettings->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
