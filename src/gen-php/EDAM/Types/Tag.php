<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 *  A tag within a user's account is a unique name which may be organized
 *  a simple hierarchy.
 * <dl>
 *  <dt>guid</dt>
 *    <dd>The unique identifier of this tag. Will be set by the service,
 *    so may be omitted by the client when creating the Tag.
 *    <br/>
 *    Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
 *    <br/>
 *    Regex:  EDAM_GUID_REGEX
 *    </dd>
 * 
 *  <dt>name</dt>
 *    <dd>A sequence of characters representing the tag's identifier.
 *    Case is preserved, but is ignored for comparisons.
 *    This means that an account may only have one tag with a given name, via
 *    case-insensitive comparison, so an account may not have both "food" and
 *    "Food" tags.
 *    May not contain a comma (','), and may not begin or end with a space.
 *    <br/>
 *    Length:  EDAM_TAG_NAME_LEN_MIN - EDAM_TAG_NAME_LEN_MAX
 *    <br/>
 *    Regex:  EDAM_TAG_NAME_REGEX
 *    </dd>
 * 
 *  <dt>parentGuid</dt>
 *    <dd>If this is set, then this is the GUID of the tag that
 *    holds this tag within the tag organizational hierarchy.  If this is
 *    not set, then the tag has no parent and it is a "top level" tag.
 *    Cycles are not allowed (e.g. a->parent->parent == a) and will be
 *    rejected by the service.
 *    <br/>
 *    Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
 *    <br/>
 *    Regex:  EDAM_GUID_REGEX
 *    </dd>
 * 
 *  <dt>updateSequenceNum</dt>
 *    <dd>A number identifying the last transaction to
 *    modify the state of this object.  The USN values are sequential within an
 *    account, and can be used to compare the order of modifications within the
 *    service.
 *    </dd>
 *  </dl>
 */
class Tag
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'guid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'parentGuid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'updateSequenceNum',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $guid = null;
    /**
     * @var string
     */
    public $name = null;
    /**
     * @var string
     */
    public $parentGuid = null;
    /**
     * @var int
     */
    public $updateSequenceNum = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['guid'])) {
                $this->guid = $vals['guid'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['parentGuid'])) {
                $this->parentGuid = $vals['parentGuid'];
            }
            if (isset($vals['updateSequenceNum'])) {
                $this->updateSequenceNum = $vals['updateSequenceNum'];
            }
        }
    }

    public function getName()
    {
        return 'Tag';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->guid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->parentGuid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->updateSequenceNum);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Tag');
        if ($this->guid !== null) {
            $xfer += $output->writeFieldBegin('guid', TType::STRING, 1);
            $xfer += $output->writeString($this->guid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->parentGuid !== null) {
            $xfer += $output->writeFieldBegin('parentGuid', TType::STRING, 3);
            $xfer += $output->writeString($this->parentGuid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->updateSequenceNum !== null) {
            $xfer += $output->writeFieldBegin('updateSequenceNum', TType::I32, 4);
            $xfer += $output->writeI32($this->updateSequenceNum);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
