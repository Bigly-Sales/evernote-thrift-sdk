<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * If a Notebook has been opened to the public, the Notebook will have a
 * reference to one of these structures, which gives the location and optional
 * description of the externally-visible public Notebook.
 * <dl>
 * <dt>uri</dt>
 *   <dd>If this field is present, then the notebook is published for
 *   mass consumption on the Internet under the provided URI, which is
 *   relative to a defined base publishing URI defined by the service.
 *   This field can only be modified via the web service GUI ... publishing
 *   cannot be modified via an offline client.
 *   <br/>
 *   Length:  EDAM_PUBLISHING_URI_LEN_MIN - EDAM_PUBLISHING_URI_LEN_MAX
 *   <br/>
 *   Regex:  EDAM_PUBLISHING_URI_REGEX
 *   </dd>
 * 
 * <dt>order</dt>
 *   <dd>When the notes are publicly displayed, they will be sorted
 *   based on the requested criteria.
 *   </dd>
 * 
 * <dt>ascending</dt>
 *   <dd>If this is set to true, then the public notes will be
 *   displayed in ascending order (e.g. from oldest to newest).  Otherwise,
 *   the notes will be displayed in descending order (e.g. newest to oldest).
 *   </dd>
 * 
 * <dt>publicDescription</dt>
 *   <dd>This field may be used to provide a short
 *   description of the notebook, which may be displayed when (e.g.) the
 *   notebook is shown in a public view.  Can't begin or end with a space.
 *   <br/>
 *   Length:  EDAM_PUBLISHING_DESCRIPTION_LEN_MIN -
 *            EDAM_PUBLISHING_DESCRIPTION_LEN_MAX
 *   <br/>
 *   Regex:  EDAM_PUBLISHING_DESCRIPTION_REGEX
 *   </dd>
 * 
 * </dl>
 */
class Publishing
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'uri',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'order',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\Types\NoteSortOrder',
        ),
        3 => array(
            'var' => 'ascending',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        4 => array(
            'var' => 'publicDescription',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $uri = null;
    /**
     * @var int
     */
    public $order = null;
    /**
     * @var bool
     */
    public $ascending = null;
    /**
     * @var string
     */
    public $publicDescription = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['uri'])) {
                $this->uri = $vals['uri'];
            }
            if (isset($vals['order'])) {
                $this->order = $vals['order'];
            }
            if (isset($vals['ascending'])) {
                $this->ascending = $vals['ascending'];
            }
            if (isset($vals['publicDescription'])) {
                $this->publicDescription = $vals['publicDescription'];
            }
        }
    }

    public function getName()
    {
        return 'Publishing';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->uri);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->order);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->ascending);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->publicDescription);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Publishing');
        if ($this->uri !== null) {
            $xfer += $output->writeFieldBegin('uri', TType::STRING, 1);
            $xfer += $output->writeString($this->uri);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->order !== null) {
            $xfer += $output->writeFieldBegin('order', TType::I32, 2);
            $xfer += $output->writeI32($this->order);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ascending !== null) {
            $xfer += $output->writeFieldBegin('ascending', TType::BOOL, 3);
            $xfer += $output->writeBool($this->ascending);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->publicDescription !== null) {
            $xfer += $output->writeFieldBegin('publicDescription', TType::STRING, 4);
            $xfer += $output->writeString($this->publicDescription);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
