<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Settings meant for the recipient of a shared notebook, such as
 * for indicating which types of notifications the recipient wishes
 * for reminders, etc.
 * 
 * The reminderNotifyEmail and reminderNotifyInApp fields have a
 * 3-state read value but a 2-state write value.  On read, it is
 * possible to observe "unset", true, or false.  The initial state is
 * "unset".  When you choose to set a value, you may set it to either
 * true or false, but you cannot unset the value.  Once one of these
 * members has a true/false value, it will always have a true/false
 * value.
 * 
 * <dl>
 * <dt>reminderNotifyEmail</dt>
 * <dd>Indicates that the user wishes to receive daily e-mail notifications
 *     for reminders associated with the notebook. This may be true only for
 *     business notebooks that belong to the business of which the user is a
 *     member. You may only set this value on a notebook in your business.</dd>
 * <dt>reminderNotifyInApp</dt>
 * <dd>Indicates that the user wishes to receive notifications for
 *     reminders by applications that support providing such
 *     notifications.  The exact nature of the notification is defined
 *     by the individual applications.</dd>
 * </dl>
 * 
 */
class SharedNotebookRecipientSettings
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'reminderNotifyEmail',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        2 => array(
            'var' => 'reminderNotifyInApp',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var bool
     */
    public $reminderNotifyEmail = null;
    /**
     * @var bool
     */
    public $reminderNotifyInApp = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['reminderNotifyEmail'])) {
                $this->reminderNotifyEmail = $vals['reminderNotifyEmail'];
            }
            if (isset($vals['reminderNotifyInApp'])) {
                $this->reminderNotifyInApp = $vals['reminderNotifyInApp'];
            }
        }
    }

    public function getName()
    {
        return 'SharedNotebookRecipientSettings';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->reminderNotifyEmail);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->reminderNotifyInApp);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('SharedNotebookRecipientSettings');
        if ($this->reminderNotifyEmail !== null) {
            $xfer += $output->writeFieldBegin('reminderNotifyEmail', TType::BOOL, 1);
            $xfer += $output->writeBool($this->reminderNotifyEmail);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->reminderNotifyInApp !== null) {
            $xfer += $output->writeFieldBegin('reminderNotifyInApp', TType::BOOL, 2);
            $xfer += $output->writeBool($this->reminderNotifyInApp);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
