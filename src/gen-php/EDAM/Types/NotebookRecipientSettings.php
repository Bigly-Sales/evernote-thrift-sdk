<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Settings meant for the recipient of a notebook share.
 * 
 * Some of these fields have a 3-state read value but a 2-state write value.
 * On read, it is possible to observe "unset", true, or false. The initial
 * state is "unset". When you choose to set a value, you may set it to either
 * true or false, but you cannot unset the value. Once one of these members
 * has a true/false value, it will always have a true/false value.
 * 
 * <dl>
 * <dt>reminderNotifyEmail</dt>
 * <dd>Indicates that the user wishes to receive daily e-mail notifications
 *     for reminders associated with the notebook. This may be
 *     true only for business notebooks that belong to the business of
 *     which the user is a member. You may only set this value on a
 *     notebook in your business. This value will initially be unset.</dd>
 * <dt>reminderNotifyInApp</dt>
 * <dd>Indicates that the user wishes to receive notifications for
 *     reminders by applications that support providing such
 *     notifications.  The exact nature of the notification is defined
 *     by the individual applications. This value will initially be unset.</dd>
 * </dl>
 * <dt>inMyList</dt>
 * <dd>DEPRECATED: Use recipientStatus instead.
 *     The notebook is on the recipient's notebook list (formerly, we would say
 *     that the recipient has "joined" the notebook)</dd>
 * <dt>recipientStatus</dt>
 * <dd>The notebook is on/off the recipient's notebook list (formerly, we would say
 *     that the recipient has "joined" the notebook) and perhaps also their
 *     default notebook</dd>
 * <dt>stack</dt>
 * <dd>The stack the recipient has put this notebook into. See Notebook.stack
 * for a definition. Every recipient can have their own stack value for the same
 * notebook.</dd>
 * </dl>
 * 
 */
class NotebookRecipientSettings
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'reminderNotifyEmail',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        2 => array(
            'var' => 'reminderNotifyInApp',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        3 => array(
            'var' => 'inMyList',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        4 => array(
            'var' => 'stack',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'recipientStatus',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\Types\RecipientStatus',
        ),
    );

    /**
     * @var bool
     */
    public $reminderNotifyEmail = null;
    /**
     * @var bool
     */
    public $reminderNotifyInApp = null;
    /**
     * @var bool
     */
    public $inMyList = null;
    /**
     * @var string
     */
    public $stack = null;
    /**
     * @var int
     */
    public $recipientStatus = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['reminderNotifyEmail'])) {
                $this->reminderNotifyEmail = $vals['reminderNotifyEmail'];
            }
            if (isset($vals['reminderNotifyInApp'])) {
                $this->reminderNotifyInApp = $vals['reminderNotifyInApp'];
            }
            if (isset($vals['inMyList'])) {
                $this->inMyList = $vals['inMyList'];
            }
            if (isset($vals['stack'])) {
                $this->stack = $vals['stack'];
            }
            if (isset($vals['recipientStatus'])) {
                $this->recipientStatus = $vals['recipientStatus'];
            }
        }
    }

    public function getName()
    {
        return 'NotebookRecipientSettings';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->reminderNotifyEmail);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->reminderNotifyInApp);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->inMyList);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->stack);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->recipientStatus);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('NotebookRecipientSettings');
        if ($this->reminderNotifyEmail !== null) {
            $xfer += $output->writeFieldBegin('reminderNotifyEmail', TType::BOOL, 1);
            $xfer += $output->writeBool($this->reminderNotifyEmail);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->reminderNotifyInApp !== null) {
            $xfer += $output->writeFieldBegin('reminderNotifyInApp', TType::BOOL, 2);
            $xfer += $output->writeBool($this->reminderNotifyInApp);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->inMyList !== null) {
            $xfer += $output->writeFieldBegin('inMyList', TType::BOOL, 3);
            $xfer += $output->writeBool($this->inMyList);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->stack !== null) {
            $xfer += $output->writeFieldBegin('stack', TType::STRING, 4);
            $xfer += $output->writeString($this->stack);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->recipientStatus !== null) {
            $xfer += $output->writeFieldBegin('recipientStatus', TType::I32, 5);
            $xfer += $output->writeI32($this->recipientStatus);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
