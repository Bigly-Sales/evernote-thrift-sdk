<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * A structure that describes a notebook or a user's relationship with
 * a notebook. NotebookDescriptor is expected to remain a lighter-weight
 * structure when compared to Notebook.
 * <dl>
 * <dt>guid</dt>
 *   <dd>The unique identifier of the notebook.
 *   </dd>
 * 
 * <dt>notebookDisplayName</dt>
 *   <dd>A sequence of characters representing the name of the
 *   notebook.
 *   </dd>
 * 
 * <dt>contactName</dt>
 *   <dd>The User.name value of the notebook's "contact".
 *   </dd>
 * 
 * <dt>hasSharedNotebook</dt>
 *   <dd>Whether a SharedNotebook record exists between the calling user and this
 *   notebook.
 *   </dd>
 * 
 * <dt>joinedUserCount</dt>
 *   <dd>The number of users who have joined this notebook.
 *   </dd>
 * 
 * </dl>
 */
class NotebookDescriptor
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'guid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'notebookDisplayName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'contactName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'hasSharedNotebook',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'joinedUserCount',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $guid = null;
    /**
     * @var string
     */
    public $notebookDisplayName = null;
    /**
     * @var string
     */
    public $contactName = null;
    /**
     * @var bool
     */
    public $hasSharedNotebook = null;
    /**
     * @var int
     */
    public $joinedUserCount = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['guid'])) {
                $this->guid = $vals['guid'];
            }
            if (isset($vals['notebookDisplayName'])) {
                $this->notebookDisplayName = $vals['notebookDisplayName'];
            }
            if (isset($vals['contactName'])) {
                $this->contactName = $vals['contactName'];
            }
            if (isset($vals['hasSharedNotebook'])) {
                $this->hasSharedNotebook = $vals['hasSharedNotebook'];
            }
            if (isset($vals['joinedUserCount'])) {
                $this->joinedUserCount = $vals['joinedUserCount'];
            }
        }
    }

    public function getName()
    {
        return 'NotebookDescriptor';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->guid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->notebookDisplayName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->contactName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->hasSharedNotebook);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->joinedUserCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('NotebookDescriptor');
        if ($this->guid !== null) {
            $xfer += $output->writeFieldBegin('guid', TType::STRING, 1);
            $xfer += $output->writeString($this->guid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notebookDisplayName !== null) {
            $xfer += $output->writeFieldBegin('notebookDisplayName', TType::STRING, 2);
            $xfer += $output->writeString($this->notebookDisplayName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->contactName !== null) {
            $xfer += $output->writeFieldBegin('contactName', TType::STRING, 3);
            $xfer += $output->writeString($this->contactName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->hasSharedNotebook !== null) {
            $xfer += $output->writeFieldBegin('hasSharedNotebook', TType::BOOL, 4);
            $xfer += $output->writeBool($this->hasSharedNotebook);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->joinedUserCount !== null) {
            $xfer += $output->writeFieldBegin('joinedUserCount', TType::I32, 5);
            $xfer += $output->writeI32($this->joinedUserCount);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
