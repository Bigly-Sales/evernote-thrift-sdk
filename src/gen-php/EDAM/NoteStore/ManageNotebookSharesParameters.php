<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * A structure that captures parameters used by clients to manage the
 * shares for a given notebook via the manageNotebookShares method.
 * 
 * <dl>
 * <dt>notebookGuid</dt>
 * <dd>The GUID of the notebook whose shares are being managed.</dd>
 * 
 * <dt>inviteMessage</dt>
 * <dd>If the service sends a message to invitees, this parameter will
 * be used to form the actual message that is sent.</dd>
 * 
 * <dt>membershipsToUpdate</dt>
 * <dd>The list of existing memberships to update.  This field is not
 * intended to be the full set of memberships for the notebook and
 * should only include those already-existing memberships that you
 * actually want to change.  If you want to remove shares, see the
 * unshares fields.  If you want to create a membership,
 * i.e. auto-join a business user, you can do this via the
 * invitationsToCreateOrUpdate field using an Evernote UserID of a
 * fellow business member (the created invitation is automatically
 * joined by the service, so the client is creating an
 * invitation, not a membership).</dd>
 * 
 * <dt>invitationsToCreateOrUpdate</dt>
 * <dd>The list of invitations to update, as matched by the identity
 * field of the InvitationShareRelationship instances, or to create if
 * an existing invitation does not exist.  This field is not intended
 * to be the full set of invitations on the notebook and should only
 * include those invitations that you wish to create or update.  Note
 * that your invitation could convert into a membership via a
 * service-supported auto-join operation.  This happens, for example,
 * when you use an invitation with an Evernote UserID type for a
 * recipient who is a member of the business to which the notebook
 * belongs.  Note that to discover the user IDs for business members,
 * the sharer must also be part of the business.</dd>
 * 
 * <dt>unshares</dt>
 * <dd>The list of share relationships to expunge from the service.
 * If the user identity is for an Evernote UserID, then matching invitations or
 * memberships will be removed. If it's an e-mail, then e-mail based shared notebook
 * invitations will be removed. If it's for an Identity ID, then any invitations that
 * match the identity (by identity ID or user ID or e-mail for legacy invitations) will be
 * removed.</dd>
 * </dl>
 */
class ManageNotebookSharesParameters
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'notebookGuid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'inviteMessage',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'membershipsToUpdate',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EDAM\NoteStore\MemberShareRelationship',
                ),
        ),
        4 => array(
            'var' => 'invitationsToCreateOrUpdate',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EDAM\NoteStore\InvitationShareRelationship',
                ),
        ),
        5 => array(
            'var' => 'unshares',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EDAM\Types\UserIdentity',
                ),
        ),
    );

    /**
     * @var string
     */
    public $notebookGuid = null;
    /**
     * @var string
     */
    public $inviteMessage = null;
    /**
     * @var \EDAM\NoteStore\MemberShareRelationship[]
     */
    public $membershipsToUpdate = null;
    /**
     * @var \EDAM\NoteStore\InvitationShareRelationship[]
     */
    public $invitationsToCreateOrUpdate = null;
    /**
     * @var \EDAM\Types\UserIdentity[]
     */
    public $unshares = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['notebookGuid'])) {
                $this->notebookGuid = $vals['notebookGuid'];
            }
            if (isset($vals['inviteMessage'])) {
                $this->inviteMessage = $vals['inviteMessage'];
            }
            if (isset($vals['membershipsToUpdate'])) {
                $this->membershipsToUpdate = $vals['membershipsToUpdate'];
            }
            if (isset($vals['invitationsToCreateOrUpdate'])) {
                $this->invitationsToCreateOrUpdate = $vals['invitationsToCreateOrUpdate'];
            }
            if (isset($vals['unshares'])) {
                $this->unshares = $vals['unshares'];
            }
        }
    }

    public function getName()
    {
        return 'ManageNotebookSharesParameters';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->notebookGuid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->inviteMessage);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->membershipsToUpdate = array();
                        $_size237 = 0;
                        $_etype240 = 0;
                        $xfer += $input->readListBegin($_etype240, $_size237);
                        for ($_i241 = 0; $_i241 < $_size237; ++$_i241) {
                            $elem242 = null;
                            $elem242 = new \EDAM\NoteStore\MemberShareRelationship();
                            $xfer += $elem242->read($input);
                            $this->membershipsToUpdate []= $elem242;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->invitationsToCreateOrUpdate = array();
                        $_size243 = 0;
                        $_etype246 = 0;
                        $xfer += $input->readListBegin($_etype246, $_size243);
                        for ($_i247 = 0; $_i247 < $_size243; ++$_i247) {
                            $elem248 = null;
                            $elem248 = new \EDAM\NoteStore\InvitationShareRelationship();
                            $xfer += $elem248->read($input);
                            $this->invitationsToCreateOrUpdate []= $elem248;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->unshares = array();
                        $_size249 = 0;
                        $_etype252 = 0;
                        $xfer += $input->readListBegin($_etype252, $_size249);
                        for ($_i253 = 0; $_i253 < $_size249; ++$_i253) {
                            $elem254 = null;
                            $elem254 = new \EDAM\Types\UserIdentity();
                            $xfer += $elem254->read($input);
                            $this->unshares []= $elem254;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ManageNotebookSharesParameters');
        if ($this->notebookGuid !== null) {
            $xfer += $output->writeFieldBegin('notebookGuid', TType::STRING, 1);
            $xfer += $output->writeString($this->notebookGuid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->inviteMessage !== null) {
            $xfer += $output->writeFieldBegin('inviteMessage', TType::STRING, 2);
            $xfer += $output->writeString($this->inviteMessage);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->membershipsToUpdate !== null) {
            if (!is_array($this->membershipsToUpdate)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('membershipsToUpdate', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->membershipsToUpdate));
            foreach ($this->membershipsToUpdate as $iter255) {
                $xfer += $iter255->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->invitationsToCreateOrUpdate !== null) {
            if (!is_array($this->invitationsToCreateOrUpdate)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('invitationsToCreateOrUpdate', TType::LST, 4);
            $output->writeListBegin(TType::STRUCT, count($this->invitationsToCreateOrUpdate));
            foreach ($this->invitationsToCreateOrUpdate as $iter256) {
                $xfer += $iter256->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->unshares !== null) {
            if (!is_array($this->unshares)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('unshares', TType::LST, 5);
            $output->writeListBegin(TType::STRUCT, count($this->unshares));
            foreach ($this->unshares as $iter257) {
                $xfer += $iter257->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
