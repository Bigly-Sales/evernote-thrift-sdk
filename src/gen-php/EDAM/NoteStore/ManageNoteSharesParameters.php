<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Captures parameters used by clients to manage the shares for a given
 * note via the manageNoteShares function. This is used only to manage
 * the existing memberships and invitations for a note. To invite a new
 * recipient, use NoteStore.createOrUpdateSharedNotes.
 * 
 * The only field of an existing membership or invitation that can be
 * updated by this function is the share privilege.
 * 
 * <dl>
 *   <dt>noteGuid</dt>
 *   <dd>The GUID of the note whose shares are being managed.</dd>
 * 
 *   <dt>membershipsToUpdate</dt>
 *   <dd>A list of existing memberships to update. This field is not
 *     meant to be the full set of memberships for the note. Clients
 *     should only include those existing memberships that they wish
 *     to modify. To remove an existing membership, see the unshares
 *     field.</dd>
 * 
 *   <dt>invitationsToUpdate</dt>
 *   <dd>The list of outstanding invitations to update, as matched by the
 *     identity field of the NoteInvitationShareRelatioship instances.
 *     This field is not meant to be the full set of invitations for the
 *     note. Clients should only include those existing invitations that
 *     they wish to modify.</dd>
 * 
 *   <dt>membershipsToUnshare</dt>
 *   <dd>A list of existing memberships to expunge from the service.</dd>
 * 
 *   <dt>invitationsToUnshare</dt>
 *   <dd>A list of outstanding invitations to expunge from the service.</dd>
 * </dl>
 */
class ManageNoteSharesParameters
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'noteGuid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'membershipsToUpdate',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EDAM\NoteStore\NoteMemberShareRelationship',
                ),
        ),
        3 => array(
            'var' => 'invitationsToUpdate',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EDAM\NoteStore\NoteInvitationShareRelationship',
                ),
        ),
        4 => array(
            'var' => 'membershipsToUnshare',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::I32,
            'elem' => array(
                'type' => TType::I32,
                ),
        ),
        5 => array(
            'var' => 'invitationsToUnshare',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::I64,
            'elem' => array(
                'type' => TType::I64,
                ),
        ),
    );

    /**
     * @var string
     */
    public $noteGuid = null;
    /**
     * @var \EDAM\NoteStore\NoteMemberShareRelationship[]
     */
    public $membershipsToUpdate = null;
    /**
     * @var \EDAM\NoteStore\NoteInvitationShareRelationship[]
     */
    public $invitationsToUpdate = null;
    /**
     * @var int[]
     */
    public $membershipsToUnshare = null;
    /**
     * @var int[]
     */
    public $invitationsToUnshare = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['noteGuid'])) {
                $this->noteGuid = $vals['noteGuid'];
            }
            if (isset($vals['membershipsToUpdate'])) {
                $this->membershipsToUpdate = $vals['membershipsToUpdate'];
            }
            if (isset($vals['invitationsToUpdate'])) {
                $this->invitationsToUpdate = $vals['invitationsToUpdate'];
            }
            if (isset($vals['membershipsToUnshare'])) {
                $this->membershipsToUnshare = $vals['membershipsToUnshare'];
            }
            if (isset($vals['invitationsToUnshare'])) {
                $this->invitationsToUnshare = $vals['invitationsToUnshare'];
            }
        }
    }

    public function getName()
    {
        return 'ManageNoteSharesParameters';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->noteGuid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->membershipsToUpdate = array();
                        $_size300 = 0;
                        $_etype303 = 0;
                        $xfer += $input->readListBegin($_etype303, $_size300);
                        for ($_i304 = 0; $_i304 < $_size300; ++$_i304) {
                            $elem305 = null;
                            $elem305 = new \EDAM\NoteStore\NoteMemberShareRelationship();
                            $xfer += $elem305->read($input);
                            $this->membershipsToUpdate []= $elem305;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->invitationsToUpdate = array();
                        $_size306 = 0;
                        $_etype309 = 0;
                        $xfer += $input->readListBegin($_etype309, $_size306);
                        for ($_i310 = 0; $_i310 < $_size306; ++$_i310) {
                            $elem311 = null;
                            $elem311 = new \EDAM\NoteStore\NoteInvitationShareRelationship();
                            $xfer += $elem311->read($input);
                            $this->invitationsToUpdate []= $elem311;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->membershipsToUnshare = array();
                        $_size312 = 0;
                        $_etype315 = 0;
                        $xfer += $input->readListBegin($_etype315, $_size312);
                        for ($_i316 = 0; $_i316 < $_size312; ++$_i316) {
                            $elem317 = null;
                            $xfer += $input->readI32($elem317);
                            $this->membershipsToUnshare []= $elem317;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->invitationsToUnshare = array();
                        $_size318 = 0;
                        $_etype321 = 0;
                        $xfer += $input->readListBegin($_etype321, $_size318);
                        for ($_i322 = 0; $_i322 < $_size318; ++$_i322) {
                            $elem323 = null;
                            $xfer += $input->readI64($elem323);
                            $this->invitationsToUnshare []= $elem323;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ManageNoteSharesParameters');
        if ($this->noteGuid !== null) {
            $xfer += $output->writeFieldBegin('noteGuid', TType::STRING, 1);
            $xfer += $output->writeString($this->noteGuid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->membershipsToUpdate !== null) {
            if (!is_array($this->membershipsToUpdate)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('membershipsToUpdate', TType::LST, 2);
            $output->writeListBegin(TType::STRUCT, count($this->membershipsToUpdate));
            foreach ($this->membershipsToUpdate as $iter324) {
                $xfer += $iter324->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->invitationsToUpdate !== null) {
            if (!is_array($this->invitationsToUpdate)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('invitationsToUpdate', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->invitationsToUpdate));
            foreach ($this->invitationsToUpdate as $iter325) {
                $xfer += $iter325->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->membershipsToUnshare !== null) {
            if (!is_array($this->membershipsToUnshare)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('membershipsToUnshare', TType::LST, 4);
            $output->writeListBegin(TType::I32, count($this->membershipsToUnshare));
            foreach ($this->membershipsToUnshare as $iter326) {
                $xfer += $output->writeI32($iter326);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->invitationsToUnshare !== null) {
            if (!is_array($this->invitationsToUnshare)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('invitationsToUnshare', TType::LST, 5);
            $output->writeListBegin(TType::I64, count($this->invitationsToUnshare));
            foreach ($this->invitationsToUnshare as $iter327) {
                $xfer += $output->writeI64($iter327);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
