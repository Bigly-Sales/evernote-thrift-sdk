<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Captures errors that occur during a call to manageNoteShares. That
 * function can be run best-effort, meaning that some change requests can
 * be applied while others fail. Note that some errors such as system
 * exceptions may still cause the entire call to fail.
 * 
 * Only one of the two ID fields will be set on a given error.
 * 
 * Only one of the two exception fields will be set on a given error.
 * 
 * <dl>
 *   <dt>identityID</dt>
 *   <dd>The identity ID of an outstanding invitation that was not updated
 *     due to the error.</dd>
 * 
 *   <dt>userID</dt>
 *   <dd>The user ID of an existing membership that was not updated due
 *     to the error.</dd>
 * 
 *   <dt>userException</dt>
 *   <dd>If the error is represented as an EDAMUserException that would
 *     have otherwise been thrown without best-effort execution.</dd>
 * 
 *   <dt>notFoundException</dt>
 *   <dd>If the error is represented as an EDAMNotFoundException that
 *     would have otherwise been thrown without best-effort execution.
 *     The identifier field of the exception will be either "Identity.id"
 *     or "User.id", indicating that no existing share could be found for
 *     the specified recipient.</dd>
 * </dl>
 */
class ManageNoteSharesError
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'identityID',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'userID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'userException',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Error\EDAMUserException',
        ),
        4 => array(
            'var' => 'notFoundException',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Error\EDAMNotFoundException',
        ),
    );

    /**
     * @var int
     */
    public $identityID = null;
    /**
     * @var int
     */
    public $userID = null;
    /**
     * @var \EDAM\Error\EDAMUserException
     */
    public $userException = null;
    /**
     * @var \EDAM\Error\EDAMNotFoundException
     */
    public $notFoundException = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['identityID'])) {
                $this->identityID = $vals['identityID'];
            }
            if (isset($vals['userID'])) {
                $this->userID = $vals['userID'];
            }
            if (isset($vals['userException'])) {
                $this->userException = $vals['userException'];
            }
            if (isset($vals['notFoundException'])) {
                $this->notFoundException = $vals['notFoundException'];
            }
        }
    }

    public function getName()
    {
        return 'ManageNoteSharesError';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->identityID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->userID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->userException = new \EDAM\Error\EDAMUserException();
                        $xfer += $this->userException->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->notFoundException = new \EDAM\Error\EDAMNotFoundException();
                        $xfer += $this->notFoundException->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ManageNoteSharesError');
        if ($this->identityID !== null) {
            $xfer += $output->writeFieldBegin('identityID', TType::I64, 1);
            $xfer += $output->writeI64($this->identityID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userID !== null) {
            $xfer += $output->writeFieldBegin('userID', TType::I32, 2);
            $xfer += $output->writeI32($this->userID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userException !== null) {
            $xfer += $output->writeFieldBegin('userException', TType::STRUCT, 3);
            $xfer += $this->userException->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notFoundException !== null) {
            $xfer += $output->writeFieldBegin('notFoundException', TType::STRUCT, 4);
            $xfer += $this->notFoundException->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
