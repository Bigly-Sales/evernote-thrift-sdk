<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Captures a collection of share relationships for a notebook, for
 * example, as returned by the getNotebookShares method.  The share
 * relationships fall into two broad categories: members, and
 * invitations that can be used to become members.
 * 
 * <dl>
 * <dt>invitations</dt>
 * <dd>A list of open invitations that can be redeemed into
 * memberships to the notebook.</dd>
 * 
 * <dt>memberships</dt>
 * <dd>A list of memberships of the notebook.  A member is identified
 * by their Evernote UserID and has rights to access the
 * notebook.</dd>
 * 
 * <dt>invitationRestrictions</dt>
 * <dd>The restrictions on what privileges may be granted to invitees
 * to this notebook. These restrictions may be specific to the calling
 * user or to the notebook itself. They represent the
 * union of all possible invite cases, so it is possible that once the
 * recipient of the invitation has been identified by the service, such
 * as by a business auto-join, the actual assigned privilege may change.
 * </dd>
 * </dl>
 */
class ShareRelationships
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'invitations',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EDAM\NoteStore\InvitationShareRelationship',
                ),
        ),
        2 => array(
            'var' => 'memberships',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EDAM\NoteStore\MemberShareRelationship',
                ),
        ),
        3 => array(
            'var' => 'invitationRestrictions',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\NoteStore\ShareRelationshipRestrictions',
        ),
    );

    /**
     * @var \EDAM\NoteStore\InvitationShareRelationship[]
     */
    public $invitations = null;
    /**
     * @var \EDAM\NoteStore\MemberShareRelationship[]
     */
    public $memberships = null;
    /**
     * @var \EDAM\NoteStore\ShareRelationshipRestrictions
     */
    public $invitationRestrictions = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['invitations'])) {
                $this->invitations = $vals['invitations'];
            }
            if (isset($vals['memberships'])) {
                $this->memberships = $vals['memberships'];
            }
            if (isset($vals['invitationRestrictions'])) {
                $this->invitationRestrictions = $vals['invitationRestrictions'];
            }
        }
    }

    public function getName()
    {
        return 'ShareRelationships';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->invitations = array();
                        $_size223 = 0;
                        $_etype226 = 0;
                        $xfer += $input->readListBegin($_etype226, $_size223);
                        for ($_i227 = 0; $_i227 < $_size223; ++$_i227) {
                            $elem228 = null;
                            $elem228 = new \EDAM\NoteStore\InvitationShareRelationship();
                            $xfer += $elem228->read($input);
                            $this->invitations []= $elem228;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->memberships = array();
                        $_size229 = 0;
                        $_etype232 = 0;
                        $xfer += $input->readListBegin($_etype232, $_size229);
                        for ($_i233 = 0; $_i233 < $_size229; ++$_i233) {
                            $elem234 = null;
                            $elem234 = new \EDAM\NoteStore\MemberShareRelationship();
                            $xfer += $elem234->read($input);
                            $this->memberships []= $elem234;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->invitationRestrictions = new \EDAM\NoteStore\ShareRelationshipRestrictions();
                        $xfer += $this->invitationRestrictions->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ShareRelationships');
        if ($this->invitations !== null) {
            if (!is_array($this->invitations)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('invitations', TType::LST, 1);
            $output->writeListBegin(TType::STRUCT, count($this->invitations));
            foreach ($this->invitations as $iter235) {
                $xfer += $iter235->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->memberships !== null) {
            if (!is_array($this->memberships)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('memberships', TType::LST, 2);
            $output->writeListBegin(TType::STRUCT, count($this->memberships));
            foreach ($this->memberships as $iter236) {
                $xfer += $iter236->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->invitationRestrictions !== null) {
            if (!is_object($this->invitationRestrictions)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('invitationRestrictions', TType::STRUCT, 3);
            $xfer += $this->invitationRestrictions->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
