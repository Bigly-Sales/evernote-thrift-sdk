<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * This structure is provided to the findNotesMetadata function to specify
 * the subset of fields that should be included in each NoteMetadata element
 * that is returned in the NotesMetadataList.
 * Each field on this structure is a boolean flag that indicates whether the
 * corresponding field should be included in the NoteMetadata structure when
 * it is returned.  For example, if the 'includeTitle' field is set on this
 * structure when calling findNotesMetadata, then each NoteMetadata in the
 * list should have its 'title' field set.
 * If one of the fields in this spec is not set, then it will be treated as
 * 'false' by the server, so the default behavior is to include nothing in
 * replies (but the mandatory GUID)
 */
class NotesMetadataResultSpec
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        2 => array(
            'var' => 'includeTitle',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'includeContentLength',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        6 => array(
            'var' => 'includeCreated',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'includeUpdated',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'includeDeleted',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        10 => array(
            'var' => 'includeUpdateSequenceNum',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        11 => array(
            'var' => 'includeNotebookGuid',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        12 => array(
            'var' => 'includeTagGuids',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        14 => array(
            'var' => 'includeAttributes',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        20 => array(
            'var' => 'includeLargestResourceMime',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        21 => array(
            'var' => 'includeLargestResourceSize',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var bool
     */
    public $includeTitle = null;
    /**
     * @var bool
     */
    public $includeContentLength = null;
    /**
     * @var bool
     */
    public $includeCreated = null;
    /**
     * @var bool
     */
    public $includeUpdated = null;
    /**
     * @var bool
     */
    public $includeDeleted = null;
    /**
     * @var bool
     */
    public $includeUpdateSequenceNum = null;
    /**
     * @var bool
     */
    public $includeNotebookGuid = null;
    /**
     * @var bool
     */
    public $includeTagGuids = null;
    /**
     * @var bool
     */
    public $includeAttributes = null;
    /**
     * @var bool
     */
    public $includeLargestResourceMime = null;
    /**
     * @var bool
     */
    public $includeLargestResourceSize = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['includeTitle'])) {
                $this->includeTitle = $vals['includeTitle'];
            }
            if (isset($vals['includeContentLength'])) {
                $this->includeContentLength = $vals['includeContentLength'];
            }
            if (isset($vals['includeCreated'])) {
                $this->includeCreated = $vals['includeCreated'];
            }
            if (isset($vals['includeUpdated'])) {
                $this->includeUpdated = $vals['includeUpdated'];
            }
            if (isset($vals['includeDeleted'])) {
                $this->includeDeleted = $vals['includeDeleted'];
            }
            if (isset($vals['includeUpdateSequenceNum'])) {
                $this->includeUpdateSequenceNum = $vals['includeUpdateSequenceNum'];
            }
            if (isset($vals['includeNotebookGuid'])) {
                $this->includeNotebookGuid = $vals['includeNotebookGuid'];
            }
            if (isset($vals['includeTagGuids'])) {
                $this->includeTagGuids = $vals['includeTagGuids'];
            }
            if (isset($vals['includeAttributes'])) {
                $this->includeAttributes = $vals['includeAttributes'];
            }
            if (isset($vals['includeLargestResourceMime'])) {
                $this->includeLargestResourceMime = $vals['includeLargestResourceMime'];
            }
            if (isset($vals['includeLargestResourceSize'])) {
                $this->includeLargestResourceSize = $vals['includeLargestResourceSize'];
            }
        }
    }

    public function getName()
    {
        return 'NotesMetadataResultSpec';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 2:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeTitle);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeContentLength);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeCreated);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeUpdated);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeDeleted);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeUpdateSequenceNum);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeNotebookGuid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeTagGuids);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeAttributes);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeLargestResourceMime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeLargestResourceSize);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('NotesMetadataResultSpec');
        if ($this->includeTitle !== null) {
            $xfer += $output->writeFieldBegin('includeTitle', TType::BOOL, 2);
            $xfer += $output->writeBool($this->includeTitle);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeContentLength !== null) {
            $xfer += $output->writeFieldBegin('includeContentLength', TType::BOOL, 5);
            $xfer += $output->writeBool($this->includeContentLength);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeCreated !== null) {
            $xfer += $output->writeFieldBegin('includeCreated', TType::BOOL, 6);
            $xfer += $output->writeBool($this->includeCreated);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeUpdated !== null) {
            $xfer += $output->writeFieldBegin('includeUpdated', TType::BOOL, 7);
            $xfer += $output->writeBool($this->includeUpdated);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeDeleted !== null) {
            $xfer += $output->writeFieldBegin('includeDeleted', TType::BOOL, 8);
            $xfer += $output->writeBool($this->includeDeleted);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeUpdateSequenceNum !== null) {
            $xfer += $output->writeFieldBegin('includeUpdateSequenceNum', TType::BOOL, 10);
            $xfer += $output->writeBool($this->includeUpdateSequenceNum);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeNotebookGuid !== null) {
            $xfer += $output->writeFieldBegin('includeNotebookGuid', TType::BOOL, 11);
            $xfer += $output->writeBool($this->includeNotebookGuid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeTagGuids !== null) {
            $xfer += $output->writeFieldBegin('includeTagGuids', TType::BOOL, 12);
            $xfer += $output->writeBool($this->includeTagGuids);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeAttributes !== null) {
            $xfer += $output->writeFieldBegin('includeAttributes', TType::BOOL, 14);
            $xfer += $output->writeBool($this->includeAttributes);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeLargestResourceMime !== null) {
            $xfer += $output->writeFieldBegin('includeLargestResourceMime', TType::BOOL, 20);
            $xfer += $output->writeBool($this->includeLargestResourceMime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeLargestResourceSize !== null) {
            $xfer += $output->writeFieldBegin('includeLargestResourceSize', TType::BOOL, 21);
            $xfer += $output->writeBool($this->includeLargestResourceSize);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
