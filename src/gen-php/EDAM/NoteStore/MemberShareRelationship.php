<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Describes the association between a Notebook and an Evernote User who is
 * a member of that notebook.
 * 
 * <dl>
 * <dt>displayName</dt>
 * <dd>The string that clients should show to users to represent this
 * member.</dd>
 * 
 * <dt>recipientUserId</dt>
 * <dd>The Evernote User ID of the recipient of this notebook share.
 * </dd>
 * 
 * <dt>bestPrivilege</dt>
 * <dd>The privilege at which the member can access the notebook,
 * which is the best privilege granted either individually or to a
 * group to which a member belongs, such as a business.  This field is
 * used by the service to convey information to the user, so clients
 * should treat it as read-only.</dd>
 * 
 * <dt>individualPrivilege</dt>
 * <dd>The individually granted privilege for the member, which does
 * not take GROUP privileges into account.  This value may be unset if
 * only a group-assigned privilege has been granted to the member.
 * This value can be managed by others with sufficient rights using
 * the manageNotebookShares method.  The valid values that clients
 * should present to users for selection are given via the the
 * 'restrictions' field.</dd>
 * 
 * <dt>restrictions</dt>
 * <dd>The restrictions on which privileges may be individually
 * assigned to the recipient of this share relationship.</dd>
 * 
 * <dt>sharerUserId</dt>
 * <dd>The user id of the user who most recently shared the notebook
 * to this user. This field is currently unset for a MemberShareRelationship
 * created by joining a notebook that has been published to the business
 * (MemberShareRelationships where the individual privilege is unset).
 * This field is used by the service to convey information to the user, so
 * clients should treat it as read-only.
 * </dd>
 * </dl>
 */
class MemberShareRelationship
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'displayName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'recipientUserId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'bestPrivilege',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\NoteStore\ShareRelationshipPrivilegeLevel',
        ),
        4 => array(
            'var' => 'individualPrivilege',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\NoteStore\ShareRelationshipPrivilegeLevel',
        ),
        5 => array(
            'var' => 'restrictions',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\NoteStore\ShareRelationshipRestrictions',
        ),
        6 => array(
            'var' => 'sharerUserId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $displayName = null;
    /**
     * @var int
     */
    public $recipientUserId = null;
    /**
     * @var int
     */
    public $bestPrivilege = null;
    /**
     * @var int
     */
    public $individualPrivilege = null;
    /**
     * @var \EDAM\NoteStore\ShareRelationshipRestrictions
     */
    public $restrictions = null;
    /**
     * @var int
     */
    public $sharerUserId = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['displayName'])) {
                $this->displayName = $vals['displayName'];
            }
            if (isset($vals['recipientUserId'])) {
                $this->recipientUserId = $vals['recipientUserId'];
            }
            if (isset($vals['bestPrivilege'])) {
                $this->bestPrivilege = $vals['bestPrivilege'];
            }
            if (isset($vals['individualPrivilege'])) {
                $this->individualPrivilege = $vals['individualPrivilege'];
            }
            if (isset($vals['restrictions'])) {
                $this->restrictions = $vals['restrictions'];
            }
            if (isset($vals['sharerUserId'])) {
                $this->sharerUserId = $vals['sharerUserId'];
            }
        }
    }

    public function getName()
    {
        return 'MemberShareRelationship';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->displayName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->recipientUserId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->bestPrivilege);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->individualPrivilege);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRUCT) {
                        $this->restrictions = new \EDAM\NoteStore\ShareRelationshipRestrictions();
                        $xfer += $this->restrictions->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->sharerUserId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MemberShareRelationship');
        if ($this->displayName !== null) {
            $xfer += $output->writeFieldBegin('displayName', TType::STRING, 1);
            $xfer += $output->writeString($this->displayName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->recipientUserId !== null) {
            $xfer += $output->writeFieldBegin('recipientUserId', TType::I32, 2);
            $xfer += $output->writeI32($this->recipientUserId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bestPrivilege !== null) {
            $xfer += $output->writeFieldBegin('bestPrivilege', TType::I32, 3);
            $xfer += $output->writeI32($this->bestPrivilege);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->individualPrivilege !== null) {
            $xfer += $output->writeFieldBegin('individualPrivilege', TType::I32, 4);
            $xfer += $output->writeI32($this->individualPrivilege);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->restrictions !== null) {
            if (!is_object($this->restrictions)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('restrictions', TType::STRUCT, 5);
            $xfer += $this->restrictions->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sharerUserId !== null) {
            $xfer += $output->writeFieldBegin('sharerUserId', TType::I32, 6);
            $xfer += $output->writeI32($this->sharerUserId);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
