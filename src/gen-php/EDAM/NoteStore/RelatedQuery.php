<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * A description of the thing for which we are searching for related
 * entities.
 * 
 * You must specify either <em>noteGuid</em> or <em>plainText</em>, but
 * not both. <em>filter</em> and <em>referenceUri</em> are optional.
 * 
 * <dl>
 * <dt>noteGuid</dt>
 * <dd>The GUID of an existing note in your account for which related
 *     entities will be found.</dd>
 * 
 * <dt>plainText</dt>
 * <dd>A string of plain text for which to find related entities.
 *     You should provide a text block with a number of characters between
 *     EDAM_RELATED_PLAINTEXT_LEN_MIN and EDAM_RELATED_PLAINTEXT_LEN_MAX.
 *     </dd>
 * 
 * <dt>filter</dt>
 * <dd>The list of criteria that will constrain the notes being considered
 *     related.
 *     Please note that some of the parameters may be ignored, such as
 *     <em>order</em> and <em>ascending</em>.
 * </dd>
 * 
 * <dt>referenceUri</dt>
 * <dd>A URI string specifying a reference entity, around which "relatedness"
 *     should be based. This can be an URL pointing to a web page, for example.
 * </dd>
 * 
 * <dt>context</dt>
 * <dd>Specifies the context to consider when determining related results.
 *     Clients must leave this value unset unless they wish to explicitly specify a known
 *     non-default context.
 * </dd>
 * 
 * <dt>cacheKey</dt>
 * <dd>If set and non-empty, this is an indicator for the server whether it is actually
 *     necessary to perform a new findRelated call at all. Cache Keys are opaque strings
 *     which are returned by the server as part of "RelatedResult" in response
 *     to a "NoteStore.findRelated" query. Cache Keys are inherently query specific.
 * 
 *     If set to an empty string, this indicates that the server should generate a cache
 *     key in the response as part of "RelatedResult".
 * 
 *     If not set, the server will not attempt to generate a cache key at all.
 * </dd>
 * </dl>
 */
class RelatedQuery
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'noteGuid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'plainText',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'filter',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\NoteStore\NoteFilter',
        ),
        4 => array(
            'var' => 'referenceUri',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'context',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'cacheKey',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $noteGuid = null;
    /**
     * @var string
     */
    public $plainText = null;
    /**
     * @var \EDAM\NoteStore\NoteFilter
     */
    public $filter = null;
    /**
     * @var string
     */
    public $referenceUri = null;
    /**
     * @var string
     */
    public $context = null;
    /**
     * @var string
     */
    public $cacheKey = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['noteGuid'])) {
                $this->noteGuid = $vals['noteGuid'];
            }
            if (isset($vals['plainText'])) {
                $this->plainText = $vals['plainText'];
            }
            if (isset($vals['filter'])) {
                $this->filter = $vals['filter'];
            }
            if (isset($vals['referenceUri'])) {
                $this->referenceUri = $vals['referenceUri'];
            }
            if (isset($vals['context'])) {
                $this->context = $vals['context'];
            }
            if (isset($vals['cacheKey'])) {
                $this->cacheKey = $vals['cacheKey'];
            }
        }
    }

    public function getName()
    {
        return 'RelatedQuery';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->noteGuid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->plainText);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->filter = new \EDAM\NoteStore\NoteFilter();
                        $xfer += $this->filter->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->referenceUri);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->context);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cacheKey);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('RelatedQuery');
        if ($this->noteGuid !== null) {
            $xfer += $output->writeFieldBegin('noteGuid', TType::STRING, 1);
            $xfer += $output->writeString($this->noteGuid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->plainText !== null) {
            $xfer += $output->writeFieldBegin('plainText', TType::STRING, 2);
            $xfer += $output->writeString($this->plainText);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->filter !== null) {
            if (!is_object($this->filter)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
            $xfer += $this->filter->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->referenceUri !== null) {
            $xfer += $output->writeFieldBegin('referenceUri', TType::STRING, 4);
            $xfer += $output->writeString($this->referenceUri);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->context !== null) {
            $xfer += $output->writeFieldBegin('context', TType::STRING, 5);
            $xfer += $output->writeString($this->context);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cacheKey !== null) {
            $xfer += $output->writeFieldBegin('cacheKey', TType::STRING, 6);
            $xfer += $output->writeString($this->cacheKey);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
