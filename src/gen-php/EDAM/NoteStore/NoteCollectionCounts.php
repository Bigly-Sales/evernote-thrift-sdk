<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 *  A data structure representing the number of notes for each notebook
 *  and tag with a non-zero set of applicable notes.
 * 
 * <dl>
 *  <dt>notebookCounts</dt>
 *    <dd>
 *    A mapping from the Notebook GUID to the number of
 *    notes (from some selection) that are in the corresponding notebook.
 *    </dd>
 * 
 *  <dt>tagCounts</dt>
 *    <dd>
 *    A mapping from the Tag GUID to the number of notes (from some
 *    selection) that have the corresponding tag.
 *    </dd>
 * 
 *  <dt>trashCount</dt>
 *    <dd>
 *    If this is set, then this is the number of notes that are in the trash.
 *    If this is not set, then the number of notes in the trash hasn't been
 *    reported.  (I.e. if there are no notes in the trash, this will be set
 *    to 0.)
 *    </dd>
 *  </dl>
 */
class NoteCollectionCounts
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'notebookCounts',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I32,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I32,
                ),
        ),
        2 => array(
            'var' => 'tagCounts',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I32,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I32,
                ),
        ),
        3 => array(
            'var' => 'trashCount',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var array
     */
    public $notebookCounts = null;
    /**
     * @var array
     */
    public $tagCounts = null;
    /**
     * @var int
     */
    public $trashCount = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['notebookCounts'])) {
                $this->notebookCounts = $vals['notebookCounts'];
            }
            if (isset($vals['tagCounts'])) {
                $this->tagCounts = $vals['tagCounts'];
            }
            if (isset($vals['trashCount'])) {
                $this->trashCount = $vals['trashCount'];
            }
        }
    }

    public function getName()
    {
        return 'NoteCollectionCounts';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::MAP) {
                        $this->notebookCounts = array();
                        $_size141 = 0;
                        $_ktype142 = 0;
                        $_vtype143 = 0;
                        $xfer += $input->readMapBegin($_ktype142, $_vtype143, $_size141);
                        for ($_i145 = 0; $_i145 < $_size141; ++$_i145) {
                            $key146 = '';
                            $val147 = 0;
                            $xfer += $input->readString($key146);
                            $xfer += $input->readI32($val147);
                            $this->notebookCounts[$key146] = $val147;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::MAP) {
                        $this->tagCounts = array();
                        $_size148 = 0;
                        $_ktype149 = 0;
                        $_vtype150 = 0;
                        $xfer += $input->readMapBegin($_ktype149, $_vtype150, $_size148);
                        for ($_i152 = 0; $_i152 < $_size148; ++$_i152) {
                            $key153 = '';
                            $val154 = 0;
                            $xfer += $input->readString($key153);
                            $xfer += $input->readI32($val154);
                            $this->tagCounts[$key153] = $val154;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->trashCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('NoteCollectionCounts');
        if ($this->notebookCounts !== null) {
            if (!is_array($this->notebookCounts)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notebookCounts', TType::MAP, 1);
            $output->writeMapBegin(TType::STRING, TType::I32, count($this->notebookCounts));
            foreach ($this->notebookCounts as $kiter155 => $viter156) {
                $xfer += $output->writeString($kiter155);
                $xfer += $output->writeI32($viter156);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->tagCounts !== null) {
            if (!is_array($this->tagCounts)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('tagCounts', TType::MAP, 2);
            $output->writeMapBegin(TType::STRING, TType::I32, count($this->tagCounts));
            foreach ($this->tagCounts as $kiter157 => $viter158) {
                $xfer += $output->writeString($kiter157);
                $xfer += $output->writeI32($viter158);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->trashCount !== null) {
            $xfer += $output->writeFieldBegin('trashCount', TType::I32, 3);
            $xfer += $output->writeI32($this->trashCount);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
