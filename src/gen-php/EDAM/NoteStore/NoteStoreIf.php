<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Service:  NoteStore
 * <p>
 * The NoteStore service is used by EDAM clients to exchange information
 * about the collection of notes in an account. This is primarily used for
 * synchronization, but could also be used by a "thin" client without a full
 * local cache.
 * </p><p>
 * Most functions take an "authenticationToken" parameter, which is the
 * value returned by the UserStore which permits access to the account.
 * </p>
 * 
 * Calls which require an authenticationToken may throw an EDAMUserException
 * for the following reasons:
 *  <ul>
 *   <li>DATA_REQUIRED "authenticationToken" - token is empty</li>
 *   <li>BAD_DATA_FORMAT "authenticationToken" - token is malformed</li>
 *   <li>INVALID_AUTH "authenticationToken" - token signature is invalid</li>
 *   <li>AUTH_EXPIRED "authenticationToken" - token has expired or been revoked</li>
 *   <li>PERMISSION_DENIED "authenticationToken" - token does not grant permission
 *       to perform the requested action</li>
 *   <li>BUSINESS_SECURITY_LOGIN_REQUIRED "sso" - the user is a member of a business
 *       that requires single sign-on, and must complete SSO before accessing business
 *       content.
 * </ul>
 */
interface NoteStoreIf
{
    /**
     * Asks the NoteStore to provide information about the status of the user
     * account corresponding to the provided authentication token.
     * 
     * @param string $authenticationToken
     * @return \EDAM\NoteStore\SyncState This structure encapsulates the information about the state of the
     * user's account for the purpose of "state based" synchronization.
     * <dl>
     * <dt>currentTime</dt>
     *   <dd>
     *   The server's current date and time.
     *   </dd>
     * <dt>fullSyncBefore</dt>
     *   <dd>
     *   The cutoff date and time for client caches to be
     *   updated via incremental synchronization.  Any clients that were last
     *   synched with the server before this date/time must do a full resync of all
     *   objects.  This cutoff point will change over time as archival data is
     *   deleted or special circumstances on the service require resynchronization.
     *   </dd>
     * <dt>updateCount</dt>
     *   <dd>
     *   Indicates the total number of transactions that have
     *   been committed within the account.  This reflects (for example) the
     *   number of discrete additions or modifications that have been made to
     *   the data in this account (tags, notes, resources, etc.).
     *   This number is the "high water mark" for Update Sequence Numbers (USN)
     *   within the account.
     *   </dd>
     * <dt>uploaded</dt>
     *   <dd>
     *   The total number of bytes that have been uploaded to
     *   this account in the current monthly period.  This can be compared against
     *   Accounting.uploadLimit (from the UserStore) to determine how close the user
     *   is to their monthly upload limit.
     *   This value may not be present if the SyncState has been retrieved by
     *   a caller that only has read access to the account.
     *   </dd>
     * <dt>userLastUpdated</dt>
     *   <dd>
     *   The last time when a user's account level information was changed. This value
     *   is the latest time when a modification was made to any of the following:
     *   accounting information (billing, quota, premium status, etc.), user attributes
     *   and business user information (business name, business user attributes, etc.) if
     *   the user is in a business.
     *   Clients who need to maintain account information about a User should watch this
     *   field for updates rather than polling UserStore.getUser for updates. Here is the
     *   basic flow that clients should follow:
     *   <ol>
     *     <li>Call NoteStore.getSyncState to retrieve the SyncState object</li>
     *     <li>Compare SyncState.userLastUpdated to previously stored value:
     *         if (SyncState.userLastUpdated > previousValue)
     *           call UserStore.getUser to get the latest User object;
     *         else
     *           do nothing;</li>
     *     <li>Update previousValue = SyncState.userLastUpdated</li>
     *   </ol>
     *   </dd>
     * <dt>userMaxMessageEventId</dt>
     *   <dd>
     *   The greatest MessageEventID for this user's account. Clients that do a full
     *   sync should store this value locally and compare their local copy to the
     *   value returned by getSyncState to determine if they need to sync with
     *   MessageStore. This value will be omitted if the user has never sent or
     *   received a message.
     *   </dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function getSyncState($authenticationToken);
    /**
     * Asks the NoteStore to provide the state of the account in order of
     * last modification.  This request retrieves one block of the server's
     * state so that a client can make several small requests against a large
     * account rather than getting the entire state in one big message.
     * This call gives fine-grained control of the data that will
     * be received by a client by omitting data elements that a client doesn't
     * need. This may reduce network traffic and sync times.
     * 
     * @param afterUSN
     *   The client can pass this value to ask only for objects that
     *   have been updated after a certain point.  This allows the client to
     *   receive updates after its last checkpoint rather than doing a full
     *   synchronization on every pass.  The default value of "0" indicates
     *   that the client wants to get objects from the start of the account.
     * 
     * @param maxEntries
     *   The maximum number of modified objects that should be
     *   returned in the result SyncChunk.  This can be used to limit the size
     *   of each individual message to be friendly for network transfer.
     * 
     * @param filter
     *   The caller must set some of the flags in this structure to specify which
     *   data types should be returned during the synchronization.  See
     *   the SyncChunkFilter structure for information on each flag.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "afterUSN" - if negative
     *   </li>
     *   <li> BAD_DATA_FORMAT "maxEntries" - if less than 1
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param int $afterUSN
     * @param int $maxEntries
     * @param \EDAM\NoteStore\SyncChunkFilter $filter
     * @return \EDAM\NoteStore\SyncChunk  This structure is given out by the NoteStore when a client asks to
     *  receive the current state of an account.  The client asks for the server's
     *  state one chunk at a time in order to allow clients to retrieve the state
     *  of a large account without needing to transfer the entire account in
     *  a single message.
     * 
     *  The server always gives SyncChunks using an ascending series of Update
     *  Sequence Numbers (USNs).
     * 
     * <dl>
     *  <dt>currentTime</dt>
     *    <dd>
     *    The server's current date and time.
     *    </dd>
     * 
     *  <dt>chunkHighUSN</dt>
     *    <dd>
     *    The highest USN for any of the data objects represented
     *    in this sync chunk.  If there are no objects in the chunk, this will not be
     *    set.
     *    </dd>
     * 
     *  <dt>updateCount</dt>
     *    <dd>
     *    The total number of updates that have been performed in
     *    the service for this account.  This is equal to the highest USN within the
     *    account at the point that this SyncChunk was generated.  If updateCount
     *    and chunkHighUSN are identical, that means that this is the last chunk
     *    in the account ... there is no more recent information.
     *    </dd>
     * 
     *  <dt>notes</dt>
     *    <dd>
     *    If present, this is a list of non-expunged notes that
     *    have a USN in this chunk.  This will include notes that are "deleted"
     *    but not expunged (i.e. in the trash).  The notes will include their list
     *    of tags and resources, but the note content, resource content, resource
     *    recognition data and resource alternate data will not be supplied.
     *    </dd>
     * 
     *  <dt>notebooks</dt>
     *    <dd>
     *    If present, this is a list of non-expunged notebooks that
     *    have a USN in this chunk.
     *    </dd>
     * 
     *  <dt>tags</dt>
     *    <dd>
     *    If present, this is a list of the non-expunged tags that have a
     *    USN in this chunk.
     *    </dd>
     * 
     *  <dt>searches</dt>
     *    <dd>
     *    If present, this is a list of non-expunged searches that
     *    have a USN in this chunk.
     *    </dd>
     * 
     *  <dt>resources</dt>
     *    <dd>
     *    If present, this is a list of the non-expunged resources
     *    that have a USN in this chunk.  This will include the metadata for each
     *    resource, but not its binary contents or recognition data, which must be
     *    retrieved separately.
     *    </dd>
     * 
     *  <dt>expungedNotes</dt>
     *    <dd>
     *    If present, the GUIDs of all of the notes that were
     *    permanently expunged in this chunk.
     *    </dd>
     * 
     *  <dt>expungedNotebooks</dt>
     *    <dd>
     *    If present, the GUIDs of all of the notebooks that
     *    were permanently expunged in this chunk.  When a notebook is expunged,
     *    this implies that all of its child notes (and their resources) were
     *    also expunged.
     *    </dd>
     * 
     *  <dt>expungedTags</dt>
     *    <dd>
     *    If present, the GUIDs of all of the tags that were
     *    permanently expunged in this chunk.
     *    </dd>
     * 
     *  <dt>expungedSearches</dt>
     *    <dd>
     *    If present, the GUIDs of all of the saved searches
     *    that were permanently expunged in this chunk.
     *    </dd>
     * 
     *  <dt>linkedNotebooks</dt>
     *    <dd>
     *    If present, this is a list of non-expunged LinkedNotebooks that
     *    have a USN in this chunk.
     *    </dd>
     * 
     *  <dt>expungedLinkedNotebooks</dt>
     *    <dd>
     *    If present, the GUIDs of all of the LinkedNotebooks
     *    that were permanently expunged in this chunk.
     *    </dd>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function getFilteredSyncChunk($authenticationToken, $afterUSN, $maxEntries, \EDAM\NoteStore\SyncChunkFilter $filter);
    /**
     * Asks the NoteStore to provide information about the status of a linked
     * notebook that has been shared with the caller, or that is public to the
     * world.
     * This will return a result that is similar to getSyncState, but may omit
     * SyncState.uploaded if the caller doesn't have permission to write to
     * the linked notebook.
     * 
     * This function must be called on the shard that owns the referenced
     * notebook.  (I.e. the shardId in /shard/shardId/edam/note must be the
     * same as LinkedNotebook.shardId.)
     * 
     * @param authenticationToken
     *   This should be an authenticationToken for the guest who has received
     *   the invitation to the share.  (I.e. this should not be the result of
     *   NoteStore.authenticateToSharedNotebook)
     * 
     * @param linkedNotebook
     *   This structure should contain identifying information and permissions
     *   to access the notebook in question.
     * 
     * @throws EDAMUserException <ul>
     *   <li>DATA_REQUIRED "LinkedNotebook.username" - The username field must be
     *       populated with the current username of the owner of the notebook for which
     *       you are obtaining sync state.
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li>"LinkedNotebook.username" - If the LinkedNotebook.username field does not
     *       correspond to a current user on the service.
     *   </li>
     * </ul>
     * 
     * @throws SystemException <ul>
     *   <li>SHARD_UNAVAILABLE - If the provided LinkedNotebook.username corresponds to a
     *       user whose account is on a shard other than that on which this method was
     *       invoked.
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\Types\LinkedNotebook $linkedNotebook
     * @return \EDAM\NoteStore\SyncState This structure encapsulates the information about the state of the
     * user's account for the purpose of "state based" synchronization.
     * <dl>
     * <dt>currentTime</dt>
     *   <dd>
     *   The server's current date and time.
     *   </dd>
     * <dt>fullSyncBefore</dt>
     *   <dd>
     *   The cutoff date and time for client caches to be
     *   updated via incremental synchronization.  Any clients that were last
     *   synched with the server before this date/time must do a full resync of all
     *   objects.  This cutoff point will change over time as archival data is
     *   deleted or special circumstances on the service require resynchronization.
     *   </dd>
     * <dt>updateCount</dt>
     *   <dd>
     *   Indicates the total number of transactions that have
     *   been committed within the account.  This reflects (for example) the
     *   number of discrete additions or modifications that have been made to
     *   the data in this account (tags, notes, resources, etc.).
     *   This number is the "high water mark" for Update Sequence Numbers (USN)
     *   within the account.
     *   </dd>
     * <dt>uploaded</dt>
     *   <dd>
     *   The total number of bytes that have been uploaded to
     *   this account in the current monthly period.  This can be compared against
     *   Accounting.uploadLimit (from the UserStore) to determine how close the user
     *   is to their monthly upload limit.
     *   This value may not be present if the SyncState has been retrieved by
     *   a caller that only has read access to the account.
     *   </dd>
     * <dt>userLastUpdated</dt>
     *   <dd>
     *   The last time when a user's account level information was changed. This value
     *   is the latest time when a modification was made to any of the following:
     *   accounting information (billing, quota, premium status, etc.), user attributes
     *   and business user information (business name, business user attributes, etc.) if
     *   the user is in a business.
     *   Clients who need to maintain account information about a User should watch this
     *   field for updates rather than polling UserStore.getUser for updates. Here is the
     *   basic flow that clients should follow:
     *   <ol>
     *     <li>Call NoteStore.getSyncState to retrieve the SyncState object</li>
     *     <li>Compare SyncState.userLastUpdated to previously stored value:
     *         if (SyncState.userLastUpdated > previousValue)
     *           call UserStore.getUser to get the latest User object;
     *         else
     *           do nothing;</li>
     *     <li>Update previousValue = SyncState.userLastUpdated</li>
     *   </ol>
     *   </dd>
     * <dt>userMaxMessageEventId</dt>
     *   <dd>
     *   The greatest MessageEventID for this user's account. Clients that do a full
     *   sync should store this value locally and compare their local copy to the
     *   value returned by getSyncState to determine if they need to sync with
     *   MessageStore. This value will be omitted if the user has never sent or
     *   received a message.
     *   </dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getLinkedNotebookSyncState($authenticationToken, \EDAM\Types\LinkedNotebook $linkedNotebook);
    /**
     * Asks the NoteStore to provide information about the contents of a linked
     * notebook that has been shared with the caller, or that is public to the
     * world.
     * This will return a result that is similar to getSyncChunk, but will only
     * contain entries that are visible to the caller.  I.e. only that particular
     * Notebook will be visible, along with its Notes, and Tags on those Notes.
     * 
     * This function must be called on the shard that owns the referenced
     * notebook.  (I.e. the shardId in /shard/shardId/edam/note must be the
     * same as LinkedNotebook.shardId.)
     * 
     * @param authenticationToken
     *   This should be an authenticationToken for the guest who has received
     *   the invitation to the share.  (I.e. this should not be the result of
     *   NoteStore.authenticateToSharedNotebook)
     * 
     * @param linkedNotebook
     *   This structure should contain identifying information and permissions
     *   to access the notebook in question.  This must contain the valid fields
     *   for either a shared notebook (e.g. shareKey)
     *   or a public notebook (e.g. username, uri)
     * 
     * @param afterUSN
     *   The client can pass this value to ask only for objects that
     *   have been updated after a certain point.  This allows the client to
     *   receive updates after its last checkpoint rather than doing a full
     *   synchronization on every pass.  The default value of "0" indicates
     *   that the client wants to get objects from the start of the account.
     * 
     * @param maxEntries
     *   The maximum number of modified objects that should be
     *   returned in the result SyncChunk.  This can be used to limit the size
     *   of each individual message to be friendly for network transfer.
     *   Applications should not request more than 256 objects at a time,
     *   and must handle the case where the service returns less than the
     *   requested number of objects in a given request even though more
     *   objects are available on the service.
     * 
     * @param fullSyncOnly
     *   If true, then the client only wants initial data for a full sync.
     *   In this case, the service will not return any expunged objects,
     *   and will not return any Resources, since these are also provided
     *   in their corresponding Notes.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "afterUSN" - if negative
     *   </li>
     *   <li> BAD_DATA_FORMAT "maxEntries" - if less than 1
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "LinkedNotebook" - if the provided information doesn't match any
     *     valid notebook
     *   </li>
     *   <li> "LinkedNotebook.uri" - if the provided public URI doesn't match any
     *     valid notebook
     *   </li>
     *   <li> "SharedNotebook.id" - if the provided information indicates a
     *      shared notebook that no longer exists
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\Types\LinkedNotebook $linkedNotebook
     * @param int $afterUSN
     * @param int $maxEntries
     * @param bool $fullSyncOnly
     * @return \EDAM\NoteStore\SyncChunk  This structure is given out by the NoteStore when a client asks to
     *  receive the current state of an account.  The client asks for the server's
     *  state one chunk at a time in order to allow clients to retrieve the state
     *  of a large account without needing to transfer the entire account in
     *  a single message.
     * 
     *  The server always gives SyncChunks using an ascending series of Update
     *  Sequence Numbers (USNs).
     * 
     * <dl>
     *  <dt>currentTime</dt>
     *    <dd>
     *    The server's current date and time.
     *    </dd>
     * 
     *  <dt>chunkHighUSN</dt>
     *    <dd>
     *    The highest USN for any of the data objects represented
     *    in this sync chunk.  If there are no objects in the chunk, this will not be
     *    set.
     *    </dd>
     * 
     *  <dt>updateCount</dt>
     *    <dd>
     *    The total number of updates that have been performed in
     *    the service for this account.  This is equal to the highest USN within the
     *    account at the point that this SyncChunk was generated.  If updateCount
     *    and chunkHighUSN are identical, that means that this is the last chunk
     *    in the account ... there is no more recent information.
     *    </dd>
     * 
     *  <dt>notes</dt>
     *    <dd>
     *    If present, this is a list of non-expunged notes that
     *    have a USN in this chunk.  This will include notes that are "deleted"
     *    but not expunged (i.e. in the trash).  The notes will include their list
     *    of tags and resources, but the note content, resource content, resource
     *    recognition data and resource alternate data will not be supplied.
     *    </dd>
     * 
     *  <dt>notebooks</dt>
     *    <dd>
     *    If present, this is a list of non-expunged notebooks that
     *    have a USN in this chunk.
     *    </dd>
     * 
     *  <dt>tags</dt>
     *    <dd>
     *    If present, this is a list of the non-expunged tags that have a
     *    USN in this chunk.
     *    </dd>
     * 
     *  <dt>searches</dt>
     *    <dd>
     *    If present, this is a list of non-expunged searches that
     *    have a USN in this chunk.
     *    </dd>
     * 
     *  <dt>resources</dt>
     *    <dd>
     *    If present, this is a list of the non-expunged resources
     *    that have a USN in this chunk.  This will include the metadata for each
     *    resource, but not its binary contents or recognition data, which must be
     *    retrieved separately.
     *    </dd>
     * 
     *  <dt>expungedNotes</dt>
     *    <dd>
     *    If present, the GUIDs of all of the notes that were
     *    permanently expunged in this chunk.
     *    </dd>
     * 
     *  <dt>expungedNotebooks</dt>
     *    <dd>
     *    If present, the GUIDs of all of the notebooks that
     *    were permanently expunged in this chunk.  When a notebook is expunged,
     *    this implies that all of its child notes (and their resources) were
     *    also expunged.
     *    </dd>
     * 
     *  <dt>expungedTags</dt>
     *    <dd>
     *    If present, the GUIDs of all of the tags that were
     *    permanently expunged in this chunk.
     *    </dd>
     * 
     *  <dt>expungedSearches</dt>
     *    <dd>
     *    If present, the GUIDs of all of the saved searches
     *    that were permanently expunged in this chunk.
     *    </dd>
     * 
     *  <dt>linkedNotebooks</dt>
     *    <dd>
     *    If present, this is a list of non-expunged LinkedNotebooks that
     *    have a USN in this chunk.
     *    </dd>
     * 
     *  <dt>expungedLinkedNotebooks</dt>
     *    <dd>
     *    If present, the GUIDs of all of the LinkedNotebooks
     *    that were permanently expunged in this chunk.
     *    </dd>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getLinkedNotebookSyncChunk($authenticationToken, \EDAM\Types\LinkedNotebook $linkedNotebook, $afterUSN, $maxEntries, $fullSyncOnly);
    /**
     * Returns a list of all of the notebooks in the account.
     * 
     * @param string $authenticationToken
     * @return \EDAM\Types\Notebook[]
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function listNotebooks($authenticationToken);
    /**
     * Returns a list of all the notebooks in a business that the user has permission to access,
     * regardless of whether the user has joined them. This includes notebooks that have been shared
     * with the entire business as well as notebooks that have been shared directly with the user.
     * 
     * @param authenticationToken A business authentication token obtained by calling
     *   UserStore.authenticateToBusiness.
     * 
     * @throws EDAMUserException <ul>
     *   <li> INVALID_AUTH "authenticationToken" - if the authentication token is not a
     *     business auth token.</li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @return \EDAM\Types\Notebook[]
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function listAccessibleBusinessNotebooks($authenticationToken);
    /**
     * Returns the current state of the notebook with the provided GUID.
     * The notebook may be active or deleted (but not expunged).
     * 
     * @param guid
     *   The GUID of the notebook to be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Notebook.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Notebook" - private notebook, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Notebook.guid" - tag not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return \EDAM\Types\Notebook A unique container for a set of notes.
     * <dl>
     * <dt>guid</dt>
     *   <dd>The unique identifier of this notebook.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>name</dt>
     *   <dd>A sequence of characters representing the name of the
     *   notebook.  May be changed by clients, but the account may not contain two
     *   notebooks with names that are equal via a case-insensitive comparison.
     *   Can't begin or end with a space.
     *   <br/>
     *   Length:  EDAM_NOTEBOOK_NAME_LEN_MIN - EDAM_NOTEBOOK_NAME_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_NOTEBOOK_NAME_REGEX
     *   </dd>
     * 
     * <dt>updateSequenceNum</dt>
     *   <dd>A number identifying the last transaction to
     *   modify the state of this object.  The USN values are sequential within an
     *   account, and can be used to compare the order of modifications within the
     *   service.
     *   </dd>
     * 
     * <dt>defaultNotebook</dt>
     *   <dd>If true, this notebook should be used for new notes
     *   whenever the user has not (or cannot) specify a desired target notebook.
     *   For example, if a note is submitted via SMTP email.
     *   The service will maintain at most one defaultNotebook per account.
     *   If a second notebook is created or updated with defaultNotebook set to
     *   true, the service will automatically update the prior notebook's
     *   defaultNotebook field to false.  If the default notebook is deleted
     *   (i.e. "active" set to false), the "defaultNotebook" field will be
     *   set to false by the service.  If the account has no default notebook
     *   set, the service will use the most recent notebook as the default.
     *   </dd>
     * 
     * <dt>serviceCreated</dt>
     *   <dd>The time when this notebook was created on the
     *   service. This will be set on the service during creation, and the service
     *   will provide this value when it returns a Notebook to a client.
     *   The service will ignore this value if it is sent by clients.
     *   </dd>
     * 
     * <dt>serviceUpdated</dt>
     *   <dd>The time when this notebook was last modified on the
     *   service.  This will be set on the service during creation, and the service
     *   will provide this value when it returns a Notebook to a client.
     *   The service will ignore this value if it is sent by clients.
     *   </dd>
     * 
     * <dt>publishing</dt>
     *   <dd>If the Notebook has been opened for public access, then this will point to the set of
     *   publishing information for the Notebook (URI, description, etc.). A Notebook cannot be
     *   published without providing this information, but it will persist for later use if publishing
     *   is ever disabled on the Notebook. Clients that do not wish to change the publishing behavior
     *   of a Notebook should not set this value when calling NoteStore.updateNotebook().
     *   Note that this structure is never populated for business notebooks, see the businessNotebook
     *   field.
     *   </dd>
     * 
     * <dt>published</dt>
     *   <dd>If this is set to true, then the Notebook will be
     *   accessible either to the public, or for business users to their business,
     *   via the 'publishing' or 'businessNotebook' specifications, which must also be set. If this is
     *   set to false, the Notebook will not be available to the public (or business).
     *   Clients that do not wish to change the publishing behavior of a Notebook
     *   should not set this value when calling NoteStore.updateNotebook().
     *   </dd>
     * 
     * <dt>stack</dt>
     *   <dd>If this is set, then the notebook is visually contained within a stack
     *   of notebooks with this name.  All notebooks in the same account with the
     *   same 'stack' field are considered to be in the same stack.
     *   Notebooks with no stack set are "top level" and not contained within a
     *   stack.
     *   </dd>
     * 
     * <dt>sharedNotebookIds</dt>
     *   <dd><i>DEPRECATED</i> - replaced by sharedNotebooks.</dd>
     * 
     * <dt>sharedNotebooks</dt>
     *   <dd>The list of recipients to whom this notebook has been shared
     *   (one SharedNotebook object per recipient email address). This field will
     *   be unset if you do not have permission to access this data. If you are
     *   accessing the notebook as the owner or via a shared notebook that is
     *   modifiable, then you have access to this data and the value will be set.
     *   This field is read-only. Clients may not make changes to shared notebooks
     *   via this field.
     *   </dd>
     * 
     * <dt>businessNotebook</dt>
     *   <dd>If the notebook is part of a business account and has been shared with the entire
     *   business, this will contain sharing information. The presence or absence of this field
     *   is not a reliable test of whether a given notebook is in fact a business notebook - the
     *   field is only used when a notebook is or has been shared with the entire business.
     *   </dd>
     * 
     * <dt>contact</dt>
     *   <dd>Intended for use with Business accounts, this field identifies the user who
     *   has been designated as the "contact".  For notebooks created in business
     *   accounts, the server will automatically set this value to the user who created
     *   the notebook unless Notebook.contact.username has been set, in which that value
     *   will be used.  When updating a notebook, it is common to leave Notebook.contact
     *   field unset, indicating that no change to the value is being requested and that
     *   the existing value, if any, should be preserved.
     *   </dd>
     * 
     * <dt>recipientSettings</dt>
     *   <dd>This represents the preferences/settings that a recipient has set for this
     *   notebook. These are intended to be changed only by the recipient, and each
     *   recipient has their own recipient settings.
     *   </dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getNotebook($authenticationToken, $guid);
    /**
     * Returns the notebook that should be used to store new notes in the
     * user's account when no other notebooks are specified.
     * 
     * @param string $authenticationToken
     * @return \EDAM\Types\Notebook A unique container for a set of notes.
     * <dl>
     * <dt>guid</dt>
     *   <dd>The unique identifier of this notebook.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>name</dt>
     *   <dd>A sequence of characters representing the name of the
     *   notebook.  May be changed by clients, but the account may not contain two
     *   notebooks with names that are equal via a case-insensitive comparison.
     *   Can't begin or end with a space.
     *   <br/>
     *   Length:  EDAM_NOTEBOOK_NAME_LEN_MIN - EDAM_NOTEBOOK_NAME_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_NOTEBOOK_NAME_REGEX
     *   </dd>
     * 
     * <dt>updateSequenceNum</dt>
     *   <dd>A number identifying the last transaction to
     *   modify the state of this object.  The USN values are sequential within an
     *   account, and can be used to compare the order of modifications within the
     *   service.
     *   </dd>
     * 
     * <dt>defaultNotebook</dt>
     *   <dd>If true, this notebook should be used for new notes
     *   whenever the user has not (or cannot) specify a desired target notebook.
     *   For example, if a note is submitted via SMTP email.
     *   The service will maintain at most one defaultNotebook per account.
     *   If a second notebook is created or updated with defaultNotebook set to
     *   true, the service will automatically update the prior notebook's
     *   defaultNotebook field to false.  If the default notebook is deleted
     *   (i.e. "active" set to false), the "defaultNotebook" field will be
     *   set to false by the service.  If the account has no default notebook
     *   set, the service will use the most recent notebook as the default.
     *   </dd>
     * 
     * <dt>serviceCreated</dt>
     *   <dd>The time when this notebook was created on the
     *   service. This will be set on the service during creation, and the service
     *   will provide this value when it returns a Notebook to a client.
     *   The service will ignore this value if it is sent by clients.
     *   </dd>
     * 
     * <dt>serviceUpdated</dt>
     *   <dd>The time when this notebook was last modified on the
     *   service.  This will be set on the service during creation, and the service
     *   will provide this value when it returns a Notebook to a client.
     *   The service will ignore this value if it is sent by clients.
     *   </dd>
     * 
     * <dt>publishing</dt>
     *   <dd>If the Notebook has been opened for public access, then this will point to the set of
     *   publishing information for the Notebook (URI, description, etc.). A Notebook cannot be
     *   published without providing this information, but it will persist for later use if publishing
     *   is ever disabled on the Notebook. Clients that do not wish to change the publishing behavior
     *   of a Notebook should not set this value when calling NoteStore.updateNotebook().
     *   Note that this structure is never populated for business notebooks, see the businessNotebook
     *   field.
     *   </dd>
     * 
     * <dt>published</dt>
     *   <dd>If this is set to true, then the Notebook will be
     *   accessible either to the public, or for business users to their business,
     *   via the 'publishing' or 'businessNotebook' specifications, which must also be set. If this is
     *   set to false, the Notebook will not be available to the public (or business).
     *   Clients that do not wish to change the publishing behavior of a Notebook
     *   should not set this value when calling NoteStore.updateNotebook().
     *   </dd>
     * 
     * <dt>stack</dt>
     *   <dd>If this is set, then the notebook is visually contained within a stack
     *   of notebooks with this name.  All notebooks in the same account with the
     *   same 'stack' field are considered to be in the same stack.
     *   Notebooks with no stack set are "top level" and not contained within a
     *   stack.
     *   </dd>
     * 
     * <dt>sharedNotebookIds</dt>
     *   <dd><i>DEPRECATED</i> - replaced by sharedNotebooks.</dd>
     * 
     * <dt>sharedNotebooks</dt>
     *   <dd>The list of recipients to whom this notebook has been shared
     *   (one SharedNotebook object per recipient email address). This field will
     *   be unset if you do not have permission to access this data. If you are
     *   accessing the notebook as the owner or via a shared notebook that is
     *   modifiable, then you have access to this data and the value will be set.
     *   This field is read-only. Clients may not make changes to shared notebooks
     *   via this field.
     *   </dd>
     * 
     * <dt>businessNotebook</dt>
     *   <dd>If the notebook is part of a business account and has been shared with the entire
     *   business, this will contain sharing information. The presence or absence of this field
     *   is not a reliable test of whether a given notebook is in fact a business notebook - the
     *   field is only used when a notebook is or has been shared with the entire business.
     *   </dd>
     * 
     * <dt>contact</dt>
     *   <dd>Intended for use with Business accounts, this field identifies the user who
     *   has been designated as the "contact".  For notebooks created in business
     *   accounts, the server will automatically set this value to the user who created
     *   the notebook unless Notebook.contact.username has been set, in which that value
     *   will be used.  When updating a notebook, it is common to leave Notebook.contact
     *   field unset, indicating that no change to the value is being requested and that
     *   the existing value, if any, should be preserved.
     *   </dd>
     * 
     * <dt>recipientSettings</dt>
     *   <dd>This represents the preferences/settings that a recipient has set for this
     *   notebook. These are intended to be changed only by the recipient, and each
     *   recipient has their own recipient settings.
     *   </dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function getDefaultNotebook($authenticationToken);
    /**
     * Asks the service to make a notebook with the provided name.
     * 
     * @param notebook
     *   The desired fields for the notebook must be provided on this
     *   object.  The name of the notebook must be set, and either the 'active'
     *   or 'defaultNotebook' fields may be set by the client at creation.
     *   If a notebook exists in the account with the same name (via
     *   case-insensitive compare), this will throw an EDAMUserException.
     * 
     * @return
     *   The newly created Notebook.  The server-side GUID will be
     *   saved in this object's 'guid' field.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Notebook.name" - invalid length or pattern</li>
     *   <li> BAD_DATA_FORMAT "Notebook.stack" - invalid length or pattern</li>
     *   <li> BAD_DATA_FORMAT "Publishing.uri" - if publishing set but bad uri</li>
     *   <li> BAD_DATA_FORMAT "Publishing.publicDescription" - if too long</li>
     *   <li> DATA_CONFLICT "Notebook.name" - name already in use</li>
     *   <li> DATA_CONFLICT "Publishing.uri" - if URI already in use</li>
     *   <li> DATA_REQUIRED "Publishing.uri" - if publishing set but uri missing</li>
     *   <li> DATA_REQUIRED "Notebook" - notebook parameter was null</li>
     *   <li> PERMISSION_DENIED "Notebook.defaultNotebook" - if the 'defaultNotebook' field
     *        is set to 'true' for a Notebook that is not owned by the user identified by
     *        the passed authenticationToken.</li>
     *   <li> LIMIT_REACHED "Notebook" - at max number of notebooks</li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Workspace.guid" - if workspaceGuid set and no Workspace exists for the GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\Types\Notebook $notebook
     * @return \EDAM\Types\Notebook A unique container for a set of notes.
     * <dl>
     * <dt>guid</dt>
     *   <dd>The unique identifier of this notebook.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>name</dt>
     *   <dd>A sequence of characters representing the name of the
     *   notebook.  May be changed by clients, but the account may not contain two
     *   notebooks with names that are equal via a case-insensitive comparison.
     *   Can't begin or end with a space.
     *   <br/>
     *   Length:  EDAM_NOTEBOOK_NAME_LEN_MIN - EDAM_NOTEBOOK_NAME_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_NOTEBOOK_NAME_REGEX
     *   </dd>
     * 
     * <dt>updateSequenceNum</dt>
     *   <dd>A number identifying the last transaction to
     *   modify the state of this object.  The USN values are sequential within an
     *   account, and can be used to compare the order of modifications within the
     *   service.
     *   </dd>
     * 
     * <dt>defaultNotebook</dt>
     *   <dd>If true, this notebook should be used for new notes
     *   whenever the user has not (or cannot) specify a desired target notebook.
     *   For example, if a note is submitted via SMTP email.
     *   The service will maintain at most one defaultNotebook per account.
     *   If a second notebook is created or updated with defaultNotebook set to
     *   true, the service will automatically update the prior notebook's
     *   defaultNotebook field to false.  If the default notebook is deleted
     *   (i.e. "active" set to false), the "defaultNotebook" field will be
     *   set to false by the service.  If the account has no default notebook
     *   set, the service will use the most recent notebook as the default.
     *   </dd>
     * 
     * <dt>serviceCreated</dt>
     *   <dd>The time when this notebook was created on the
     *   service. This will be set on the service during creation, and the service
     *   will provide this value when it returns a Notebook to a client.
     *   The service will ignore this value if it is sent by clients.
     *   </dd>
     * 
     * <dt>serviceUpdated</dt>
     *   <dd>The time when this notebook was last modified on the
     *   service.  This will be set on the service during creation, and the service
     *   will provide this value when it returns a Notebook to a client.
     *   The service will ignore this value if it is sent by clients.
     *   </dd>
     * 
     * <dt>publishing</dt>
     *   <dd>If the Notebook has been opened for public access, then this will point to the set of
     *   publishing information for the Notebook (URI, description, etc.). A Notebook cannot be
     *   published without providing this information, but it will persist for later use if publishing
     *   is ever disabled on the Notebook. Clients that do not wish to change the publishing behavior
     *   of a Notebook should not set this value when calling NoteStore.updateNotebook().
     *   Note that this structure is never populated for business notebooks, see the businessNotebook
     *   field.
     *   </dd>
     * 
     * <dt>published</dt>
     *   <dd>If this is set to true, then the Notebook will be
     *   accessible either to the public, or for business users to their business,
     *   via the 'publishing' or 'businessNotebook' specifications, which must also be set. If this is
     *   set to false, the Notebook will not be available to the public (or business).
     *   Clients that do not wish to change the publishing behavior of a Notebook
     *   should not set this value when calling NoteStore.updateNotebook().
     *   </dd>
     * 
     * <dt>stack</dt>
     *   <dd>If this is set, then the notebook is visually contained within a stack
     *   of notebooks with this name.  All notebooks in the same account with the
     *   same 'stack' field are considered to be in the same stack.
     *   Notebooks with no stack set are "top level" and not contained within a
     *   stack.
     *   </dd>
     * 
     * <dt>sharedNotebookIds</dt>
     *   <dd><i>DEPRECATED</i> - replaced by sharedNotebooks.</dd>
     * 
     * <dt>sharedNotebooks</dt>
     *   <dd>The list of recipients to whom this notebook has been shared
     *   (one SharedNotebook object per recipient email address). This field will
     *   be unset if you do not have permission to access this data. If you are
     *   accessing the notebook as the owner or via a shared notebook that is
     *   modifiable, then you have access to this data and the value will be set.
     *   This field is read-only. Clients may not make changes to shared notebooks
     *   via this field.
     *   </dd>
     * 
     * <dt>businessNotebook</dt>
     *   <dd>If the notebook is part of a business account and has been shared with the entire
     *   business, this will contain sharing information. The presence or absence of this field
     *   is not a reliable test of whether a given notebook is in fact a business notebook - the
     *   field is only used when a notebook is or has been shared with the entire business.
     *   </dd>
     * 
     * <dt>contact</dt>
     *   <dd>Intended for use with Business accounts, this field identifies the user who
     *   has been designated as the "contact".  For notebooks created in business
     *   accounts, the server will automatically set this value to the user who created
     *   the notebook unless Notebook.contact.username has been set, in which that value
     *   will be used.  When updating a notebook, it is common to leave Notebook.contact
     *   field unset, indicating that no change to the value is being requested and that
     *   the existing value, if any, should be preserved.
     *   </dd>
     * 
     * <dt>recipientSettings</dt>
     *   <dd>This represents the preferences/settings that a recipient has set for this
     *   notebook. These are intended to be changed only by the recipient, and each
     *   recipient has their own recipient settings.
     *   </dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function createNotebook($authenticationToken, \EDAM\Types\Notebook $notebook);
    /**
     * Submits notebook changes to the service. The provided data must include the
     * notebook's guid field for identification.
     * <p />
     * The Notebook will be moved to the specified Workspace, if a non empty
     * Notebook.workspaceGuid is provided. If an empty Notebook.workspaceGuid is set and the
     * Notebook is in a Workspace, then it will be removed from the Workspace and a full
     * access SharedNotebook record will be ensured for the caller. If the caller does not
     * already have a full access share, either the privilege of an existing share will be
     * upgraded or a new share will be created. It is illegal to set a
     * Notebook.workspaceGuid on a Workspace backing Notebook.
     * 
     * @param notebook
     *   The notebook object containing the requested changes.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Notebook.name" - invalid length or pattern</li>
     *   <li> BAD_DATA_FORMAT "Notebook.stack" - invalid length or pattern</li>
     *   <li> BAD_DATA_FORMAT "Publishing.uri" - if publishing set but bad uri</li>
     *   <li> BAD_DATA_FORMAT "Publishing.publicDescription" - if too long</li>
     *   <li> DATA_CONFLICT "Notebook.name" - name already in use</li>
     *   <li> DATA_CONFLICT "Publishing.uri" - if URI already in use</li>
     *   <li> DATA_REQUIRED "Publishing.uri" - if publishing set but uri missing</li>
     *   <li> DATA_REQUIRED "Notebook" - notebook parameter was null</li>
     *   <li> PERMISSION_DENIED "Notebook.defaultNotebook" - if the 'defaultNotebook' field
     *        is set to 'true' for a Notebook that is not owned by the user identified by
     *        the passed authenticationToken.</li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Notebook.guid" - not found, by GUID</li>
     *   <li> "Workspace.guid" - if a non empty workspaceGuid set and no Workspace exists
     *        for the GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\Types\Notebook $notebook
     * @return int
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function updateNotebook($authenticationToken, \EDAM\Types\Notebook $notebook);
    /**
     * Permanently removes the notebook from the user's account.
     * After this action, the notebook is no longer available for undeletion, etc.
     * If the notebook contains any Notes, they will be moved to the current
     * default notebook and moved into the trash (i.e. Note.active=false).
     * <p/>
     * NOTE: This function is generally not available to third party applications.
     * Calls will result in an EDAMUserException with the error code
     * PERMISSION_DENIED.
     * 
     * @param guid
     *   The GUID of the notebook to delete.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Notebook.guid" - if the parameter is missing
     *   </li>
     *   <li> LIMIT_REACHED "Notebook" - trying to expunge the last Notebook
     *   </li>
     *   <li> PERMISSION_DENIED "Notebook" - private notebook, user doesn't own
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return int
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function expungeNotebook($authenticationToken, $guid);
    /**
     * Returns a list of the tags in the account.  Evernote does not support
     * the undeletion of tags, so this will only include active tags.
     * 
     * @param string $authenticationToken
     * @return \EDAM\Types\Tag[]
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function listTags($authenticationToken);
    /**
     * Returns a list of the tags that are applied to at least one note within
     * the provided notebook.  If the notebook is public, the authenticationToken
     * may be ignored.
     * 
     * @param notebookGuid
     *    the GUID of the notebook to use to find tags
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Notebook.guid" - notebook not found by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $notebookGuid
     * @return \EDAM\Types\Tag[]
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function listTagsByNotebook($authenticationToken, $notebookGuid);
    /**
     * Returns the current state of the Tag with the provided GUID.
     * 
     * @param guid
     *   The GUID of the tag to be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Tag.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Tag" - private Tag, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Tag.guid" - tag not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return \EDAM\Types\Tag  A tag within a user's account is a unique name which may be organized
     *  a simple hierarchy.
     * <dl>
     *  <dt>guid</dt>
     *    <dd>The unique identifier of this tag. Will be set by the service,
     *    so may be omitted by the client when creating the Tag.
     *    <br/>
     *    Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *    <br/>
     *    Regex:  EDAM_GUID_REGEX
     *    </dd>
     * 
     *  <dt>name</dt>
     *    <dd>A sequence of characters representing the tag's identifier.
     *    Case is preserved, but is ignored for comparisons.
     *    This means that an account may only have one tag with a given name, via
     *    case-insensitive comparison, so an account may not have both "food" and
     *    "Food" tags.
     *    May not contain a comma (','), and may not begin or end with a space.
     *    <br/>
     *    Length:  EDAM_TAG_NAME_LEN_MIN - EDAM_TAG_NAME_LEN_MAX
     *    <br/>
     *    Regex:  EDAM_TAG_NAME_REGEX
     *    </dd>
     * 
     *  <dt>parentGuid</dt>
     *    <dd>If this is set, then this is the GUID of the tag that
     *    holds this tag within the tag organizational hierarchy.  If this is
     *    not set, then the tag has no parent and it is a "top level" tag.
     *    Cycles are not allowed (e.g. a->parent->parent == a) and will be
     *    rejected by the service.
     *    <br/>
     *    Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *    <br/>
     *    Regex:  EDAM_GUID_REGEX
     *    </dd>
     * 
     *  <dt>updateSequenceNum</dt>
     *    <dd>A number identifying the last transaction to
     *    modify the state of this object.  The USN values are sequential within an
     *    account, and can be used to compare the order of modifications within the
     *    service.
     *    </dd>
     *  </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getTag($authenticationToken, $guid);
    /**
     * Asks the service to make a tag with a set of information.
     * 
     * @param tag
     *   The desired list of fields for the tag are specified in this
     *   object.  The caller must specify the tag name, and may provide
     *   the parentGUID.
     * 
     * @return
     *   The newly created Tag.  The server-side GUID will be
     *   saved in this object.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Tag.name" - invalid length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "Tag.parentGuid" - malformed GUID
     *   </li>
     *   <li> DATA_CONFLICT "Tag.name" - name already in use
     *   </li>
     *   <li> LIMIT_REACHED "Tag" - at max number of tags
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Tag.parentGuid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\Types\Tag $tag
     * @return \EDAM\Types\Tag  A tag within a user's account is a unique name which may be organized
     *  a simple hierarchy.
     * <dl>
     *  <dt>guid</dt>
     *    <dd>The unique identifier of this tag. Will be set by the service,
     *    so may be omitted by the client when creating the Tag.
     *    <br/>
     *    Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *    <br/>
     *    Regex:  EDAM_GUID_REGEX
     *    </dd>
     * 
     *  <dt>name</dt>
     *    <dd>A sequence of characters representing the tag's identifier.
     *    Case is preserved, but is ignored for comparisons.
     *    This means that an account may only have one tag with a given name, via
     *    case-insensitive comparison, so an account may not have both "food" and
     *    "Food" tags.
     *    May not contain a comma (','), and may not begin or end with a space.
     *    <br/>
     *    Length:  EDAM_TAG_NAME_LEN_MIN - EDAM_TAG_NAME_LEN_MAX
     *    <br/>
     *    Regex:  EDAM_TAG_NAME_REGEX
     *    </dd>
     * 
     *  <dt>parentGuid</dt>
     *    <dd>If this is set, then this is the GUID of the tag that
     *    holds this tag within the tag organizational hierarchy.  If this is
     *    not set, then the tag has no parent and it is a "top level" tag.
     *    Cycles are not allowed (e.g. a->parent->parent == a) and will be
     *    rejected by the service.
     *    <br/>
     *    Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *    <br/>
     *    Regex:  EDAM_GUID_REGEX
     *    </dd>
     * 
     *  <dt>updateSequenceNum</dt>
     *    <dd>A number identifying the last transaction to
     *    modify the state of this object.  The USN values are sequential within an
     *    account, and can be used to compare the order of modifications within the
     *    service.
     *    </dd>
     *  </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function createTag($authenticationToken, \EDAM\Types\Tag $tag);
    /**
     * Submits tag changes to the service.  The provided data must include
     * the tag's guid field for identification.  The service will apply
     * updates to the following tag fields:  name, parentGuid
     * 
     * @param tag
     *   The tag object containing the requested changes.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Tag.name" - invalid length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "Tag.parentGuid" - malformed GUID
     *   </li>
     *   <li> DATA_CONFLICT "Tag.name" - name already in use
     *   </li>
     *   <li> DATA_CONFLICT "Tag.parentGuid" - can't set parent: circular
     *   </li>
     *   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Tag.guid" - tag not found, by GUID
     *   </li>
     *   <li> "Tag.parentGuid" - parent not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\Types\Tag $tag
     * @return int
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function updateTag($authenticationToken, \EDAM\Types\Tag $tag);
    /**
     * Removes the provided tag from every note that is currently tagged with
     * this tag.  If this operation is successful, the tag will still be in
     * the account, but it will not be tagged on any notes.
     * 
     * This function is not indended for use by full synchronizing clients, since
     * it does not provide enough result information to the client to reconcile
     * the local state without performing a follow-up sync from the service.  This
     * is intended for "thin clients" that need to efficiently support this as
     * a UI operation.
     * 
     * @param guid
     *   The GUID of the tag to remove from all notes.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Tag.guid" - if the guid parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Tag.guid" - tag not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function untagAll($authenticationToken, $guid);
    /**
     * Permanently deletes the tag with the provided GUID, if present.
     * <p/>
     * NOTE: This function is not generally available to third party applications.
     * Calls will result in an EDAMUserException with the error code
     * PERMISSION_DENIED.
     * 
     * @param guid
     *   The GUID of the tag to delete.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Tag.guid" - if the guid parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Tag.guid" - tag not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return int
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function expungeTag($authenticationToken, $guid);
    /**
     * Returns a list of the searches in the account.  Evernote does not support
     * the undeletion of searches, so this will only include active searches.
     * 
     * @param string $authenticationToken
     * @return \EDAM\Types\SavedSearch[]
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function listSearches($authenticationToken);
    /**
     * Returns the current state of the search with the provided GUID.
     * 
     * @param guid
     *   The GUID of the search to be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "SavedSearch.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "SavedSearch" - private Tag, user doesn't own
     *   </li>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "SavedSearch.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return \EDAM\Types\SavedSearch A named search associated with the account that can be quickly re-used.
     * <dl>
     * <dt>guid</dt>
     *   <dd>The unique identifier of this search.  Will be set by the
     *   service, so may be omitted by the client when creating.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>name</dt>
     *   <dd>The name of the saved search to display in the GUI.  The
     *   account may only contain one search with a given name (case-insensitive
     *   compare). Can't begin or end with a space.
     *   <br/>
     *   Length:  EDAM_SAVED_SEARCH_NAME_LEN_MIN - EDAM_SAVED_SEARCH_NAME_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_SAVED_SEARCH_NAME_REGEX
     *   </dd>
     * 
     * <dt>query</dt>
     *   <dd>A string expressing the search to be performed.
     *   <br/>
     *   Length:  EDAM_SAVED_SEARCH_QUERY_LEN_MIN - EDAM_SAVED_SEARCH_QUERY_LEN_MAX
     *   </dd>
     * 
     * <dt>format</dt>
     *   <dd>The format of the query string, to determine how to parse
     *   and process it.
     *   </dd>
     * 
     * <dt>updateSequenceNum</dt>
     *   <dd>A number identifying the last transaction to
     *   modify the state of this object.  The USN values are sequential within an
     *   account, and can be used to compare the order of modifications within the
     *   service.
     *   </dd>
     * 
     * <dt>scope</dt>
     *   <dd><p>Specifies the set of notes that should be included in the search, if
     *    possible.</p>
     *    <p>Clients are expected to search as much of the desired scope as possible,
     *    with the understanding that a given client may not be able to cover the full
     *    specified scope. For example, when executing a search that includes notes in both
     *    the owner's account and business notebooks, a mobile client may choose to only
     *    search within the user's account because it is not capable of searching both
     *    scopes simultaneously. When a search across multiple scopes is not possible,
     *    a client may choose which scope to search based on the current application
     *    context. If a client cannot search any of the desired scopes, it should refuse
     *    to execute the search.</p>
     *    </dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getSearch($authenticationToken, $guid);
    /**
     * Asks the service to make a saved search with a set of information.
     * 
     * @param search
     *   The desired list of fields for the search are specified in this
     *   object. The caller must specify the name and query for the
     *   search, and may optionally specify a search scope.
     *   The SavedSearch.format field is ignored by the service.
     * 
     * @return
     *   The newly created SavedSearch.  The server-side GUID will be
     *   saved in this object.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "SavedSearch.name" - invalid length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "SavedSearch.query" - invalid length
     *   </li>
     *   <li> DATA_CONFLICT "SavedSearch.name" - name already in use
     *   </li>
     *   <li> LIMIT_REACHED "SavedSearch" - at max number of searches
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\Types\SavedSearch $search
     * @return \EDAM\Types\SavedSearch A named search associated with the account that can be quickly re-used.
     * <dl>
     * <dt>guid</dt>
     *   <dd>The unique identifier of this search.  Will be set by the
     *   service, so may be omitted by the client when creating.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>name</dt>
     *   <dd>The name of the saved search to display in the GUI.  The
     *   account may only contain one search with a given name (case-insensitive
     *   compare). Can't begin or end with a space.
     *   <br/>
     *   Length:  EDAM_SAVED_SEARCH_NAME_LEN_MIN - EDAM_SAVED_SEARCH_NAME_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_SAVED_SEARCH_NAME_REGEX
     *   </dd>
     * 
     * <dt>query</dt>
     *   <dd>A string expressing the search to be performed.
     *   <br/>
     *   Length:  EDAM_SAVED_SEARCH_QUERY_LEN_MIN - EDAM_SAVED_SEARCH_QUERY_LEN_MAX
     *   </dd>
     * 
     * <dt>format</dt>
     *   <dd>The format of the query string, to determine how to parse
     *   and process it.
     *   </dd>
     * 
     * <dt>updateSequenceNum</dt>
     *   <dd>A number identifying the last transaction to
     *   modify the state of this object.  The USN values are sequential within an
     *   account, and can be used to compare the order of modifications within the
     *   service.
     *   </dd>
     * 
     * <dt>scope</dt>
     *   <dd><p>Specifies the set of notes that should be included in the search, if
     *    possible.</p>
     *    <p>Clients are expected to search as much of the desired scope as possible,
     *    with the understanding that a given client may not be able to cover the full
     *    specified scope. For example, when executing a search that includes notes in both
     *    the owner's account and business notebooks, a mobile client may choose to only
     *    search within the user's account because it is not capable of searching both
     *    scopes simultaneously. When a search across multiple scopes is not possible,
     *    a client may choose which scope to search based on the current application
     *    context. If a client cannot search any of the desired scopes, it should refuse
     *    to execute the search.</p>
     *    </dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function createSearch($authenticationToken, \EDAM\Types\SavedSearch $search);
    /**
     * Submits search changes to the service. The provided data must include
     * the search's guid field for identification. The service will apply
     * updates to the following search fields: name, query, and scope.
     * 
     * @param search
     *   The search object containing the requested changes.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "SavedSearch.name" - invalid length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "SavedSearch.query" - invalid length
     *   </li>
     *   <li> DATA_CONFLICT "SavedSearch.name" - name already in use
     *   </li>
     *   <li> PERMISSION_DENIED "SavedSearch" - user doesn't own tag
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "SavedSearch.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\Types\SavedSearch $search
     * @return int
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function updateSearch($authenticationToken, \EDAM\Types\SavedSearch $search);
    /**
     * Permanently deletes the saved search with the provided GUID, if present.
     * <p/>
     * NOTE: This function is generally not available to third party applications.
     * Calls will result in an EDAMUserException with the error code
     * PERMISSION_DENIED.
     * 
     * @param guid
     *   The GUID of the search to delete.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "SavedSearch.guid" - if the guid parameter is empty
     *   </li>
     *   <li> PERMISSION_DENIED "SavedSearch" - user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "SavedSearch.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return int
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function expungeSearch($authenticationToken, $guid);
    /**
     * Finds the position of a note within a sorted subset of all of the user's
     * notes. This may be useful for thin clients that are displaying a paginated
     * listing of a large account, which need to know where a particular note
     * sits in the list without retrieving all notes first.
     * 
     * @param authenticationToken
     *   Must be a valid token for the user's account unless the NoteFilter
     *   'notebookGuid' is the GUID of a public notebook.
     * 
     * @param filter
     *   The list of criteria that will constrain the notes to be returned.
     * 
     * @param guid
     *   The GUID of the note to be retrieved.
     * 
     * @return
     *   If the note with the provided GUID is found within the matching note
     *   list, this will return the offset of that note within that list (where
     *   the first offset is 0).  If the note is not found within the set of
     *   notes, this will return -1.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "offset" - not between 0 and EDAM_USER_NOTES_MAX
     *   </li>
     *   <li> BAD_DATA_FORMAT "maxNotes" - not between 0 and EDAM_USER_NOTES_MAX
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
     *   </li>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Notebook.guid" - not found, by GUID
     *   </li>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\NoteStore\NoteFilter $filter
     * @param string $guid
     * @return int
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function findNoteOffset($authenticationToken, \EDAM\NoteStore\NoteFilter $filter, $guid);
    /**
     * Used to find the high-level information about a set of the notes from a
     * user's account based on various criteria specified via a NoteFilter object.
     * <p/>
     * Web applications that wish to periodically check for new content in a user's
     * Evernote account should consider using webhooks instead of polling this API.
     * See http://dev.evernote.com/documentation/cloud/chapters/polling_notification.php
     * for more information.
     * 
     * @param authenticationToken
     *   Must be a valid token for the user's account unless the NoteFilter
     *   'notebookGuid' is the GUID of a public notebook.
     * 
     * @param filter
     *   The list of criteria that will constrain the notes to be returned.
     * 
     * @param offset
     *   The numeric index of the first note to show within the sorted
     *   results.  The numbering scheme starts with "0".  This can be used for
     *   pagination.
     * 
     * @param maxNotes
     *   The maximum notes to return in this query.  The service will return a set
     *   of notes that is no larger than this number, but may return fewer notes
     *   if needed.  The NoteList.totalNotes field in the return value will
     *   indicate whether there are more values available after the returned set.
     *   Currently, the service will not return more than 250 notes in a single request,
     *   but this number may change in the future.
     * 
     * @param resultSpec
     *   This specifies which information should be returned for each matching
     *   Note. The fields on this structure can be used to eliminate data that
     *   the client doesn't need, which will reduce the time and bandwidth
     *   to receive and process the reply.
     * 
     * @return
     *   The list of notes that match the criteria.
     *   The Notes.sharedNotes field will not be set.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "offset" - not between 0 and EDAM_USER_NOTES_MAX
     *   </li>
     *   <li> BAD_DATA_FORMAT "maxNotes" - not between 0 and EDAM_USER_NOTES_MAX
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Notebook.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\NoteStore\NoteFilter $filter
     * @param int $offset
     * @param int $maxNotes
     * @param \EDAM\NoteStore\NotesMetadataResultSpec $resultSpec
     * @return \EDAM\NoteStore\NotesMetadataList  This structure is returned from calls to the findNotesMetadata function to
     *  give the high-level metadata about a subset of Notes that are found to
     *  match a specified NoteFilter in a search.
     * 
     * <dl>
     *  <dt>startIndex</dt>
     *    <dd>
     *    The starting index within the overall set of notes.  This
     *    is also the number of notes that are "before" this list in the set.
     *    </dd>
     * 
     *  <dt>totalNotes</dt>
     *    <dd>
     *    The number of notes in the larger set.  This can be used
     *    to calculate how many notes are "after" this note in the set.
     *    (I.e.  remaining = totalNotes - (startIndex + notes.length)  )
     *    </dd>
     * 
     *  <dt>notes</dt>
     *    <dd>
     *    The list of metadata for Notes in this range.  The set of optional fields
     *    that are set in each metadata structure will depend on the
     *    NotesMetadataResultSpec provided by the caller when the search was
     *    performed.  Only the 'guid' field will be guaranteed to be set in each
     *    Note.
     *    </dd>
     * 
     *  <dt>stoppedWords</dt>
     *    <dd>
     *    If the NoteList was produced using a text based search
     *    query that included words that are not indexed or searched by the service,
     *    this will include a list of those ignored words.
     *    </dd>
     * 
     *  <dt>searchedWords</dt>
     *    <dd>
     *    If the NoteList was produced using a text based search
     *    query that included viable search words or quoted expressions, this will
     *    include a list of those words.  Any stopped words will not be included
     *    in this list.
     *    </dd>
     * 
     *  <dt>updateCount</dt>
     *    <dd>
     *    Indicates the total number of transactions that have
     *    been committed within the account.  This reflects (for example) the
     *    number of discrete additions or modifications that have been made to
     *    the data in this account (tags, notes, resources, etc.).
     *    This number is the "high water mark" for Update Sequence Numbers (USN)
     *    within the account.
     *    </dd>
     * 
     *  <dt>searchContextBytes</dt>
     *    <dd>
     *    Specifies the correlating information about the current search session, in byte array.
     *    </dd>
     * 
     *  <dt>debugInfo</dt>
     *    <dd>
     *    Depends on the value of <code>context</code> in NoteFilter, this field
     *    may contain debug information if the service decides to do so.
     *    </dd>
     * 
     *  </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function findNotesMetadata($authenticationToken, \EDAM\NoteStore\NoteFilter $filter, $offset, $maxNotes, \EDAM\NoteStore\NotesMetadataResultSpec $resultSpec);
    /**
     * This function is used to determine how many notes are found for each
     * notebook and tag in the user's account, given a current set of filter
     * parameters that determine the current selection.  This function will
     * return a structure that gives the note count for each notebook and tag
     * that has at least one note under the requested filter.  Any notebook or
     * tag that has zero notes in the filtered set will not be listed in the
     * reply to this function (so they can be assumed to be 0).
     * 
     * @param authenticationToken
     *   Must be a valid token for the user's account unless the NoteFilter
     *   'notebookGuid' is the GUID of a public notebook.
     * 
     * @param filter
     *   The note selection filter that is currently being applied.  The note
     *   counts are to be calculated with this filter applied to the total set
     *   of notes in the user's account.
     * 
     * @param withTrash
     *   If true, then the NoteCollectionCounts.trashCount will be calculated
     *   and supplied in the reply. Otherwise, the trash value will be omitted.
     * 
     * @throws EDAMUserException <ul>
     *   <li>BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed</li>
     *   <li>BAD_DATA_FORMAT "NoteFilter.notebookGuids" - if any are malformed</li>
     *   <li>BAD_DATA_FORMAT "NoteFilter.words" - if search string too long</li>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Notebook.guid" - not found, by GUID</li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\NoteStore\NoteFilter $filter
     * @param bool $withTrash
     * @return \EDAM\NoteStore\NoteCollectionCounts  A data structure representing the number of notes for each notebook
     *  and tag with a non-zero set of applicable notes.
     * 
     * <dl>
     *  <dt>notebookCounts</dt>
     *    <dd>
     *    A mapping from the Notebook GUID to the number of
     *    notes (from some selection) that are in the corresponding notebook.
     *    </dd>
     * 
     *  <dt>tagCounts</dt>
     *    <dd>
     *    A mapping from the Tag GUID to the number of notes (from some
     *    selection) that have the corresponding tag.
     *    </dd>
     * 
     *  <dt>trashCount</dt>
     *    <dd>
     *    If this is set, then this is the number of notes that are in the trash.
     *    If this is not set, then the number of notes in the trash hasn't been
     *    reported.  (I.e. if there are no notes in the trash, this will be set
     *    to 0.)
     *    </dd>
     *  </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function findNoteCounts($authenticationToken, \EDAM\NoteStore\NoteFilter $filter, $withTrash);
    /**
     * Returns the current state of the note in the service with the provided
     * GUID.  The ENML contents of the note will only be provided if the
     * 'withContent' parameter is true.  The service will include the meta-data
     * for each resource in the note, but the binary content depends
     * on whether it is explicitly requested in resultSpec parameter.
     * If the Note is found in a public notebook, the authenticationToken
     * will be ignored (so it could be an empty string).  The applicationData
     * fields are returned as keysOnly.
     * 
     * @param authenticationToken
     *   An authentication token that grants the caller access to the requested note.
     * 
     * @param guid
     *   The GUID of the note to be retrieved.
     * 
     * @param resultSpec
     *   A structure specifying the fields of the note that the caller would like to get.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @param \EDAM\NoteStore\NoteResultSpec $resultSpec
     * @return \EDAM\Types\Note Represents a single note in the user's account.
     * 
     * <dl>
     * <dt>guid</dt>
     *   <dd>The unique identifier of this note.  Will be set by the
     *   server, but will be omitted by clients calling NoteStore.createNote()
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>title</dt>
     *   <dd>The subject of the note.  Can't begin or end with a space.
     *   <br/>
     *   Length:  EDAM_NOTE_TITLE_LEN_MIN - EDAM_NOTE_TITLE_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_NOTE_TITLE_REGEX
     *   </dd>
     * 
     * <dt>content</dt>
     *   <dd>The XHTML block that makes up the note.  This is
     *   the canonical form of the note's contents, so will include abstract
     *   Evernote tags for internal resource references.  A client may create
     *   a separate transformed version of this content for internal presentation,
     *   but the same canonical bytes should be used for transmission and
     *   comparison unless the user chooses to modify their content.
     *   <br/>
     *   Length:  EDAM_NOTE_CONTENT_LEN_MIN - EDAM_NOTE_CONTENT_LEN_MAX
     *   </dd>
     * 
     * <dt>contentHash</dt>
     *   <dd>The binary MD5 checksum of the UTF-8 encoded content
     *   body. This will always be set by the server, but clients may choose to omit
     *   this when they submit a note with content.
     *   <br/>
     *   Length:  EDAM_HASH_LEN (exactly)
     *   </dd>
     * 
     * <dt>contentLength</dt>
     *   <dd>The number of Unicode characters in the content of
     *   the note.  This will always be set by the service, but clients may choose
     *   to omit this value when they submit a Note.
     *   </dd>
     * 
     * <dt>created</dt>
     *   <dd>The date and time when the note was created in one of the
     *   clients.  In most cases, this will match the user's sense of when
     *   the note was created, and ordering between notes will be based on
     *   ordering of this field.  However, this is not a "reliable" timestamp
     *   if a client has an incorrect clock, so it cannot provide a true absolute
     *   ordering between notes.  Notes created directly through the service
     *   (e.g. via the web GUI) will have an absolutely ordered "created" value.
     *   </dd>
     * 
     * <dt>updated</dt>
     *   <dd>The date and time when the note was last modified in one of
     *   the clients.  In most cases, this will match the user's sense of when
     *   the note was modified, but this field may not be absolutely reliable
     *   due to the possibility of client clock errors.
     *   </dd>
     * 
     * <dt>deleted</dt>
     *   <dd>If present, the note is considered "deleted", and this
     *   stores the date and time when the note was deleted by one of the clients.
     *   In most cases, this will match the user's sense of when the note was
     *   deleted, but this field may be unreliable due to the possibility of
     *   client clock errors.
     *   </dd>
     * 
     * <dt>active</dt>
     *   <dd>If the note is available for normal actions and viewing,
     *   this flag will be set to true.
     *   </dd>
     * 
     * <dt>updateSequenceNum</dt>
     *   <dd>A number identifying the last transaction to
     *   modify the state of this note (including changes to the note's attributes
     *   or resources).  The USN values are sequential within an account,
     *   and can be used to compare the order of modifications within the service.
     *   </dd>
     * 
     * <dt>notebookGuid</dt>
     *   <dd>The unique identifier of the notebook that contains
     *   this note.  If no notebookGuid is provided on a call to createNote(), the
     *   default notebook will be used instead.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>tagGuids</dt>
     *   <dd>A list of the GUID identifiers for tags that are applied to this note.
     *   This may be provided in a call to createNote() to unambiguously declare
     *   the tags that should be assigned to the new note.  Alternately, clients
     *   may pass the names of desired tags via the 'tagNames' field during
     *   note creation.
     *   If the list of tags are omitted on a call to createNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   Maximum:  EDAM_NOTE_TAGS_MAX tags per note
     *   </dd>
     * 
     * <dt>resources</dt>
     *   <dd>The list of resources that are embedded within this note.
     *   If the list of resources are omitted on a call to updateNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   The binary contents of the resources must be provided when the resource
     *   is first sent to the service, but it will be omitted by the service when
     *   the Note is returned in the future.
     *   Maximum:  EDAM_NOTE_RESOURCES_MAX resources per note
     *   </dd>
     * 
     * <dt>attributes</dt>
     *   <dd>A list of the attributes for this note.
     *   If the list of attributes are omitted on a call to updateNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   </dd>
     * 
     * <dt>tagNames</dt>
     *   <dd>May be provided by clients during calls to createNote() as an
     *   alternative to providing the tagGuids of existing tags.  If any tagNames
     *   are provided during createNote(), these will be found, or created if they
     *   don't already exist.  Created tags will have no parent (they will be at
     *   the top level of the tag panel).
     *   </dd>
     * 
     * <dt>sharedNotes</dt>
     *   <dd>The list of recipients with whom this note has been shared. This field will be unset if
     *     the caller has access to the note via the containing notebook, but does not have activity
     *     feed permission for that notebook. This field is read-only. Clients may not make changes to
     *     a note's sharing state via this field.
     *   </dd>
     * 
     *   <dt>restrictions</dt>
     *   <dd>If this field is set, the user has note-level permissions that may differ from their
     *     notebook-level permissions. In this case, the restrictions structure specifies
     *     a set of restrictions limiting the actions that a user may take on the note based
     *     on their note-level permissions. If this field is unset, then there are no
     *     note-specific restrictions. However, a client may still be limited based on the user's
     *     notebook permissions.</dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getNoteWithResultSpec($authenticationToken, $guid, \EDAM\NoteStore\NoteResultSpec $resultSpec);
    /**
     * DEPRECATED. See getNoteWithResultSpec.
     * 
     * This function is equivalent to getNoteWithResultSpec, with each of the boolean parameters
     * mapping to the equivalent field of a NoteResultSpec. The Note.sharedNotes field is never
     * populated on the returned note. To get a note with its shares, use getNoteWithResultSpec.
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @param bool $withContent
     * @param bool $withResourcesData
     * @param bool $withResourcesRecognition
     * @param bool $withResourcesAlternateData
     * @return \EDAM\Types\Note Represents a single note in the user's account.
     * 
     * <dl>
     * <dt>guid</dt>
     *   <dd>The unique identifier of this note.  Will be set by the
     *   server, but will be omitted by clients calling NoteStore.createNote()
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>title</dt>
     *   <dd>The subject of the note.  Can't begin or end with a space.
     *   <br/>
     *   Length:  EDAM_NOTE_TITLE_LEN_MIN - EDAM_NOTE_TITLE_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_NOTE_TITLE_REGEX
     *   </dd>
     * 
     * <dt>content</dt>
     *   <dd>The XHTML block that makes up the note.  This is
     *   the canonical form of the note's contents, so will include abstract
     *   Evernote tags for internal resource references.  A client may create
     *   a separate transformed version of this content for internal presentation,
     *   but the same canonical bytes should be used for transmission and
     *   comparison unless the user chooses to modify their content.
     *   <br/>
     *   Length:  EDAM_NOTE_CONTENT_LEN_MIN - EDAM_NOTE_CONTENT_LEN_MAX
     *   </dd>
     * 
     * <dt>contentHash</dt>
     *   <dd>The binary MD5 checksum of the UTF-8 encoded content
     *   body. This will always be set by the server, but clients may choose to omit
     *   this when they submit a note with content.
     *   <br/>
     *   Length:  EDAM_HASH_LEN (exactly)
     *   </dd>
     * 
     * <dt>contentLength</dt>
     *   <dd>The number of Unicode characters in the content of
     *   the note.  This will always be set by the service, but clients may choose
     *   to omit this value when they submit a Note.
     *   </dd>
     * 
     * <dt>created</dt>
     *   <dd>The date and time when the note was created in one of the
     *   clients.  In most cases, this will match the user's sense of when
     *   the note was created, and ordering between notes will be based on
     *   ordering of this field.  However, this is not a "reliable" timestamp
     *   if a client has an incorrect clock, so it cannot provide a true absolute
     *   ordering between notes.  Notes created directly through the service
     *   (e.g. via the web GUI) will have an absolutely ordered "created" value.
     *   </dd>
     * 
     * <dt>updated</dt>
     *   <dd>The date and time when the note was last modified in one of
     *   the clients.  In most cases, this will match the user's sense of when
     *   the note was modified, but this field may not be absolutely reliable
     *   due to the possibility of client clock errors.
     *   </dd>
     * 
     * <dt>deleted</dt>
     *   <dd>If present, the note is considered "deleted", and this
     *   stores the date and time when the note was deleted by one of the clients.
     *   In most cases, this will match the user's sense of when the note was
     *   deleted, but this field may be unreliable due to the possibility of
     *   client clock errors.
     *   </dd>
     * 
     * <dt>active</dt>
     *   <dd>If the note is available for normal actions and viewing,
     *   this flag will be set to true.
     *   </dd>
     * 
     * <dt>updateSequenceNum</dt>
     *   <dd>A number identifying the last transaction to
     *   modify the state of this note (including changes to the note's attributes
     *   or resources).  The USN values are sequential within an account,
     *   and can be used to compare the order of modifications within the service.
     *   </dd>
     * 
     * <dt>notebookGuid</dt>
     *   <dd>The unique identifier of the notebook that contains
     *   this note.  If no notebookGuid is provided on a call to createNote(), the
     *   default notebook will be used instead.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>tagGuids</dt>
     *   <dd>A list of the GUID identifiers for tags that are applied to this note.
     *   This may be provided in a call to createNote() to unambiguously declare
     *   the tags that should be assigned to the new note.  Alternately, clients
     *   may pass the names of desired tags via the 'tagNames' field during
     *   note creation.
     *   If the list of tags are omitted on a call to createNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   Maximum:  EDAM_NOTE_TAGS_MAX tags per note
     *   </dd>
     * 
     * <dt>resources</dt>
     *   <dd>The list of resources that are embedded within this note.
     *   If the list of resources are omitted on a call to updateNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   The binary contents of the resources must be provided when the resource
     *   is first sent to the service, but it will be omitted by the service when
     *   the Note is returned in the future.
     *   Maximum:  EDAM_NOTE_RESOURCES_MAX resources per note
     *   </dd>
     * 
     * <dt>attributes</dt>
     *   <dd>A list of the attributes for this note.
     *   If the list of attributes are omitted on a call to updateNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   </dd>
     * 
     * <dt>tagNames</dt>
     *   <dd>May be provided by clients during calls to createNote() as an
     *   alternative to providing the tagGuids of existing tags.  If any tagNames
     *   are provided during createNote(), these will be found, or created if they
     *   don't already exist.  Created tags will have no parent (they will be at
     *   the top level of the tag panel).
     *   </dd>
     * 
     * <dt>sharedNotes</dt>
     *   <dd>The list of recipients with whom this note has been shared. This field will be unset if
     *     the caller has access to the note via the containing notebook, but does not have activity
     *     feed permission for that notebook. This field is read-only. Clients may not make changes to
     *     a note's sharing state via this field.
     *   </dd>
     * 
     *   <dt>restrictions</dt>
     *   <dd>If this field is set, the user has note-level permissions that may differ from their
     *     notebook-level permissions. In this case, the restrictions structure specifies
     *     a set of restrictions limiting the actions that a user may take on the note based
     *     on their note-level permissions. If this field is unset, then there are no
     *     note-specific restrictions. However, a client may still be limited based on the user's
     *     notebook permissions.</dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getNote($authenticationToken, $guid, $withContent, $withResourcesData, $withResourcesRecognition, $withResourcesAlternateData);
    /**
     * Get all of the application data for the note identified by GUID,
     * with values returned within the LazyMap fullMap field.
     * If there are no applicationData entries, then a LazyMap
     * with an empty fullMap will be returned. If your application
     * only needs to fetch its own applicationData entry, use
     * getNoteApplicationDataEntry instead.
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return \EDAM\Types\LazyMap A structure that wraps a map of name/value pairs whose values are not
     * always present in the structure in order to reduce space when obtaining
     * batches of entities that contain the map.
     * 
     * When the server provides the client with a LazyMap, it will fill in either
     * the keysOnly field or the fullMap field, but never both, based on the API
     * and parameters.
     * 
     * When a client provides a LazyMap to the server as part of an update to
     * an object, the server will only update the LazyMap if the fullMap field is
     * set. If the fullMap field is not set, the server will not make any changes
     * to the map.
     * 
     * Check the API documentation of the individual calls involving the LazyMap
     * for full details including the constraints of the names and values of the
     * map.
     * 
     * <dl>
     * <dt>keysOnly</dt>
     *   <dd>The set of keys for the map.  This field is ignored by the
     *       server when set.
     *   </dd>
     * 
     * <dt>fullMap</dt>
     *   <dd>The complete map, including all keys and values.
     *   </dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getNoteApplicationData($authenticationToken, $guid);
    /**
     * Get the value of a single entry in the applicationData map
     * for the note identified by GUID.
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - note not found, by GUID</li>
     *   <li> "NoteAttributes.applicationData.key" - note not found, by key</li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @param string $key
     * @return string
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getNoteApplicationDataEntry($authenticationToken, $guid, $key);
    /**
     * Update, or create, an entry in the applicationData map for
     * the note identified by guid.
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @param string $key
     * @param string $value
     * @return int
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function setNoteApplicationDataEntry($authenticationToken, $guid, $key, $value);
    /**
     * Remove an entry identified by 'key' from the applicationData map for
     * the note identified by 'guid'. Silently ignores an unset of a
     * non-existing key.
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @param string $key
     * @return int
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function unsetNoteApplicationDataEntry($authenticationToken, $guid, $key);
    /**
     * Returns XHTML contents of the note with the provided GUID.
     * If the Note is found in a public notebook, the authenticationToken
     * will be ignored (so it could be an empty string).
     * 
     * @param guid
     *   The GUID of the note to be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return string
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getNoteContent($authenticationToken, $guid);
    /**
     * Returns a block of the extracted plain text contents of the note with the
     * provided GUID.  This text can be indexed for search purposes by a light
     * client that doesn't have capabilities to extract all of the searchable
     * text content from the note and its resources.
     * 
     * If the Note is found in a public notebook, the authenticationToken
     * will be ignored (so it could be an empty string).
     * 
     * @param guid
     *   The GUID of the note to be retrieved.
     * 
     * @param noteOnly
     *   If true, this will only return the text extracted from the ENML contents
     *   of the note itself.  If false, this will also include the extracted text
     *   from any text-bearing resources (PDF, recognized images)
     * 
     * @param tokenizeForIndexing
     *   If true, this will break the text into cleanly separated and sanitized
     *   tokens.  If false, this will return the more raw text extraction, with
     *   its original punctuation, capitalization, spacing, etc.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @param bool $noteOnly
     * @param bool $tokenizeForIndexing
     * @return string
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getNoteSearchText($authenticationToken, $guid, $noteOnly, $tokenizeForIndexing);
    /**
     * Returns a block of the extracted plain text contents of the resource with
     * the provided GUID.  This text can be indexed for search purposes by a light
     * client that doesn't have capability to extract all of the searchable
     * text content from a resource.
     * 
     * If the Resource is found in a public notebook, the authenticationToken
     * will be ignored (so it could be an empty string).
     * 
     * @param guid
     *   The GUID of the resource to be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Resource.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return string
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getResourceSearchText($authenticationToken, $guid);
    /**
     * Returns a list of the names of the tags for the note with the provided
     * guid.  This can be used with authentication to get the tags for a
     * user's own note, or can be used without valid authentication to retrieve
     * the names of the tags for a note in a public notebook.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return string[]
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getNoteTagNames($authenticationToken, $guid);
    /**
     * Asks the service to make a note with the provided set of information.
     * 
     * @param note
     *   A Note object containing the desired fields to be populated on
     *   the service.
     * 
     * @return
     *   The newly created Note from the service.  The server-side
     *   GUIDs for the Note and any Resources will be saved in this object.
     *   The service will include the meta-data
     *   for each resource in the note, but the binary contents of the resources
     *   and their recognition data will be omitted (except Recognition Resource body,
     *   for which the behavior is unspecified).
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.title" - invalid length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "Note.content" - invalid length for ENML content
     *   </li>
     *   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteAttributes.*" - bad resource string
     *   </li>
     *   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
     *   </li>
     *   <li> DATA_CONFLICT "Note.deleted" - deleted time set on active note
     *   </li>
     *   <li> DATA_REQUIRED "Resource.data" - resource data body missing
     *   </li>
     *   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
     *   </li>
     *   <li> LIMIT_REACHED "Note" - at max number per account
     *   </li>
     *   <li> LIMIT_REACHED "Note.size" - total note size too large
     *   </li>
     *   <li> LIMIT_REACHED "Note.resources" - too many resources on Note
     *   </li>
     *   <li> LIMIT_REACHED "Note.tagGuids" - too many Tags on Note
     *   </li>
     *   <li> LIMIT_REACHED "Resource.data.size" - resource too large
     *   </li>
     *   <li> LIMIT_REACHED "NoteAttribute.*" - attribute string too long
     *   </li>
     *   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
     *   </li>
     *   <li> PERMISSION_DENIED "Note.notebookGuid" - NB not owned by user
     *   </li>
     *   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
     *   </li>
     *   <li> BAD_DATA_FORMAT "Tag.name" - Note.tagNames was provided, and one
     *     of the specified tags had an invalid length or pattern
     *   </li>
     *   <li> LIMIT_REACHED "Tag" - Note.tagNames was provided, and the required
     *     new tags would exceed the maximum number per account
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.notebookGuid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\Types\Note $note
     * @return \EDAM\Types\Note Represents a single note in the user's account.
     * 
     * <dl>
     * <dt>guid</dt>
     *   <dd>The unique identifier of this note.  Will be set by the
     *   server, but will be omitted by clients calling NoteStore.createNote()
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>title</dt>
     *   <dd>The subject of the note.  Can't begin or end with a space.
     *   <br/>
     *   Length:  EDAM_NOTE_TITLE_LEN_MIN - EDAM_NOTE_TITLE_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_NOTE_TITLE_REGEX
     *   </dd>
     * 
     * <dt>content</dt>
     *   <dd>The XHTML block that makes up the note.  This is
     *   the canonical form of the note's contents, so will include abstract
     *   Evernote tags for internal resource references.  A client may create
     *   a separate transformed version of this content for internal presentation,
     *   but the same canonical bytes should be used for transmission and
     *   comparison unless the user chooses to modify their content.
     *   <br/>
     *   Length:  EDAM_NOTE_CONTENT_LEN_MIN - EDAM_NOTE_CONTENT_LEN_MAX
     *   </dd>
     * 
     * <dt>contentHash</dt>
     *   <dd>The binary MD5 checksum of the UTF-8 encoded content
     *   body. This will always be set by the server, but clients may choose to omit
     *   this when they submit a note with content.
     *   <br/>
     *   Length:  EDAM_HASH_LEN (exactly)
     *   </dd>
     * 
     * <dt>contentLength</dt>
     *   <dd>The number of Unicode characters in the content of
     *   the note.  This will always be set by the service, but clients may choose
     *   to omit this value when they submit a Note.
     *   </dd>
     * 
     * <dt>created</dt>
     *   <dd>The date and time when the note was created in one of the
     *   clients.  In most cases, this will match the user's sense of when
     *   the note was created, and ordering between notes will be based on
     *   ordering of this field.  However, this is not a "reliable" timestamp
     *   if a client has an incorrect clock, so it cannot provide a true absolute
     *   ordering between notes.  Notes created directly through the service
     *   (e.g. via the web GUI) will have an absolutely ordered "created" value.
     *   </dd>
     * 
     * <dt>updated</dt>
     *   <dd>The date and time when the note was last modified in one of
     *   the clients.  In most cases, this will match the user's sense of when
     *   the note was modified, but this field may not be absolutely reliable
     *   due to the possibility of client clock errors.
     *   </dd>
     * 
     * <dt>deleted</dt>
     *   <dd>If present, the note is considered "deleted", and this
     *   stores the date and time when the note was deleted by one of the clients.
     *   In most cases, this will match the user's sense of when the note was
     *   deleted, but this field may be unreliable due to the possibility of
     *   client clock errors.
     *   </dd>
     * 
     * <dt>active</dt>
     *   <dd>If the note is available for normal actions and viewing,
     *   this flag will be set to true.
     *   </dd>
     * 
     * <dt>updateSequenceNum</dt>
     *   <dd>A number identifying the last transaction to
     *   modify the state of this note (including changes to the note's attributes
     *   or resources).  The USN values are sequential within an account,
     *   and can be used to compare the order of modifications within the service.
     *   </dd>
     * 
     * <dt>notebookGuid</dt>
     *   <dd>The unique identifier of the notebook that contains
     *   this note.  If no notebookGuid is provided on a call to createNote(), the
     *   default notebook will be used instead.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>tagGuids</dt>
     *   <dd>A list of the GUID identifiers for tags that are applied to this note.
     *   This may be provided in a call to createNote() to unambiguously declare
     *   the tags that should be assigned to the new note.  Alternately, clients
     *   may pass the names of desired tags via the 'tagNames' field during
     *   note creation.
     *   If the list of tags are omitted on a call to createNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   Maximum:  EDAM_NOTE_TAGS_MAX tags per note
     *   </dd>
     * 
     * <dt>resources</dt>
     *   <dd>The list of resources that are embedded within this note.
     *   If the list of resources are omitted on a call to updateNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   The binary contents of the resources must be provided when the resource
     *   is first sent to the service, but it will be omitted by the service when
     *   the Note is returned in the future.
     *   Maximum:  EDAM_NOTE_RESOURCES_MAX resources per note
     *   </dd>
     * 
     * <dt>attributes</dt>
     *   <dd>A list of the attributes for this note.
     *   If the list of attributes are omitted on a call to updateNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   </dd>
     * 
     * <dt>tagNames</dt>
     *   <dd>May be provided by clients during calls to createNote() as an
     *   alternative to providing the tagGuids of existing tags.  If any tagNames
     *   are provided during createNote(), these will be found, or created if they
     *   don't already exist.  Created tags will have no parent (they will be at
     *   the top level of the tag panel).
     *   </dd>
     * 
     * <dt>sharedNotes</dt>
     *   <dd>The list of recipients with whom this note has been shared. This field will be unset if
     *     the caller has access to the note via the containing notebook, but does not have activity
     *     feed permission for that notebook. This field is read-only. Clients may not make changes to
     *     a note's sharing state via this field.
     *   </dd>
     * 
     *   <dt>restrictions</dt>
     *   <dd>If this field is set, the user has note-level permissions that may differ from their
     *     notebook-level permissions. In this case, the restrictions structure specifies
     *     a set of restrictions limiting the actions that a user may take on the note based
     *     on their note-level permissions. If this field is unset, then there are no
     *     note-specific restrictions. However, a client may still be limited based on the user's
     *     notebook permissions.</dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function createNote($authenticationToken, \EDAM\Types\Note $note);
    /**
     * Submit a set of changes to a note to the service.  The provided data
     * must include the note's guid field for identification. The note's
     * title must also be set.
     * 
     * @param note
     *   A Note object containing the desired fields to be populated on
     *   the service. With the exception of the note's title and guid, fields
     *   that are not being changed do not need to be set. If the content is not
     *   being modified, note.content should be left unset. If the list of
     *   resources is not being modified, note.resources should be left unset.
     * 
     * @return
     *   The Note.sharedNotes field will not be set.
     *   The service will include the meta-data
     *   for each resource in the note, but the binary contents of the resources
     *   and their recognition data will be omitted.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.title" - invalid length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "Note.content" - invalid length for ENML body
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteAttributes.*" - bad resource string
     *   </li>
     *   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
     *   </li>
     *   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
     *   </li>
     *   <li> DATA_CONFLICT "Note.deleted" - deleted time set on active note
     *   </li>
     *   <li> DATA_REQUIRED "Resource.data" - resource data body missing
     *   </li>
     *   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
     *   </li>
     *   <li> LIMIT_REACHED "Note.tagGuids" - too many Tags on Note
     *   </li>
     *   <li> LIMIT_REACHED "Note.resources" - too many resources on Note
     *   </li>
     *   <li> LIMIT_REACHED "Note.size" - total note size too large
     *   </li>
     *   <li> LIMIT_REACHED "Resource.data.size" - resource too large
     *   </li>
     *   <li> LIMIT_REACHED "NoteAttribute.*" - attribute string too long
     *   </li>
     *   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
     *   </li>
     *   <li> PERMISSION_DENIED "Note.notebookGuid" - user doesn't own destination
     *   <li> PERMISSION_DENIED "Note.tags" - user doesn't have permission to
     *     modify the note's tags. note.tags must be unset.
     *   </li>
     *   <li> PERMISSION_DENIED "Note.attributes" - user doesn't have permission
     *     to modify the note's attributes. note.attributes must be unset.
     *   </li>
     *   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
     *   </li>
     *   <li> BAD_DATA_FORMAT "Tag.name" - Note.tagNames was provided, and one
     *     of the specified tags had an invalid length or pattern
     *   </li>
     *   <li> LIMIT_REACHED "Tag" - Note.tagNames was provided, and the required
     *     new tags would exceed the maximum number per account
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - note not found, by GUID
     *   </li>
     *   <li> "Note.notebookGuid" - if notebookGuid provided, but not found
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\Types\Note $note
     * @return \EDAM\Types\Note Represents a single note in the user's account.
     * 
     * <dl>
     * <dt>guid</dt>
     *   <dd>The unique identifier of this note.  Will be set by the
     *   server, but will be omitted by clients calling NoteStore.createNote()
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>title</dt>
     *   <dd>The subject of the note.  Can't begin or end with a space.
     *   <br/>
     *   Length:  EDAM_NOTE_TITLE_LEN_MIN - EDAM_NOTE_TITLE_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_NOTE_TITLE_REGEX
     *   </dd>
     * 
     * <dt>content</dt>
     *   <dd>The XHTML block that makes up the note.  This is
     *   the canonical form of the note's contents, so will include abstract
     *   Evernote tags for internal resource references.  A client may create
     *   a separate transformed version of this content for internal presentation,
     *   but the same canonical bytes should be used for transmission and
     *   comparison unless the user chooses to modify their content.
     *   <br/>
     *   Length:  EDAM_NOTE_CONTENT_LEN_MIN - EDAM_NOTE_CONTENT_LEN_MAX
     *   </dd>
     * 
     * <dt>contentHash</dt>
     *   <dd>The binary MD5 checksum of the UTF-8 encoded content
     *   body. This will always be set by the server, but clients may choose to omit
     *   this when they submit a note with content.
     *   <br/>
     *   Length:  EDAM_HASH_LEN (exactly)
     *   </dd>
     * 
     * <dt>contentLength</dt>
     *   <dd>The number of Unicode characters in the content of
     *   the note.  This will always be set by the service, but clients may choose
     *   to omit this value when they submit a Note.
     *   </dd>
     * 
     * <dt>created</dt>
     *   <dd>The date and time when the note was created in one of the
     *   clients.  In most cases, this will match the user's sense of when
     *   the note was created, and ordering between notes will be based on
     *   ordering of this field.  However, this is not a "reliable" timestamp
     *   if a client has an incorrect clock, so it cannot provide a true absolute
     *   ordering between notes.  Notes created directly through the service
     *   (e.g. via the web GUI) will have an absolutely ordered "created" value.
     *   </dd>
     * 
     * <dt>updated</dt>
     *   <dd>The date and time when the note was last modified in one of
     *   the clients.  In most cases, this will match the user's sense of when
     *   the note was modified, but this field may not be absolutely reliable
     *   due to the possibility of client clock errors.
     *   </dd>
     * 
     * <dt>deleted</dt>
     *   <dd>If present, the note is considered "deleted", and this
     *   stores the date and time when the note was deleted by one of the clients.
     *   In most cases, this will match the user's sense of when the note was
     *   deleted, but this field may be unreliable due to the possibility of
     *   client clock errors.
     *   </dd>
     * 
     * <dt>active</dt>
     *   <dd>If the note is available for normal actions and viewing,
     *   this flag will be set to true.
     *   </dd>
     * 
     * <dt>updateSequenceNum</dt>
     *   <dd>A number identifying the last transaction to
     *   modify the state of this note (including changes to the note's attributes
     *   or resources).  The USN values are sequential within an account,
     *   and can be used to compare the order of modifications within the service.
     *   </dd>
     * 
     * <dt>notebookGuid</dt>
     *   <dd>The unique identifier of the notebook that contains
     *   this note.  If no notebookGuid is provided on a call to createNote(), the
     *   default notebook will be used instead.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>tagGuids</dt>
     *   <dd>A list of the GUID identifiers for tags that are applied to this note.
     *   This may be provided in a call to createNote() to unambiguously declare
     *   the tags that should be assigned to the new note.  Alternately, clients
     *   may pass the names of desired tags via the 'tagNames' field during
     *   note creation.
     *   If the list of tags are omitted on a call to createNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   Maximum:  EDAM_NOTE_TAGS_MAX tags per note
     *   </dd>
     * 
     * <dt>resources</dt>
     *   <dd>The list of resources that are embedded within this note.
     *   If the list of resources are omitted on a call to updateNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   The binary contents of the resources must be provided when the resource
     *   is first sent to the service, but it will be omitted by the service when
     *   the Note is returned in the future.
     *   Maximum:  EDAM_NOTE_RESOURCES_MAX resources per note
     *   </dd>
     * 
     * <dt>attributes</dt>
     *   <dd>A list of the attributes for this note.
     *   If the list of attributes are omitted on a call to updateNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   </dd>
     * 
     * <dt>tagNames</dt>
     *   <dd>May be provided by clients during calls to createNote() as an
     *   alternative to providing the tagGuids of existing tags.  If any tagNames
     *   are provided during createNote(), these will be found, or created if they
     *   don't already exist.  Created tags will have no parent (they will be at
     *   the top level of the tag panel).
     *   </dd>
     * 
     * <dt>sharedNotes</dt>
     *   <dd>The list of recipients with whom this note has been shared. This field will be unset if
     *     the caller has access to the note via the containing notebook, but does not have activity
     *     feed permission for that notebook. This field is read-only. Clients may not make changes to
     *     a note's sharing state via this field.
     *   </dd>
     * 
     *   <dt>restrictions</dt>
     *   <dd>If this field is set, the user has note-level permissions that may differ from their
     *     notebook-level permissions. In this case, the restrictions structure specifies
     *     a set of restrictions limiting the actions that a user may take on the note based
     *     on their note-level permissions. If this field is unset, then there are no
     *     note-specific restrictions. However, a client may still be limited based on the user's
     *     notebook permissions.</dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function updateNote($authenticationToken, \EDAM\Types\Note $note);
    /**
     * Moves the note into the trash. The note may still be undeleted, unless it
     * is expunged.  This is equivalent to calling updateNote() after setting
     * Note.active = false
     * 
     * @param guid
     *   The GUID of the note to delete.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> PERMISSION_DENIED "Note" - user doesn't have permission to
     *          update the note.
     *   </li>
     * </ul>
     * 
     * @throws EDAMUserException <ul>
     *   <li> DATA_CONFLICT "Note.guid" - the note is already deleted
     *   </li>
     * </ul>
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return int
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function deleteNote($authenticationToken, $guid);
    /**
     * Permanently removes a Note, and all of its Resources,
     * from the service.
     * <p/>
     * NOTE: This function is not available to third party applications.
     * Calls will result in an EDAMUserException with the error code
     * PERMISSION_DENIED.
     * 
     * @param guid
     *   The GUID of the note to delete.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> PERMISSION_DENIED "Note" - user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return int
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function expungeNote($authenticationToken, $guid);
    /**
     * Performs a deep copy of the Note with the provided GUID 'noteGuid' into
     * the Notebook with the provided GUID 'toNotebookGuid'.
     * The caller must be the owner of both the Note and the Notebook.
     * This creates a new Note in the destination Notebook with new content and
     * Resources that match all of the content and Resources from the original
     * Note, but with new GUID identifiers.
     * The original Note is not modified by this operation.
     * The copied note is considered as an "upload" for the purpose of upload
     * transfer limit calculation, so its size is added to the upload count for
     * the owner.
     * 
     * If the original note has been shared and has SharedNote records, the shares
     * are NOT copied.
     * 
     * @param noteGuid
     *   The GUID of the Note to copy.
     * 
     * @param toNotebookGuid
     *   The GUID of the Notebook that should receive the new Note.
     * 
     * @return
     *   The metadata for the new Note that was created.  This will include the
     *   new GUID for this Note (and any copied Resources), but will not include
     *   the content body or the binary bodies of any Resources.
     * 
     * @throws EDAMUserException <ul>
     *   <li> LIMIT_REACHED "Note" - at max number per account
     *   </li>
     *   <li> PERMISSION_DENIED "Notebook.guid" - destination not owned by user
     *   </li>
     *   <li> PERMISSION_DENIED "Note" - user doesn't own
     *   </li>
     *   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Notebook.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $noteGuid
     * @param string $toNotebookGuid
     * @return \EDAM\Types\Note Represents a single note in the user's account.
     * 
     * <dl>
     * <dt>guid</dt>
     *   <dd>The unique identifier of this note.  Will be set by the
     *   server, but will be omitted by clients calling NoteStore.createNote()
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>title</dt>
     *   <dd>The subject of the note.  Can't begin or end with a space.
     *   <br/>
     *   Length:  EDAM_NOTE_TITLE_LEN_MIN - EDAM_NOTE_TITLE_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_NOTE_TITLE_REGEX
     *   </dd>
     * 
     * <dt>content</dt>
     *   <dd>The XHTML block that makes up the note.  This is
     *   the canonical form of the note's contents, so will include abstract
     *   Evernote tags for internal resource references.  A client may create
     *   a separate transformed version of this content for internal presentation,
     *   but the same canonical bytes should be used for transmission and
     *   comparison unless the user chooses to modify their content.
     *   <br/>
     *   Length:  EDAM_NOTE_CONTENT_LEN_MIN - EDAM_NOTE_CONTENT_LEN_MAX
     *   </dd>
     * 
     * <dt>contentHash</dt>
     *   <dd>The binary MD5 checksum of the UTF-8 encoded content
     *   body. This will always be set by the server, but clients may choose to omit
     *   this when they submit a note with content.
     *   <br/>
     *   Length:  EDAM_HASH_LEN (exactly)
     *   </dd>
     * 
     * <dt>contentLength</dt>
     *   <dd>The number of Unicode characters in the content of
     *   the note.  This will always be set by the service, but clients may choose
     *   to omit this value when they submit a Note.
     *   </dd>
     * 
     * <dt>created</dt>
     *   <dd>The date and time when the note was created in one of the
     *   clients.  In most cases, this will match the user's sense of when
     *   the note was created, and ordering between notes will be based on
     *   ordering of this field.  However, this is not a "reliable" timestamp
     *   if a client has an incorrect clock, so it cannot provide a true absolute
     *   ordering between notes.  Notes created directly through the service
     *   (e.g. via the web GUI) will have an absolutely ordered "created" value.
     *   </dd>
     * 
     * <dt>updated</dt>
     *   <dd>The date and time when the note was last modified in one of
     *   the clients.  In most cases, this will match the user's sense of when
     *   the note was modified, but this field may not be absolutely reliable
     *   due to the possibility of client clock errors.
     *   </dd>
     * 
     * <dt>deleted</dt>
     *   <dd>If present, the note is considered "deleted", and this
     *   stores the date and time when the note was deleted by one of the clients.
     *   In most cases, this will match the user's sense of when the note was
     *   deleted, but this field may be unreliable due to the possibility of
     *   client clock errors.
     *   </dd>
     * 
     * <dt>active</dt>
     *   <dd>If the note is available for normal actions and viewing,
     *   this flag will be set to true.
     *   </dd>
     * 
     * <dt>updateSequenceNum</dt>
     *   <dd>A number identifying the last transaction to
     *   modify the state of this note (including changes to the note's attributes
     *   or resources).  The USN values are sequential within an account,
     *   and can be used to compare the order of modifications within the service.
     *   </dd>
     * 
     * <dt>notebookGuid</dt>
     *   <dd>The unique identifier of the notebook that contains
     *   this note.  If no notebookGuid is provided on a call to createNote(), the
     *   default notebook will be used instead.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>tagGuids</dt>
     *   <dd>A list of the GUID identifiers for tags that are applied to this note.
     *   This may be provided in a call to createNote() to unambiguously declare
     *   the tags that should be assigned to the new note.  Alternately, clients
     *   may pass the names of desired tags via the 'tagNames' field during
     *   note creation.
     *   If the list of tags are omitted on a call to createNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   Maximum:  EDAM_NOTE_TAGS_MAX tags per note
     *   </dd>
     * 
     * <dt>resources</dt>
     *   <dd>The list of resources that are embedded within this note.
     *   If the list of resources are omitted on a call to updateNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   The binary contents of the resources must be provided when the resource
     *   is first sent to the service, but it will be omitted by the service when
     *   the Note is returned in the future.
     *   Maximum:  EDAM_NOTE_RESOURCES_MAX resources per note
     *   </dd>
     * 
     * <dt>attributes</dt>
     *   <dd>A list of the attributes for this note.
     *   If the list of attributes are omitted on a call to updateNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   </dd>
     * 
     * <dt>tagNames</dt>
     *   <dd>May be provided by clients during calls to createNote() as an
     *   alternative to providing the tagGuids of existing tags.  If any tagNames
     *   are provided during createNote(), these will be found, or created if they
     *   don't already exist.  Created tags will have no parent (they will be at
     *   the top level of the tag panel).
     *   </dd>
     * 
     * <dt>sharedNotes</dt>
     *   <dd>The list of recipients with whom this note has been shared. This field will be unset if
     *     the caller has access to the note via the containing notebook, but does not have activity
     *     feed permission for that notebook. This field is read-only. Clients may not make changes to
     *     a note's sharing state via this field.
     *   </dd>
     * 
     *   <dt>restrictions</dt>
     *   <dd>If this field is set, the user has note-level permissions that may differ from their
     *     notebook-level permissions. In this case, the restrictions structure specifies
     *     a set of restrictions limiting the actions that a user may take on the note based
     *     on their note-level permissions. If this field is unset, then there are no
     *     note-specific restrictions. However, a client may still be limited based on the user's
     *     notebook permissions.</dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function copyNote($authenticationToken, $noteGuid, $toNotebookGuid);
    /**
     * Returns a list of the prior versions of a particular note that are
     * saved within the service.  These prior versions are stored to provide a
     * recovery from unintentional removal of content from a note. The identifiers
     * that are returned by this call can be used with getNoteVersion to retrieve
     * the previous note.
     * The identifiers will be listed from the most recent versions to the oldest.
     * This call is only available for notes in Premium accounts. (I.e. access
     * to past versions of Notes is a Premium-only feature.)
     * 
     * @throws EDAMUserException <ul>
     *   <li> DATA_REQUIRED "Note.guid" - if GUID is null or empty string.
     *   </li>
     *   <li> BAD_DATA_FORMAT "Note.guid" - if GUID is not of correct length.
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID.
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $noteGuid
     * @return \EDAM\NoteStore\NoteVersionId[]
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function listNoteVersions($authenticationToken, $noteGuid);
    /**
     * This can be used to retrieve a previous version of a Note after it has been
     * updated within the service.  The caller must identify the note (via its
     * guid) and the version (via the updateSequenceNumber of that version).
     * to find a listing of the stored version USNs for a note, call
     * listNoteVersions.
     * This call is only available for notes in Premium accounts. (I.e. access
     * to past versions of Notes is a Premium-only feature.)
     * 
     * @param noteGuid
     *   The GUID of the note to be retrieved.
     * 
     * @param updateSequenceNum
     *   The USN of the version of the note that is being retrieved
     * 
     * @param withResourcesData
     *   If true, any Resource elements in this Note will include the binary
     *   contents of their 'data' field's body.
     * 
     * @param withResourcesRecognition
     *   If true, any Resource elements will include the binary contents of the
     *   'recognition' field's body if recognition data is present.
     * 
     * @param withResourcesAlternateData
     *   If true, any Resource elements in this Note will include the binary
     *   contents of their 'alternateData' fields' body, if an alternate form
     *   is present.
     * 
     * @throws EDAMUserException <ul>
     *   <li> DATA_REQUIRED "Note.guid" - if GUID is null or empty string.
     *   </li>
     *   <li> BAD_DATA_FORMAT "Note.guid" - if GUID is not of correct length.
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID.
     *   </li>
     *   <li> "Note.updateSequenceNumber" - the Note doesn't have a version with
     *      the corresponding USN.
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $noteGuid
     * @param int $updateSequenceNum
     * @param bool $withResourcesData
     * @param bool $withResourcesRecognition
     * @param bool $withResourcesAlternateData
     * @return \EDAM\Types\Note Represents a single note in the user's account.
     * 
     * <dl>
     * <dt>guid</dt>
     *   <dd>The unique identifier of this note.  Will be set by the
     *   server, but will be omitted by clients calling NoteStore.createNote()
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>title</dt>
     *   <dd>The subject of the note.  Can't begin or end with a space.
     *   <br/>
     *   Length:  EDAM_NOTE_TITLE_LEN_MIN - EDAM_NOTE_TITLE_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_NOTE_TITLE_REGEX
     *   </dd>
     * 
     * <dt>content</dt>
     *   <dd>The XHTML block that makes up the note.  This is
     *   the canonical form of the note's contents, so will include abstract
     *   Evernote tags for internal resource references.  A client may create
     *   a separate transformed version of this content for internal presentation,
     *   but the same canonical bytes should be used for transmission and
     *   comparison unless the user chooses to modify their content.
     *   <br/>
     *   Length:  EDAM_NOTE_CONTENT_LEN_MIN - EDAM_NOTE_CONTENT_LEN_MAX
     *   </dd>
     * 
     * <dt>contentHash</dt>
     *   <dd>The binary MD5 checksum of the UTF-8 encoded content
     *   body. This will always be set by the server, but clients may choose to omit
     *   this when they submit a note with content.
     *   <br/>
     *   Length:  EDAM_HASH_LEN (exactly)
     *   </dd>
     * 
     * <dt>contentLength</dt>
     *   <dd>The number of Unicode characters in the content of
     *   the note.  This will always be set by the service, but clients may choose
     *   to omit this value when they submit a Note.
     *   </dd>
     * 
     * <dt>created</dt>
     *   <dd>The date and time when the note was created in one of the
     *   clients.  In most cases, this will match the user's sense of when
     *   the note was created, and ordering between notes will be based on
     *   ordering of this field.  However, this is not a "reliable" timestamp
     *   if a client has an incorrect clock, so it cannot provide a true absolute
     *   ordering between notes.  Notes created directly through the service
     *   (e.g. via the web GUI) will have an absolutely ordered "created" value.
     *   </dd>
     * 
     * <dt>updated</dt>
     *   <dd>The date and time when the note was last modified in one of
     *   the clients.  In most cases, this will match the user's sense of when
     *   the note was modified, but this field may not be absolutely reliable
     *   due to the possibility of client clock errors.
     *   </dd>
     * 
     * <dt>deleted</dt>
     *   <dd>If present, the note is considered "deleted", and this
     *   stores the date and time when the note was deleted by one of the clients.
     *   In most cases, this will match the user's sense of when the note was
     *   deleted, but this field may be unreliable due to the possibility of
     *   client clock errors.
     *   </dd>
     * 
     * <dt>active</dt>
     *   <dd>If the note is available for normal actions and viewing,
     *   this flag will be set to true.
     *   </dd>
     * 
     * <dt>updateSequenceNum</dt>
     *   <dd>A number identifying the last transaction to
     *   modify the state of this note (including changes to the note's attributes
     *   or resources).  The USN values are sequential within an account,
     *   and can be used to compare the order of modifications within the service.
     *   </dd>
     * 
     * <dt>notebookGuid</dt>
     *   <dd>The unique identifier of the notebook that contains
     *   this note.  If no notebookGuid is provided on a call to createNote(), the
     *   default notebook will be used instead.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>tagGuids</dt>
     *   <dd>A list of the GUID identifiers for tags that are applied to this note.
     *   This may be provided in a call to createNote() to unambiguously declare
     *   the tags that should be assigned to the new note.  Alternately, clients
     *   may pass the names of desired tags via the 'tagNames' field during
     *   note creation.
     *   If the list of tags are omitted on a call to createNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   Maximum:  EDAM_NOTE_TAGS_MAX tags per note
     *   </dd>
     * 
     * <dt>resources</dt>
     *   <dd>The list of resources that are embedded within this note.
     *   If the list of resources are omitted on a call to updateNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   The binary contents of the resources must be provided when the resource
     *   is first sent to the service, but it will be omitted by the service when
     *   the Note is returned in the future.
     *   Maximum:  EDAM_NOTE_RESOURCES_MAX resources per note
     *   </dd>
     * 
     * <dt>attributes</dt>
     *   <dd>A list of the attributes for this note.
     *   If the list of attributes are omitted on a call to updateNote(), then
     *   the server will assume that no changes have been made to the resources.
     *   </dd>
     * 
     * <dt>tagNames</dt>
     *   <dd>May be provided by clients during calls to createNote() as an
     *   alternative to providing the tagGuids of existing tags.  If any tagNames
     *   are provided during createNote(), these will be found, or created if they
     *   don't already exist.  Created tags will have no parent (they will be at
     *   the top level of the tag panel).
     *   </dd>
     * 
     * <dt>sharedNotes</dt>
     *   <dd>The list of recipients with whom this note has been shared. This field will be unset if
     *     the caller has access to the note via the containing notebook, but does not have activity
     *     feed permission for that notebook. This field is read-only. Clients may not make changes to
     *     a note's sharing state via this field.
     *   </dd>
     * 
     *   <dt>restrictions</dt>
     *   <dd>If this field is set, the user has note-level permissions that may differ from their
     *     notebook-level permissions. In this case, the restrictions structure specifies
     *     a set of restrictions limiting the actions that a user may take on the note based
     *     on their note-level permissions. If this field is unset, then there are no
     *     note-specific restrictions. However, a client may still be limited based on the user's
     *     notebook permissions.</dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getNoteVersion($authenticationToken, $noteGuid, $updateSequenceNum, $withResourcesData, $withResourcesRecognition, $withResourcesAlternateData);
    /**
     * Returns the current state of the resource in the service with the
     * provided GUID.
     * If the Resource is found in a public notebook, the authenticationToken
     * will be ignored (so it could be an empty string).  Only the
     * keys for the applicationData will be returned.
     * 
     * @param guid
     *   The GUID of the resource to be retrieved.
     * 
     * @param withData
     *   If true, the Resource will include the binary contents of the
     *   'data' field's body.
     * 
     * @param withRecognition
     *   If true, the Resource will include the binary contents of the
     *   'recognition' field's body if recognition data is present.
     * 
     * @param withAttributes
     *   If true, the Resource will include the attributes
     * 
     * @param withAlternateData
     *   If true, the Resource will include the binary contents of the
     *   'alternateData' field's body, if an alternate form is present.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Resource.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @param bool $withData
     * @param bool $withRecognition
     * @param bool $withAttributes
     * @param bool $withAlternateData
     * @return \EDAM\Types\Resource Every media file that is embedded or attached to a note is represented
     * through a Resource entry.
     * <dl>
     * <dt>guid</dt>
     *   <dd>The unique identifier of this resource.  Will be set whenever
     *   a resource is retrieved from the service, but may be null when a client
     *   is creating a resource.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>noteGuid</dt>
     *   <dd>The unique identifier of the Note that holds this
     *   Resource. Will be set whenever the resource is retrieved from the service,
     *   but may be null when a client is creating a resource.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>data</dt>
     *   <dd>The contents of the resource.
     *   Maximum length:  The data.body is limited to EDAM_RESOURCE_SIZE_MAX_FREE
     *   for free accounts and EDAM_RESOURCE_SIZE_MAX_PREMIUM for premium accounts.
     *   </dd>
     * 
     * <dt>mime</dt>
     *   <dd>The MIME type for the embedded resource.  E.g. "image/gif"
     *   <br/>
     *   Length:  EDAM_MIME_LEN_MIN - EDAM_MIME_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_MIME_REGEX
     *   </dd>
     * 
     * <dt>width</dt>
     *   <dd>If set, this contains the display width of this resource, in
     *   pixels.
     *   </dd>
     * 
     * <dt>height</dt>
     *   <dd>If set, this contains the display height of this resource,
     *   in pixels.
     *   </dd>
     * 
     * <dt>duration</dt>
     *   <dd>DEPRECATED: ignored.
     *   </dd>
     * 
     * <dt>active</dt>
     *   <dd>If the resource is active or not.
     *   </dd>
     * 
     * <dt>recognition</dt>
     *   <dd>If set, this will hold the encoded data that provides
     *   information on search and recognition within this resource.
     *   </dd>
     * 
     * <dt>attributes</dt>
     *   <dd>A list of the attributes for this resource.
     *   </dd>
     * 
     * <dt>updateSequenceNum</dt>
     *   <dd>A number identifying the last transaction to
     *   modify the state of this object. The USN values are sequential within an
     *   account, and can be used to compare the order of modifications within the
     *   service.
     *   </dd>
     * 
     * <dt>alternateData</dt>
     *   <dd>Some Resources may be assigned an alternate data format by the service
     *   which may be more appropriate for indexing or rendering than the original
     *   data provided by the user.  In these cases, the alternate data form will
     *   be available via this Data element.  If a Resource has no alternate form,
     *   this field will be unset.</dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getResource($authenticationToken, $guid, $withData, $withRecognition, $withAttributes, $withAlternateData);
    /**
     * Get all of the application data for the Resource identified by GUID,
     * with values returned within the LazyMap fullMap field.
     * If there are no applicationData entries, then a LazyMap
     * with an empty fullMap will be returned. If your application
     * only needs to fetch its own applicationData entry, use
     * getResourceApplicationDataEntry instead.
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return \EDAM\Types\LazyMap A structure that wraps a map of name/value pairs whose values are not
     * always present in the structure in order to reduce space when obtaining
     * batches of entities that contain the map.
     * 
     * When the server provides the client with a LazyMap, it will fill in either
     * the keysOnly field or the fullMap field, but never both, based on the API
     * and parameters.
     * 
     * When a client provides a LazyMap to the server as part of an update to
     * an object, the server will only update the LazyMap if the fullMap field is
     * set. If the fullMap field is not set, the server will not make any changes
     * to the map.
     * 
     * Check the API documentation of the individual calls involving the LazyMap
     * for full details including the constraints of the names and values of the
     * map.
     * 
     * <dl>
     * <dt>keysOnly</dt>
     *   <dd>The set of keys for the map.  This field is ignored by the
     *       server when set.
     *   </dd>
     * 
     * <dt>fullMap</dt>
     *   <dd>The complete map, including all keys and values.
     *   </dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getResourceApplicationData($authenticationToken, $guid);
    /**
     * Get the value of a single entry in the applicationData map
     * for the Resource identified by GUID.
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Resource.guid" - Resource not found, by GUID</li>
     *   <li> "ResourceAttributes.applicationData.key" - Resource not found, by key</li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @param string $key
     * @return string
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getResourceApplicationDataEntry($authenticationToken, $guid, $key);
    /**
     * Update, or create, an entry in the applicationData map for
     * the Resource identified by guid.
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @param string $key
     * @param string $value
     * @return int
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function setResourceApplicationDataEntry($authenticationToken, $guid, $key, $value);
    /**
     * Remove an entry identified by 'key' from the applicationData map for
     * the Resource identified by 'guid'.
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @param string $key
     * @return int
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function unsetResourceApplicationDataEntry($authenticationToken, $guid, $key);
    /**
     * Submit a set of changes to a resource to the service.  This can be used
     * to update the meta-data about the resource, but cannot be used to change
     * the binary contents of the resource (including the length and hash).  These
     * cannot be changed directly without creating a new resource and removing the
     * old one via updateNote.
     * 
     * @param resource
     *   A Resource object containing the desired fields to be populated on
     *   the service.  The service will attempt to update the resource with the
     *   following fields from the client:
     *   <ul>
     *      <li>guid:  must be provided to identify the resource
     *      </li>
     *      <li>mime
     *      </li>
     *      <li>width
     *      </li>
     *      <li>height
     *      </li>
     *      <li>duration
     *      </li>
     *      <li>attributes:  optional.  if present, the set of attributes will
     *           be replaced.
     *      </li>
     *   </ul>
     * 
     * @return
     *   The Update Sequence Number of the resource after the changes have been
     *   applied.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
     *   </li>
     *   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
     *   </li>
     *   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
     *   </li>
     *   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
     *   </li>
     *   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Resource.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\Types\Resource $resource
     * @return int
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function updateResource($authenticationToken, \EDAM\Types\Resource $resource);
    /**
     * Returns binary data of the resource with the provided GUID.  For
     * example, if this were an image resource, this would contain the
     * raw bits of the image.
     * If the Resource is found in a public notebook, the authenticationToken
     * will be ignored (so it could be an empty string).
     * 
     * @param guid
     *   The GUID of the resource to be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Resource.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return string
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getResourceData($authenticationToken, $guid);
    /**
     * Returns the current state of a resource, referenced by containing
     * note GUID and resource content hash.
     * 
     * @param noteGuid
     *   The GUID of the note that holds the resource to be retrieved.
     * 
     * @param contentHash
     *   The MD5 checksum of the resource within that note. Note that
     *   this is the binary checksum, for example from Resource.data.bodyHash,
     *   and not the hex-encoded checksum that is used within an en-media
     *   tag in a note body.
     * 
     * @param withData
     *   If true, the Resource will include the binary contents of the
     *   'data' field's body.
     * 
     * @param withRecognition
     *   If true, the Resource will include the binary contents of the
     *   'recognition' field's body.
     * 
     * @param withAlternateData
     *   If true, the Resource will include the binary contents of the
     *   'alternateData' field's body, if an alternate form is present.
     * 
     * @throws EDAMUserException <ul>
     *   <li> DATA_REQUIRED "Note.guid" - noteGuid param missing
     *   </li>
     *   <li> DATA_REQUIRED "Note.contentHash" - contentHash param missing
     *   </li>
     *   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note" - not found, by guid
     *   </li>
     *   <li> "Resource" - not found, by hash
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $noteGuid
     * @param string $contentHash
     * @param bool $withData
     * @param bool $withRecognition
     * @param bool $withAlternateData
     * @return \EDAM\Types\Resource Every media file that is embedded or attached to a note is represented
     * through a Resource entry.
     * <dl>
     * <dt>guid</dt>
     *   <dd>The unique identifier of this resource.  Will be set whenever
     *   a resource is retrieved from the service, but may be null when a client
     *   is creating a resource.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>noteGuid</dt>
     *   <dd>The unique identifier of the Note that holds this
     *   Resource. Will be set whenever the resource is retrieved from the service,
     *   but may be null when a client is creating a resource.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>data</dt>
     *   <dd>The contents of the resource.
     *   Maximum length:  The data.body is limited to EDAM_RESOURCE_SIZE_MAX_FREE
     *   for free accounts and EDAM_RESOURCE_SIZE_MAX_PREMIUM for premium accounts.
     *   </dd>
     * 
     * <dt>mime</dt>
     *   <dd>The MIME type for the embedded resource.  E.g. "image/gif"
     *   <br/>
     *   Length:  EDAM_MIME_LEN_MIN - EDAM_MIME_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_MIME_REGEX
     *   </dd>
     * 
     * <dt>width</dt>
     *   <dd>If set, this contains the display width of this resource, in
     *   pixels.
     *   </dd>
     * 
     * <dt>height</dt>
     *   <dd>If set, this contains the display height of this resource,
     *   in pixels.
     *   </dd>
     * 
     * <dt>duration</dt>
     *   <dd>DEPRECATED: ignored.
     *   </dd>
     * 
     * <dt>active</dt>
     *   <dd>If the resource is active or not.
     *   </dd>
     * 
     * <dt>recognition</dt>
     *   <dd>If set, this will hold the encoded data that provides
     *   information on search and recognition within this resource.
     *   </dd>
     * 
     * <dt>attributes</dt>
     *   <dd>A list of the attributes for this resource.
     *   </dd>
     * 
     * <dt>updateSequenceNum</dt>
     *   <dd>A number identifying the last transaction to
     *   modify the state of this object. The USN values are sequential within an
     *   account, and can be used to compare the order of modifications within the
     *   service.
     *   </dd>
     * 
     * <dt>alternateData</dt>
     *   <dd>Some Resources may be assigned an alternate data format by the service
     *   which may be more appropriate for indexing or rendering than the original
     *   data provided by the user.  In these cases, the alternate data form will
     *   be available via this Data element.  If a Resource has no alternate form,
     *   this field will be unset.</dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getResourceByHash($authenticationToken, $noteGuid, $contentHash, $withData, $withRecognition, $withAlternateData);
    /**
     * Returns the binary contents of the recognition index for the resource
     * with the provided GUID.  If the caller asks about a resource that has
     * no recognition data, this will throw EDAMNotFoundException.
     * If the Resource is found in a public notebook, the authenticationToken
     * will be ignored (so it could be an empty string).
     * 
     * @param guid
     *   The GUID of the resource whose recognition data should be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Resource.guid" - not found, by GUID
     *   </li>
     *   <li> "Resource.recognition" - resource has no recognition
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return string
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getResourceRecognition($authenticationToken, $guid);
    /**
     * If the Resource with the provided GUID has an alternate data representation
     * (indicated via the Resource.alternateData field), then this request can
     * be used to retrieve the binary contents of that alternate data file.
     * If the caller asks about a resource that has no alternate data form, this
     * will throw EDAMNotFoundException.
     * 
     * @param guid
     *    The GUID of the resource whose recognition data should be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Resource.guid" - not found, by GUID
     *   </li>
     *   <li> "Resource.alternateData" - resource has no recognition
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return string
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getResourceAlternateData($authenticationToken, $guid);
    /**
     * Returns the set of attributes for the Resource with the provided GUID.
     * If the Resource is found in a public notebook, the authenticationToken
     * will be ignored (so it could be an empty string).
     * 
     * @param guid
     *   The GUID of the resource whose attributes should be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Resource.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return \EDAM\Types\ResourceAttributes Structure holding the optional attributes of a Resource
     * <dl>
     * <dt>sourceURL</dt>
     *   <dd>the original location where the resource was hosted
     *   <br/>
     *    Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
     *   </dd>
     * 
     * <dt>timestamp</dt>
     *   <dd>the date and time that is associated with this resource
     *   (e.g. the time embedded in an image from a digital camera with a clock)
     *   </dd>
     * 
     * <dt>latitude</dt>
     *   <dd>the latitude where the resource was captured
     *   </dd>
     * 
     * <dt>longitude</dt>
     *   <dd>the longitude where the resource was captured
     *   </dd>
     * 
     * <dt>altitude</dt>
     *   <dd>the altitude where the resource was captured
     *   </dd>
     * 
     * <dt>cameraMake</dt>
     *   <dd>information about an image's camera, e.g. as embedded in
     *   the image's EXIF data
     *   <br/>
     *   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
     *   </dd>
     * 
     * <dt>cameraModel</dt>
     *   <dd>information about an image's camera, e.g. as embedded
     *   in the image's EXIF data
     *   <br/>
     *   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
     *   </dd>
     * 
     * <dt>clientWillIndex</dt>
     *   <dd>if true, then the original client that submitted
     *   the resource plans to submit the recognition index for this resource at a
     *   later time.
     *   </dd>
     * 
     * <dt>recoType</dt>
     *   <dd>DEPRECATED - this field is no longer set by the service, so should
     *     be ignored.
     *   </dd>
     * 
     * <dt>fileName</dt>
     *   <dd>if the resource came from a source that provided an
     *   explicit file name, the original name will be stored here.  Many resources
     *   come from unnamed sources, so this will not always be set.
     *   </dd>
     * 
     * <dt>attachment</dt>
     *   <dd>this will be true if the resource should be displayed as an attachment,
     *   or false if the resource should be displayed inline (if possible).
     *   </dd>
     * 
     * <dt>applicationData</dt>
     * <dd>Provides a location for applications to store a relatively small
     * (4kb) blob of data associated with a Resource that is not visible to the user
     * and that is opaque to the Evernote service. A single application may use at most
     * one entry in this map, using its API consumer key as the map key. See the
     * documentation for LazyMap for a description of when the actual map values
     * are returned by the service.
     * <p>To safely add or modify your application's entry in the map, use
     * NoteStore.setResourceApplicationDataEntry. To safely remove your application's
     * entry from the map, use NoteStore.unsetResourceApplicationDataEntry.</p>
     * Minimum length of a name (key): EDAM_APPLICATIONDATA_NAME_LEN_MIN
     * <br/>
     * Sum max size of key and value: EDAM_APPLICATIONDATA_ENTRY_LEN_MAX
     * <br/>
     * Syntax regex for name (key): EDAM_APPLICATIONDATA_NAME_REGEX
     * </dd>
     * 
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getResourceAttributes($authenticationToken, $guid);
    /**
     * <p>
     * Looks for a user account with the provided userId on this NoteStore
     * shard and determines whether that account contains a public notebook
     * with the given URI.  If the account is not found, or no public notebook
     * exists with this URI, this will throw an EDAMNotFoundException,
     * otherwise this will return the information for that Notebook.
     * </p>
     * <p>
     * If a notebook is visible on the web with a full URL like
     * http://www.evernote.com/pub/sethdemo/api
     * Then 'sethdemo' is the username that can be used to look up the userId,
     * and 'api' is the publicUri.
     * </p>
     * 
     * @param userId
     *    The numeric identifier for the user who owns the public notebook.
     *    To find this value based on a username string, you can invoke
     *    UserStore.getPublicUserInfo
     * 
     * @param publicUri
     *    The uri string for the public notebook, from Notebook.publishing.uri.
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li>"Publishing.uri" - not found, by URI</li>
     * </ul>
     * 
     * @throws EDAMSystemException <ul>
     *   <li> TAKEN_DOWN "PublicNotebook" - The specified public notebook is
     *     taken down (for all requesters).</li>
     *   <li> TAKEN_DOWN "Country" - The specified public notebook is taken
     *     down for the requester because of an IP-based country lookup.</li>
     * </ul>
     * 
     * @param int $userId
     * @param string $publicUri
     * @return \EDAM\Types\Notebook A unique container for a set of notes.
     * <dl>
     * <dt>guid</dt>
     *   <dd>The unique identifier of this notebook.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>name</dt>
     *   <dd>A sequence of characters representing the name of the
     *   notebook.  May be changed by clients, but the account may not contain two
     *   notebooks with names that are equal via a case-insensitive comparison.
     *   Can't begin or end with a space.
     *   <br/>
     *   Length:  EDAM_NOTEBOOK_NAME_LEN_MIN - EDAM_NOTEBOOK_NAME_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_NOTEBOOK_NAME_REGEX
     *   </dd>
     * 
     * <dt>updateSequenceNum</dt>
     *   <dd>A number identifying the last transaction to
     *   modify the state of this object.  The USN values are sequential within an
     *   account, and can be used to compare the order of modifications within the
     *   service.
     *   </dd>
     * 
     * <dt>defaultNotebook</dt>
     *   <dd>If true, this notebook should be used for new notes
     *   whenever the user has not (or cannot) specify a desired target notebook.
     *   For example, if a note is submitted via SMTP email.
     *   The service will maintain at most one defaultNotebook per account.
     *   If a second notebook is created or updated with defaultNotebook set to
     *   true, the service will automatically update the prior notebook's
     *   defaultNotebook field to false.  If the default notebook is deleted
     *   (i.e. "active" set to false), the "defaultNotebook" field will be
     *   set to false by the service.  If the account has no default notebook
     *   set, the service will use the most recent notebook as the default.
     *   </dd>
     * 
     * <dt>serviceCreated</dt>
     *   <dd>The time when this notebook was created on the
     *   service. This will be set on the service during creation, and the service
     *   will provide this value when it returns a Notebook to a client.
     *   The service will ignore this value if it is sent by clients.
     *   </dd>
     * 
     * <dt>serviceUpdated</dt>
     *   <dd>The time when this notebook was last modified on the
     *   service.  This will be set on the service during creation, and the service
     *   will provide this value when it returns a Notebook to a client.
     *   The service will ignore this value if it is sent by clients.
     *   </dd>
     * 
     * <dt>publishing</dt>
     *   <dd>If the Notebook has been opened for public access, then this will point to the set of
     *   publishing information for the Notebook (URI, description, etc.). A Notebook cannot be
     *   published without providing this information, but it will persist for later use if publishing
     *   is ever disabled on the Notebook. Clients that do not wish to change the publishing behavior
     *   of a Notebook should not set this value when calling NoteStore.updateNotebook().
     *   Note that this structure is never populated for business notebooks, see the businessNotebook
     *   field.
     *   </dd>
     * 
     * <dt>published</dt>
     *   <dd>If this is set to true, then the Notebook will be
     *   accessible either to the public, or for business users to their business,
     *   via the 'publishing' or 'businessNotebook' specifications, which must also be set. If this is
     *   set to false, the Notebook will not be available to the public (or business).
     *   Clients that do not wish to change the publishing behavior of a Notebook
     *   should not set this value when calling NoteStore.updateNotebook().
     *   </dd>
     * 
     * <dt>stack</dt>
     *   <dd>If this is set, then the notebook is visually contained within a stack
     *   of notebooks with this name.  All notebooks in the same account with the
     *   same 'stack' field are considered to be in the same stack.
     *   Notebooks with no stack set are "top level" and not contained within a
     *   stack.
     *   </dd>
     * 
     * <dt>sharedNotebookIds</dt>
     *   <dd><i>DEPRECATED</i> - replaced by sharedNotebooks.</dd>
     * 
     * <dt>sharedNotebooks</dt>
     *   <dd>The list of recipients to whom this notebook has been shared
     *   (one SharedNotebook object per recipient email address). This field will
     *   be unset if you do not have permission to access this data. If you are
     *   accessing the notebook as the owner or via a shared notebook that is
     *   modifiable, then you have access to this data and the value will be set.
     *   This field is read-only. Clients may not make changes to shared notebooks
     *   via this field.
     *   </dd>
     * 
     * <dt>businessNotebook</dt>
     *   <dd>If the notebook is part of a business account and has been shared with the entire
     *   business, this will contain sharing information. The presence or absence of this field
     *   is not a reliable test of whether a given notebook is in fact a business notebook - the
     *   field is only used when a notebook is or has been shared with the entire business.
     *   </dd>
     * 
     * <dt>contact</dt>
     *   <dd>Intended for use with Business accounts, this field identifies the user who
     *   has been designated as the "contact".  For notebooks created in business
     *   accounts, the server will automatically set this value to the user who created
     *   the notebook unless Notebook.contact.username has been set, in which that value
     *   will be used.  When updating a notebook, it is common to leave Notebook.contact
     *   field unset, indicating that no change to the value is being requested and that
     *   the existing value, if any, should be preserved.
     *   </dd>
     * 
     * <dt>recipientSettings</dt>
     *   <dd>This represents the preferences/settings that a recipient has set for this
     *   notebook. These are intended to be changed only by the recipient, and each
     *   recipient has their own recipient settings.
     *   </dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function getPublicNotebook($userId, $publicUri);
    /**
     * * @Deprecated for first-party clients. See createOrUpdateNotebookShares.
     * *
     * * Share a notebook with an email address, and optionally to a specific
     * * recipient. If an existing SharedNotebook associated with
     * * sharedNotebook.notebookGuid is found by recipientUsername or email, then
     * * the values of sharedNotebook will be used to update the existing record,
     * * else a new record will be created.
     * *
     * * If recipientUsername is set and there is already a SharedNotebook
     * * for that Notebook with that recipientUsername and the privileges on the
     * * existing notebook are lower, than on this one, this will update the
     * * privileges and sharerUserId. If there isn't an existing SharedNotebook for
     * * recipientUsername, this will create and return a shared notebook for that
     * * email and recipientUsername. If recipientUsername is not set and there
     * * already is a SharedNotebook for a Notebook for that email address and the
     * * privileges on the existing SharedNotebook are lower than on this one, this
     * * will update the privileges and sharerUserId, and return the updated
     * * SharedNotebook. Otherwise, this will create and return a SharedNotebook for
     * * the email address.
     * *
     * * If the authenticationToken is a Business auth token, recipientUsername is
     * * set and the recipient is in the same business as the business auth token,
     * * this method will also auto-join the business user to the SharedNotebook -
     * * that is it will set serviceJoined on the SharedNotebook and create a
     * * LinkedNotebook on the recipient's account pointing to the SharedNotebook.
     * * The LinkedNotebook creation happens out-of-band, so there will be a delay
     * * on the order of half a minute between the SharedNotebook and LinkedNotebook
     * * creation.
     * *
     * * Also handles sending an email to the email addresses: if a SharedNotebook
     * * is being created, this will send the shared notebook invite email, and
     * * if a SharedNotebook already exists, it will send the shared notebook
     * * reminder email. Both these emails contain a link to join the notebook.
     * * If the notebook is being auto-joined, it sends an email with that
     * * information to the recipient.
     * *
     * * @param authenticationToken
     * *   Must be an authentication token from the owner or a shared notebook
     * *   authentication token or business authentication token with sufficient
     * *   permissions to change invitations for a notebook.
     * *
     * * @param sharedNotebook
     * *   A shared notebook object populated with the email address of the share
     * *   recipient, the notebook guid and the access permissions. All other
     * *   attributes of the shared object are ignored. The SharedNotebook.allowPreview
     * *   field must be explicitly set with either a true or false value.
     * *
     * * @param message
     * *   The sharer-defined message to put in the email sent out.
     * *
     * * @return
     * *   The fully populated SharedNotebook object including the server assigned
     * *   globalId which can both be used to uniquely identify the SharedNotebook.
     * *
     * * @throws EDAMUserException <ul>
     * *   <li>BAD_DATA_FORMAT "SharedNotebook.email" - if the email was not valid</li>
     * *   <li>DATA_REQUIRED "SharedNotebook.privilege" - if the
     * *       SharedNotebook.privilegeLevel was not set.</li>
     * *   <li>BAD_DATA_FORMAT "SharedNotebook.requireLogin" - if requireLogin was
     * *       set. requireLogin is deprecated.</li>
     * *   <li>BAD_DATA_FORMAT "SharedNotebook.privilegeLevel" - if the
     * *       SharedNotebook.privilegeLevel field was unset or set to GROUP.</li>
     * *   <li>PERMISSION_DENIED "user" - if the email address on the authenticationToken's
     *         owner's account is not confirmed.</li>
     * *   <li>PERMISSION_DENIED "SharedNotebook.recipientSettings" - if
     * *       recipientSettings is set in the sharedNotebook.  Only the recipient
     * *       can set these values via the setSharedNotebookRecipientSettings
     * *       method.</li>
     * *   <li>EDAMErrorCode.LIMIT_REACHED "SharedNotebook" - The notebook already has
     * *       EDAM_NOTEBOOK_SHARED_NOTEBOOK_MAX shares.</li>
     * *   </ul>
     * * @throws EDAMNotFoundException <ul>
     * *   <li>Notebook.guid - if the notebookGuid is not a valid GUID for the user.
     * *   </li>
     * *   </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\Types\SharedNotebook $sharedNotebook
     * @param string $message
     * @return \EDAM\Types\SharedNotebook Shared notebooks represent a relationship between a notebook and a single
     * share invitation recipient.
     * <dl>
     * <dt>id</dt>
     * <dd>The primary identifier of the share, which is not globally unique.</dd>
     * 
     * <dt>userId</dt>
     * <dd>The user id of the owner of the notebook.</dd>
     * 
     * <dt>notebookGuid</dt>
     * <dd>The GUID of the notebook that has been shared.</dd>
     * 
     * <dt>email</dt>
     * <dd>A string containing a display name for the recipient of the share. This may
     *     be an email address, a phone number, a full name, or some other descriptive
     *     string This field is read-only to clients. It will be filled in by the service
     *     when returning shared notebooks.
     * </dd>
     * 
     * <dt>recipientIdentityId</dt>
     * <dd>The IdentityID of the share recipient. If present, only the user who has
     *     claimed that identity may access this share.
     * </dd>
     * 
     * <dt>notebookModifiable</dt>
     * <dd>DEPRECATED</dd>
     * 
     * <dt>serviceCreated</dt>
     * <dd>The date that the owner first created the share with the specific email
     *   address.</dd>
     * 
     * <dt>serviceUpdated</dt>
     * <dd>The date the shared notebook was last updated on the service.  This
     *     will be updated when authenticateToSharedNotebook is called the first
     *     time with a shared notebook (i.e. when the username is bound to that
     *     shared notebook), and also when the SharedNotebook privilege is updated
     *     as part of a shareNotebook(...) call, as well as on any calls to
     *     updateSharedNotebook(...).
     * </dd>
     * 
     * <dt>username</dt>
     * <dd>DEPRECATED. The username of the user who can access this share. This
     *     value is read-only to clients. It will be filled in by the service when
     *     returning shared notebooks.
     * </dd>
     * 
     * <dt>privilege</dt>
     * <dd>The privilege level granted to the notebook, activity stream, and
     *     invitations.  See the corresponding enumeration for details.
     * </dd>
     * 
     * <dt>recipientSettings</dt>
     * <dd>Settings intended for use only by the recipient of this shared
     *     notebook.  You should skip setting this value unless you want
     *     to change the value contained inside the structure, and only if
     *     you are the recipient.</dd>
     * 
     * <dt>globalId</dt>
     * <dd>An immutable, opaque string that acts as a globally unique
     *     identifier for this shared notebook record.  You can use this field to
     *     match linked notebook and shared notebook records as well as to
     *     create new LinkedNotebook records.  This field replaces the deprecated
     *     shareKey field.
     * </dd>
     * 
     * <dt>sharerUserId</dt>
     * <dd>The user id of the user who shared a notebook via this shared notebook
     *     instance. This may not be the same as userId, since a user with full
     *     access to a notebook may have created a new share for that notebook. For
     *     Business, this represents the user who shared the business notebook. This
     *     field is currently unset for a SharedNotebook created by joining a
     *     notebook that has been published to the business.
     * </dd>
     * 
     * <dt>recipientUsername</dt>
     * <dd>The username of the user who can access this share. This is the username
     *     for the user with the id in recipientUserId. This value can be set
     *     by clients when calling shareNotebook(...), and that will result in the
     *     created SharedNotebook being assigned to a user. This value is always set
     *     if serviceAssigned is set.
     * </dd>
     * 
     * <dt>recipientUserId</dt>
     * <dd>The id of the user who can access this share. This is the id for the user
     *     with the username in recipientUsername. This value is read-only and set
     *     by the service. Value set by clients will be ignored. This field may be unset
     *     for unjoined notebooks and is always set if serviceAssigned is set. Clients should
     *     prefer this field over recipientUsername unless they need to use usernames
     *     directly.
     * </dd>
     * 
     * <dt>serviceAssigned</dt>
     * <dd>The date this SharedNotebook was assigned (i.e. has been associated with an
     *     Evernote user whose user ID is set in recipientUserId). Unset if the SharedNotebook
     *     is not assigned. This field is a read-only value that is set by the service.
     * </dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function shareNotebook($authenticationToken, \EDAM\Types\SharedNotebook $sharedNotebook, $message);
    /**
     * Share a notebook by a messaging thread ID or a list of contacts. This function is
     * intended to be used in conjunction with Evernote messaging, and as such does not
     * notify the recipient that a notebook has been shared with them.
     * 
     * Sharing with a subset of participants on a thread is accomplished by specifying both
     * a thread ID and a list of contacts. This ensures that even if those contacts are
     * on the thread under a deactivated identity, the correct user (the one who has the
     * given contact on the thread) receives the share.
     * 
     * @param authenticationToken
     *   An authentication token that grants the caller permission to share the notebook.
     *   This should be an owner token if the notebook is owned by the caller.
     *   If the notebook is a business notebook to which the caller has full access,
     *   this should be their business authentication token. If the notebook is a shared
     *   (non-business) notebook to which the caller has full access, this should be the
     *   shared notebook authentication token returned by NoteStore.authenticateToNotebook.
     * 
     * @param shareTemplate
     *   Specifies the GUID of the notebook to be shared, the privilege at which the notebook
     *   should be shared, and the recipient information.
     * 
     * @return
     *   A structure containing the USN of the Notebook after the change and a list of created
     *   or updated SharedNotebooks.
     * 
     * @throws EDAMUserException <ul>
     *   <li>DATA_REQUIRED "Notebook.guid" - if no notebook GUID was specified</li>
     *   <li>BAD_DATA_FORMAT "Notebook.guid" - if shareTemplate.notebookGuid is not a
     *     valid GUID</li>
     *   <li>DATA_REQUIRED "shareTemplate" - if the shareTemplate parameter was missing</li>
     *   <li>DATA_REQUIRED "NotebookShareTemplate.privilege" - if no privilege was
     *     specified</li>
     *   <li>DATA_CONFLICT "NotebookShareTemplate.privilege" - if the specified privilege
     *     is not allowed.</li>
     *   <li>DATA_REQUIRED "NotebookShareTemplate.recipients" - if no recipients were
     *     specified, either by thread ID or as a list of contacts</li>
     *   <li>LIMIT_REACHED "SharedNotebook" - if the notebook has reached its maximum
     *     number of shares</li>
     * </ul>
     * 
     * @throws EDAMInvalidContactsException <ul>
     *   <li>"NotebookShareTemplate.recipients" - if one or more of the recipients specified
     *     in shareTemplate.recipients was not syntactically valid, or if attempting to
     *     share a notebook with an Evernote identity that the sharer does not have a
     *     connection to. The exception will specify which recipients were invalid.</li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li>"Notebook.guid" - if no notebook with the specified GUID was found</li>
     *   <li>"NotebookShareTemplate.recipientThreadId" - if the recipient thread ID was
     *     specified, but no thread with that ID exists</li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\NoteStore\NotebookShareTemplate $shareTemplate
     * @return \EDAM\NoteStore\CreateOrUpdateNotebookSharesResult A structure containing the results of a call to createOrUpdateNotebookShares.
     * 
     * <dl>
     *   <dt>updateSequenceNum</dt>
     *   <dd>The USN of the notebook after the call.</dd>
     * 
     *   <dt>matchingShares</dt>
     *   <dd>A list of SharedNotebook records that match the desired recipients. These
     *       records may have been either created or updated by the call to
     *       createOrUpdateNotebookShares, or they may have been at the desired privilege
     *       privilege level prior to the call.</dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMInvalidContactsException
     */
    public function createOrUpdateNotebookShares($authenticationToken, \EDAM\NoteStore\NotebookShareTemplate $shareTemplate);
    /**
     * @Deprecated See createOrUpdateNotebookShares and manageNotebookShares.
     * 
     * @param string $authenticationToken
     * @param \EDAM\Types\SharedNotebook $sharedNotebook
     * @return int
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function updateSharedNotebook($authenticationToken, \EDAM\Types\SharedNotebook $sharedNotebook);
    /**
     * Set values for the recipient settings associated with a notebook share. Only the
     * recipient of the share can update their recipient settings.
     * 
     * If you do <i>not</i> wish to, or cannot, change one of the recipient settings fields,
     * you must leave that field unset in recipientSettings.
     * This method will skip that field for updates and attempt to leave the existing value as
     * it is.
     * 
     * If recipientSettings.inMyList is false, both reminderNotifyInApp and reminderNotifyEmail
     * will be either left as null or converted to false (if currently true).
     * 
     * To unset a notebook's stack, pass in the empty string for the stack field.
     * 
     * @param authenticationToken The owner authentication token for the recipient of the share.
     * 
     * @return The updated Notebook with the new recipient settings. Note that some of the
     * recipient settings may differ from what was requested. Clients should update their state
     * based on this return value.
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li>Notebook.guid - Thrown if the service does not have a notebook record with the
     *       notebookGuid on the given shard.</li>
     *   <li>Publishing.publishState - Thrown if the business notebook is not shared with the
     *       user and is also not published to their business.</li>
     * </ul>
     * 
     * @throws EDAMUserException <ul>
     *   <li>PEMISSION_DENIED "authenticationToken" - If the owner of the given token is not
     *       allowed to set recipient settings on the specified notebook.</li>
     *   <li>DATA_CONFLICT "recipientSettings.reminderNotifyEmail" - Setting reminderNotifyEmail
     *       is allowed only for notebooks which belong to the same business as the user.</li>
     *   <li>DATA_CONFLICT "recipientSettings.inMyList" - If the request is setting inMyList
     *       to false and any of reminder* settings to true.</li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $notebookGuid
     * @param \EDAM\Types\NotebookRecipientSettings $recipientSettings
     * @return \EDAM\Types\Notebook A unique container for a set of notes.
     * <dl>
     * <dt>guid</dt>
     *   <dd>The unique identifier of this notebook.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>name</dt>
     *   <dd>A sequence of characters representing the name of the
     *   notebook.  May be changed by clients, but the account may not contain two
     *   notebooks with names that are equal via a case-insensitive comparison.
     *   Can't begin or end with a space.
     *   <br/>
     *   Length:  EDAM_NOTEBOOK_NAME_LEN_MIN - EDAM_NOTEBOOK_NAME_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_NOTEBOOK_NAME_REGEX
     *   </dd>
     * 
     * <dt>updateSequenceNum</dt>
     *   <dd>A number identifying the last transaction to
     *   modify the state of this object.  The USN values are sequential within an
     *   account, and can be used to compare the order of modifications within the
     *   service.
     *   </dd>
     * 
     * <dt>defaultNotebook</dt>
     *   <dd>If true, this notebook should be used for new notes
     *   whenever the user has not (or cannot) specify a desired target notebook.
     *   For example, if a note is submitted via SMTP email.
     *   The service will maintain at most one defaultNotebook per account.
     *   If a second notebook is created or updated with defaultNotebook set to
     *   true, the service will automatically update the prior notebook's
     *   defaultNotebook field to false.  If the default notebook is deleted
     *   (i.e. "active" set to false), the "defaultNotebook" field will be
     *   set to false by the service.  If the account has no default notebook
     *   set, the service will use the most recent notebook as the default.
     *   </dd>
     * 
     * <dt>serviceCreated</dt>
     *   <dd>The time when this notebook was created on the
     *   service. This will be set on the service during creation, and the service
     *   will provide this value when it returns a Notebook to a client.
     *   The service will ignore this value if it is sent by clients.
     *   </dd>
     * 
     * <dt>serviceUpdated</dt>
     *   <dd>The time when this notebook was last modified on the
     *   service.  This will be set on the service during creation, and the service
     *   will provide this value when it returns a Notebook to a client.
     *   The service will ignore this value if it is sent by clients.
     *   </dd>
     * 
     * <dt>publishing</dt>
     *   <dd>If the Notebook has been opened for public access, then this will point to the set of
     *   publishing information for the Notebook (URI, description, etc.). A Notebook cannot be
     *   published without providing this information, but it will persist for later use if publishing
     *   is ever disabled on the Notebook. Clients that do not wish to change the publishing behavior
     *   of a Notebook should not set this value when calling NoteStore.updateNotebook().
     *   Note that this structure is never populated for business notebooks, see the businessNotebook
     *   field.
     *   </dd>
     * 
     * <dt>published</dt>
     *   <dd>If this is set to true, then the Notebook will be
     *   accessible either to the public, or for business users to their business,
     *   via the 'publishing' or 'businessNotebook' specifications, which must also be set. If this is
     *   set to false, the Notebook will not be available to the public (or business).
     *   Clients that do not wish to change the publishing behavior of a Notebook
     *   should not set this value when calling NoteStore.updateNotebook().
     *   </dd>
     * 
     * <dt>stack</dt>
     *   <dd>If this is set, then the notebook is visually contained within a stack
     *   of notebooks with this name.  All notebooks in the same account with the
     *   same 'stack' field are considered to be in the same stack.
     *   Notebooks with no stack set are "top level" and not contained within a
     *   stack.
     *   </dd>
     * 
     * <dt>sharedNotebookIds</dt>
     *   <dd><i>DEPRECATED</i> - replaced by sharedNotebooks.</dd>
     * 
     * <dt>sharedNotebooks</dt>
     *   <dd>The list of recipients to whom this notebook has been shared
     *   (one SharedNotebook object per recipient email address). This field will
     *   be unset if you do not have permission to access this data. If you are
     *   accessing the notebook as the owner or via a shared notebook that is
     *   modifiable, then you have access to this data and the value will be set.
     *   This field is read-only. Clients may not make changes to shared notebooks
     *   via this field.
     *   </dd>
     * 
     * <dt>businessNotebook</dt>
     *   <dd>If the notebook is part of a business account and has been shared with the entire
     *   business, this will contain sharing information. The presence or absence of this field
     *   is not a reliable test of whether a given notebook is in fact a business notebook - the
     *   field is only used when a notebook is or has been shared with the entire business.
     *   </dd>
     * 
     * <dt>contact</dt>
     *   <dd>Intended for use with Business accounts, this field identifies the user who
     *   has been designated as the "contact".  For notebooks created in business
     *   accounts, the server will automatically set this value to the user who created
     *   the notebook unless Notebook.contact.username has been set, in which that value
     *   will be used.  When updating a notebook, it is common to leave Notebook.contact
     *   field unset, indicating that no change to the value is being requested and that
     *   the existing value, if any, should be preserved.
     *   </dd>
     * 
     * <dt>recipientSettings</dt>
     *   <dd>This represents the preferences/settings that a recipient has set for this
     *   notebook. These are intended to be changed only by the recipient, and each
     *   recipient has their own recipient settings.
     *   </dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function setNotebookRecipientSettings($authenticationToken, $notebookGuid, \EDAM\Types\NotebookRecipientSettings $recipientSettings);
    /**
     * Lists the collection of shared notebooks for all notebooks in the
     * users account.
     * 
     * @return
     *  The list of all SharedNotebooks for the user
     * 
     * @param string $authenticationToken
     * @return \EDAM\Types\SharedNotebook[]
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function listSharedNotebooks($authenticationToken);
    /**
     * Asks the service to make a linked notebook with the provided name, username
     * of the owner and identifiers provided. A linked notebook can be either a
     * link to a public notebook or to a private shared notebook.
     * 
     * @param linkedNotebook
     *   The desired fields for the linked notebook must be provided on this
     *   object.  The name of the linked notebook must be set. Either a username
     *   uri or a shard id and share key must be provided otherwise a
     *   EDAMUserException is thrown.
     * 
     * @return
     *   The newly created LinkedNotebook.  The server-side id will be
     *   saved in this object's 'id' field.
     * 
     * @throws EDAMUserException <ul>
     *   <li> DATA_REQUIRED "LinkedNotebook.shareName" - missing shareName
     *   <li> BAD_DATA_FORMAT "LinkedNotebook.name" - invalid shareName length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "LinkedNotebook.username" - bad username format
     *   </li>
     *   <li> BAD_DATA_FORMAT "LinkedNotebook.uri" -
     *     if public notebook set but bad uri
     *   </li>
     *   <li> DATA_REQUIRED "LinkedNotebook.shardId" -
     *     if private notebook but shard id not provided
     *   </li>
     *   <li> BAD_DATA_FORMAT "LinkedNotebook.stack" - invalid stack name length or pattern
     *   </li>
     * </ul>
     * 
     * @throws EDAMSystemException <ul>
     *   <li> BAD_DATA_FORMAT "LinkedNotebook.sharedNotebookGlobalId" -
     *     if a bad global identifer was set on a private notebook
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\Types\LinkedNotebook $linkedNotebook
     * @return \EDAM\Types\LinkedNotebook A link in a user's account that refers them to a public or
     * individual shared notebook in another user's account.
     * 
     * <dl>
     * <dt>shareName</dt>
     * <dd>The display name of the shared notebook. The link owner can change this.</dd>
     * 
     * <dt>username</dt>
     * <dd>The username of the user who owns the shared or public notebook.</dd>
     * 
     * <dt>shardId</dt>
     * <dd>The shard ID of the notebook if the notebook is not public.</dt>
     * 
     * <dt>uri</dt>
     * <dd>The identifier of the public notebook.</dd>
     * 
     * <dt>guid</dt>
     *   <dd>The unique identifier of this linked notebook.  Will be set whenever
     *   a linked notebook is retrieved from the service, but may be null when a client
     *   is creating a linked notebook.
     *   <br/>
     *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
     *   <br/>
     *   Regex:  EDAM_GUID_REGEX
     *   </dd>
     * 
     * <dt>updateSequenceNum</dt>
     *   <dd>A number identifying the last transaction to
     *   modify the state of this object.  The USN values are sequential within an
     *   account, and can be used to compare the order of modifications within the
     *   service.
     *   </dd>
     * 
     * <dt>noteStoreUrl</dt>
     *   <dd>
     *   This field will contain the full URL that clients should use to make
     *   NoteStore requests to the server shard that contains that notebook's data.
     *   I.e. this is the URL that should be used to create the Thrift HTTP client
     *   transport to send messages to the NoteStore service for the account.
     *   </dd>
     * 
     * <dt>webApiUrlPrefix:</dt>
     *   <dd>
     *   This field will contain the initial part of the URLs that should be used
     *   to make requests to Evernote's thin client "web API", which provide
     *   optimized operations for clients that aren't capable of manipulating
     *   the full contents of accounts via the full Thrift data model. Clients
     *   should concatenate the relative path for the various servlets onto the
     *   end of this string to construct the full URL, as documented on our
     *   developer web site.
     *   </dd>
     * 
     * <dt>stack</dt>
     *   <dd>If this is set, then the notebook is visually contained within a stack
     *   of notebooks with this name.  All notebooks in the same account with the
     *   same 'stack' field are considered to be in the same stack.
     *   Notebooks with no stack set are "top level" and not contained within a
     *   stack.  The link owner can change this and this field is for the benefit
     *   of the link owner.
     *   </dd>
     * 
     * <dt>businessId</dt>
     *   <dd>If set, this will be the unique identifier for the business that owns
     *   the notebook to which the linked notebook refers.</dd>
     * 
     * <dt>sharedNotebookGlobalId</dt>
     *   <dd>The globally unique identifier (globalId) of the shared notebook that
     *   corresponds to the share key, or the GUID of the Notebook that the linked notebook
     *   refers to. This field must be filled in with the SharedNotebook.globalId or
     *   Notebook.GUID value when creating new LinkedNotebooks. This field replaces the
     *   deprecated "shareKey" field.
     *   </dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function createLinkedNotebook($authenticationToken, \EDAM\Types\LinkedNotebook $linkedNotebook);
    /**
     * @param linkedNotebook
     *   Updates the name of a linked notebook.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> DATA_REQUIRED "LinkedNotebook.shareName" - missing shareName
     *   </li>
     *   <li> BAD_DATA_FORMAT "LinkedNotebook.shareName" - invalid shareName length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "LinkedNotebook.stack" - invalid stack name length or pattern
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\Types\LinkedNotebook $linkedNotebook
     * @return int
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function updateLinkedNotebook($authenticationToken, \EDAM\Types\LinkedNotebook $linkedNotebook);
    /**
     * Returns a list of linked notebooks
     * 
     * @param string $authenticationToken
     * @return \EDAM\Types\LinkedNotebook[]
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function listLinkedNotebooks($authenticationToken);
    /**
     * Permanently expunges the linked notebook from the account.
     * <p/>
     * NOTE: This function is generally not available to third party applications.
     * Calls will result in an EDAMUserException with the error code
     * PERMISSION_DENIED.
     * 
     * @param guid
     *   The LinkedNotebook.guid field of the LinkedNotebook to permanently remove
     *   from the account.
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return int
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function expungeLinkedNotebook($authenticationToken, $guid);
    /**
     * Asks the service to produce an authentication token that can be used to
     * access the contents of a shared notebook from someone else's account.
     * This authenticationToken can be used with the various other NoteStore
     * calls to find and retrieve notes, and if the permissions in the shared
     * notebook are sufficient, to make changes to the contents of the notebook.
     * 
     * @param shareKeyOrGlobalId
     *   May be one of the following:
     *   <ul>
     *     <li>A share key for a shared notebook that was granted to some recipient
     *         Must be used if you are joining a notebook unless it was shared via
     *         createOrUpdateNotebookShares. Share keys are delivered out-of-band
     *         and are generally not available to clients. For security reasons,
     *         share keys may be invalidated at the discretion of the service.
     *     </li>
     *     <li>The shared notebook global identifier. May be used to access a
     *         notebook that is already joined.
     *     </li>
     *     <li>The Notebook GUID. May be used to access a notebook that was already
     *         joined, or to access a notebook that was shared with the recipient
     *         via createOrUpdateNotebookShares.
     *     </li>
     *   </ul>
     * 
     * @param authenticationToken
     *   If a non-empty string is provided, this is the full user-based
     *   authentication token that identifies the user who is currently logged in
     *   and trying to access the shared notebook.
     *   If this string is empty, the service will attempt to authenticate to the
     *   shared notebook without any logged in user.
     * 
     * @throws EDAMSystemException <ul>
     *   <li> BAD_DATA_FORMAT "shareKey" - invalid shareKey string</li>
     *   <li> INVALID_AUTH "shareKey" - bad signature on shareKey string</li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "SharedNotebook.id" - the shared notebook no longer exists</li>
     * </ul>
     * 
     * @throws EDAMUserException <ul>
     *   <li> DATA_REQUIRED "authenticationToken" - the share requires login, and
     *          no valid authentication token was provided.
     *   </li>
     *   <li> PERMISSION_DENIED "SharedNotebook.username" - share requires login,
     *          and another username has already been bound to this notebook.
     *   </li>
     * </ul>
     * 
     * @param string $shareKeyOrGlobalId
     * @param string $authenticationToken
     * @return \EDAM\UserStore\AuthenticationResult  When an authentication (or re-authentication) is performed, this structure
     *  provides the result to the client.
     * <dl>
     *  <dt>currentTime:</dt>
     *    <dd>
     *    The server-side date and time when this result was
     *    generated.
     *    </dd>
     *  <dt>authenticationToken:</dt>
     *    <dd>
     *    Holds an opaque, ASCII-encoded token that can be
     *    used by the client to perform actions on a NoteStore.
     *    </dd>
     *  <dt>expiration:</dt>
     *    <dd>
     *    Holds the server-side date and time when the
     *    authentication token will expire.
     *    This time can be compared to "currentTime" to produce an expiration
     *    time that can be reconciled with the client's local clock.
     *    </dd>
     *  <dt>user:</dt>
     *    <dd>
     *    Holds the information about the account which was
     *    authenticated if this was a full authentication.  May be absent if this
     *    particular authentication did not require user information.
     *    </dd>
     *  <dt>publicUserInfo:</dt>
     *    <dd>
     *    If this authentication result was achieved without full permissions to
     *    access the full User structure, this field may be set to give back
     *    a more limited public set of data.
     *    </dd>
     *  <dt>noteStoreUrl:</dt>
     *    <dd>
     *    DEPRECATED - Client applications should use urls.noteStoreUrl.
     *    </dd>
     *  <dt>webApiUrlPrefix:</dt>
     *    <dd>
     *    DEPRECATED - Client applications should use urls.webApiUrlPrefix.
     *    </dd>
     *  <dt>secondFactorRequired:</dt>
     *    <dd>
     *    If set to true, this field indicates that the user has enabled two-factor
     *    authentication and must enter their second factor in order to complete
     *    authentication. In this case the value of authenticationResult will be
     *    a short-lived authentication token that may only be used to make a
     *    subsequent call to completeTwoFactorAuthentication.
     *    </dd>
     *  <dt>secondFactorDeliveryHint:</dt>
     *    <dd>
     *    When secondFactorRequired is set to true, this field may contain a string
     *    describing the second factor delivery method that the user has configured.
     *    This will typically be an obfuscated mobile device number, such as
     *    "(xxx) xxx-x095". This string can be displayed to the user to remind them
     *    how to obtain the required second factor.
     *    </dd>
     *  <dt>urls</dt>
     *    <dd>
     *    This structure will contain all of the URLs that clients need to make requests to the
     *    Evernote service on behalf of the authenticated User.
     *    </dd>
     *  </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function authenticateToSharedNotebook($shareKeyOrGlobalId, $authenticationToken);
    /**
     * This function is used to retrieve extended information about a shared
     * notebook by a guest who has already authenticated to access that notebook.
     * This requires an 'authenticationToken' parameter which should be the
     * resut of a call to authenticateToSharedNotebook(...).
     * I.e. this is the token that gives access to the particular shared notebook
     * in someone else's account -- it's not the authenticationToken for the
     * owner of the notebook itself.
     * 
     * @param authenticationToken
     *   Should be the authentication token retrieved from the reply of
     *   authenticateToSharedNotebook(), proving access to a particular shared
     *   notebook.
     * 
     * @throws EDAMUserException <ul>
     *   <li> PERMISSION_DENIED "authenticationToken" -
     *          authentication token doesn't correspond to a valid shared notebook
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "SharedNotebook.id" - the shared notebook no longer exists
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @return \EDAM\Types\SharedNotebook Shared notebooks represent a relationship between a notebook and a single
     * share invitation recipient.
     * <dl>
     * <dt>id</dt>
     * <dd>The primary identifier of the share, which is not globally unique.</dd>
     * 
     * <dt>userId</dt>
     * <dd>The user id of the owner of the notebook.</dd>
     * 
     * <dt>notebookGuid</dt>
     * <dd>The GUID of the notebook that has been shared.</dd>
     * 
     * <dt>email</dt>
     * <dd>A string containing a display name for the recipient of the share. This may
     *     be an email address, a phone number, a full name, or some other descriptive
     *     string This field is read-only to clients. It will be filled in by the service
     *     when returning shared notebooks.
     * </dd>
     * 
     * <dt>recipientIdentityId</dt>
     * <dd>The IdentityID of the share recipient. If present, only the user who has
     *     claimed that identity may access this share.
     * </dd>
     * 
     * <dt>notebookModifiable</dt>
     * <dd>DEPRECATED</dd>
     * 
     * <dt>serviceCreated</dt>
     * <dd>The date that the owner first created the share with the specific email
     *   address.</dd>
     * 
     * <dt>serviceUpdated</dt>
     * <dd>The date the shared notebook was last updated on the service.  This
     *     will be updated when authenticateToSharedNotebook is called the first
     *     time with a shared notebook (i.e. when the username is bound to that
     *     shared notebook), and also when the SharedNotebook privilege is updated
     *     as part of a shareNotebook(...) call, as well as on any calls to
     *     updateSharedNotebook(...).
     * </dd>
     * 
     * <dt>username</dt>
     * <dd>DEPRECATED. The username of the user who can access this share. This
     *     value is read-only to clients. It will be filled in by the service when
     *     returning shared notebooks.
     * </dd>
     * 
     * <dt>privilege</dt>
     * <dd>The privilege level granted to the notebook, activity stream, and
     *     invitations.  See the corresponding enumeration for details.
     * </dd>
     * 
     * <dt>recipientSettings</dt>
     * <dd>Settings intended for use only by the recipient of this shared
     *     notebook.  You should skip setting this value unless you want
     *     to change the value contained inside the structure, and only if
     *     you are the recipient.</dd>
     * 
     * <dt>globalId</dt>
     * <dd>An immutable, opaque string that acts as a globally unique
     *     identifier for this shared notebook record.  You can use this field to
     *     match linked notebook and shared notebook records as well as to
     *     create new LinkedNotebook records.  This field replaces the deprecated
     *     shareKey field.
     * </dd>
     * 
     * <dt>sharerUserId</dt>
     * <dd>The user id of the user who shared a notebook via this shared notebook
     *     instance. This may not be the same as userId, since a user with full
     *     access to a notebook may have created a new share for that notebook. For
     *     Business, this represents the user who shared the business notebook. This
     *     field is currently unset for a SharedNotebook created by joining a
     *     notebook that has been published to the business.
     * </dd>
     * 
     * <dt>recipientUsername</dt>
     * <dd>The username of the user who can access this share. This is the username
     *     for the user with the id in recipientUserId. This value can be set
     *     by clients when calling shareNotebook(...), and that will result in the
     *     created SharedNotebook being assigned to a user. This value is always set
     *     if serviceAssigned is set.
     * </dd>
     * 
     * <dt>recipientUserId</dt>
     * <dd>The id of the user who can access this share. This is the id for the user
     *     with the username in recipientUsername. This value is read-only and set
     *     by the service. Value set by clients will be ignored. This field may be unset
     *     for unjoined notebooks and is always set if serviceAssigned is set. Clients should
     *     prefer this field over recipientUsername unless they need to use usernames
     *     directly.
     * </dd>
     * 
     * <dt>serviceAssigned</dt>
     * <dd>The date this SharedNotebook was assigned (i.e. has been associated with an
     *     Evernote user whose user ID is set in recipientUserId). Unset if the SharedNotebook
     *     is not assigned. This field is a read-only value that is set by the service.
     * </dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function getSharedNotebookByAuth($authenticationToken);
    /**
     * Attempts to send a single note to one or more email recipients.
     * <p/>
     * NOTE: This function is generally not available to third party applications.
     * Calls will result in an EDAMUserException with the error code
     * PERMISSION_DENIED.
     * 
     * @param authenticationToken
     *    The note will be sent as the user logged in via this token, using that
     *    user's registered email address.  If the authenticated user doesn't
     *    have permission to read that note, the emailing will fail.
     * 
     * @param parameters
     *    The note must be specified either by GUID (in which case it will be
     *    sent using the existing data in the service), or else the full Note
     *    must be passed to this call.  This also specifies the additional
     *    email fields that will be used in the email.
     * 
     * @throws EDAMUserException <ul>
     *   <li> LIMIT_REACHED "NoteEmailParameters.toAddresses" -
     *     The email can't be sent because this would exceed the user's daily
     *     email limit.
     *   </li>
     *   <li> BAD_DATA_FORMAT "(email address)" -
     *     email address malformed
     *   </li>
     *   <li> DATA_REQUIRED "NoteEmailParameters.toAddresses" -
     *     if there are no To: or Cc: addresses provided.
     *   </li>
     *   <li> DATA_REQUIRED "Note.title" -
     *     if the caller provides a Note parameter with no title
     *   </li>
     *   <li> DATA_REQUIRED "Note.content" -
     *     if the caller provides a Note parameter with no content
     *   </li>
     *   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
     *   </li>
     *   <li> DATA_REQUIRED "NoteEmailParameters.note" -
     *     if no guid or note provided
     *   </li>
     *   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\NoteStore\NoteEmailParameters $parameters
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function emailNote($authenticationToken, \EDAM\NoteStore\NoteEmailParameters $parameters);
    /**
     * If this note is not already shared publicly (via its own direct URL), then this
     * will start sharing that note.
     * This will return the secret "Note Key" for this note that
     * can currently be used in conjunction with the Note's GUID to gain direct
     * read-only access to the Note.
     * If the note is already shared, then this won't make any changes to the
     * note, and the existing "Note Key" will be returned.  The only way to change
     * the Note Key for an existing note is to stopSharingNote first, and then
     * call this function.
     * 
     * @param guid
     *   The GUID of the note to be shared.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing</li>
     *   <li> PERMISSION_DENIED "Note" - private note, user doesn't own</li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID</li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @return string
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function shareNote($authenticationToken, $guid);
    /**
     * If this note is shared publicly then this will stop sharing that note
     * and invalidate its "Note Key", so any existing URLs to access that Note
     * will stop working.
     * 
     * If the Note is not shared, then this function will do nothing.
     * 
     * This function does not remove invididual shares for the note. To remove
     * individual shares, see stopSharingNoteWithRecipients.
     * 
     * @param guid
     *   The GUID of the note to be un-shared.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing</li>
     *   <li> PERMISSION_DENIED "Note" - private note, user doesn't own</li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li>"Note.guid" - not found, by GUID</li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $guid
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function stopSharingNote($authenticationToken, $guid);
    /**
     * Asks the service to produce an authentication token that can be used to
     * access the contents of a single Note which was individually shared
     * from someone's account.
     * This authenticationToken can be used with the various other NoteStore
     * calls to find and retrieve the Note and its directly-referenced children.
     * 
     * @param guid
     *   The GUID identifying this Note on this shard.
     * 
     * @param noteKey
     *   The 'noteKey' identifier from the Note that was originally created via
     *   a call to shareNote() and then given to a recipient to access.
     * 
     * @param authenticationToken
     *   An optional authenticationToken that identifies the user accessing the
     *   shared note. This parameter may be required to access some shared notes.
     * 
     * @throws EDAMUserException <ul>
     *   <li> PERMISSION_DENIED "Note" - the Note with that GUID is either not
     *     shared, or the noteKey doesn't match the current key for this note
     *   </li>
     *   <li> PERMISSION_DENIED "authenticationToken" - an authentication token is
     *     required to access this Note, but either no authentication token or a
     *     "non-owner" authentication token was provided.
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "guid" - the note with that GUID is not found
     *   </li>
     * </ul>
     * 
     * @throws EDAMSystemException <ul>
     *   <li> TAKEN_DOWN "Note" - The specified shared note is taken down (for
     *     all requesters).
     *   </li>
     *   <li> TAKEN_DOWN "Country" - The specified shared note is taken down
     *     for the requester because of an IP-based country lookup.
     *   </ul>
     * </ul>
     * 
     * @param string $guid
     * @param string $noteKey
     * @param string $authenticationToken
     * @return \EDAM\UserStore\AuthenticationResult  When an authentication (or re-authentication) is performed, this structure
     *  provides the result to the client.
     * <dl>
     *  <dt>currentTime:</dt>
     *    <dd>
     *    The server-side date and time when this result was
     *    generated.
     *    </dd>
     *  <dt>authenticationToken:</dt>
     *    <dd>
     *    Holds an opaque, ASCII-encoded token that can be
     *    used by the client to perform actions on a NoteStore.
     *    </dd>
     *  <dt>expiration:</dt>
     *    <dd>
     *    Holds the server-side date and time when the
     *    authentication token will expire.
     *    This time can be compared to "currentTime" to produce an expiration
     *    time that can be reconciled with the client's local clock.
     *    </dd>
     *  <dt>user:</dt>
     *    <dd>
     *    Holds the information about the account which was
     *    authenticated if this was a full authentication.  May be absent if this
     *    particular authentication did not require user information.
     *    </dd>
     *  <dt>publicUserInfo:</dt>
     *    <dd>
     *    If this authentication result was achieved without full permissions to
     *    access the full User structure, this field may be set to give back
     *    a more limited public set of data.
     *    </dd>
     *  <dt>noteStoreUrl:</dt>
     *    <dd>
     *    DEPRECATED - Client applications should use urls.noteStoreUrl.
     *    </dd>
     *  <dt>webApiUrlPrefix:</dt>
     *    <dd>
     *    DEPRECATED - Client applications should use urls.webApiUrlPrefix.
     *    </dd>
     *  <dt>secondFactorRequired:</dt>
     *    <dd>
     *    If set to true, this field indicates that the user has enabled two-factor
     *    authentication and must enter their second factor in order to complete
     *    authentication. In this case the value of authenticationResult will be
     *    a short-lived authentication token that may only be used to make a
     *    subsequent call to completeTwoFactorAuthentication.
     *    </dd>
     *  <dt>secondFactorDeliveryHint:</dt>
     *    <dd>
     *    When secondFactorRequired is set to true, this field may contain a string
     *    describing the second factor delivery method that the user has configured.
     *    This will typically be an obfuscated mobile device number, such as
     *    "(xxx) xxx-x095". This string can be displayed to the user to remind them
     *    how to obtain the required second factor.
     *    </dd>
     *  <dt>urls</dt>
     *    <dd>
     *    This structure will contain all of the URLs that clients need to make requests to the
     *    Evernote service on behalf of the authenticated User.
     *    </dd>
     *  </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function authenticateToSharedNote($guid, $noteKey, $authenticationToken);
    /**
     * Identify related entities on the service, such as notes,
     * notebooks, tags and users in a business related to notes or content.
     * 
     * @param query
     *   The information about which we are finding related entities.
     * 
     * @param resultSpec
     *   Allows the client to indicate the type and quantity of
     *   information to be returned, allowing a saving of time and
     *   bandwidth.
     * 
     * @return
     *   The result of the query, with information considered
     *   to likely be relevantly related to the information
     *   described by the query.
     * 
     * @throws EDAMUserException <ul>
     *   <li>BAD_DATA_FORMAT "RelatedQuery.plainText" - If you provided a
     *     a zero-length plain text value.
     *   </li>
     *   <li>BAD_DATA_FORMAT "RelatedQuery.noteGuid" - If you provided an
     *     invalid Note GUID, that is, one that does not match the constraints
     *     defined by EDAM_GUID_LEN_MIN, EDAM_GUID_LEN_MAX, EDAM_GUID_REGEX.
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
     *   </li>
     *   <li>PERMISSION_DENIED "Note" - If the caller does not have access to
     *     the note identified by RelatedQuery.noteGuid.
     *   </li>
     *   <li>PERMISSION_DENIED "authenticationToken" - If the caller has requested to
     *     findExperts in the context of a non business user (i.e. The authenticationToken
     *     is not a business auth token).
     *   </li>
     *   <li>DATA_REQUIRED "RelatedResultSpec" - If you did not not set any values
     *     in the result spec.
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li>"RelatedQuery.noteGuid" - the note with that GUID is not
     *     found, if that field has been set in the query.
     *   </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\NoteStore\RelatedQuery $query
     * @param \EDAM\NoteStore\RelatedResultSpec $resultSpec
     * @return \EDAM\NoteStore\RelatedResult The result of calling findRelated().  The contents of the notes,
     * notebooks, and tags fields will be in decreasing order of expected
     * relevance.  It is possible that fewer results than requested will be
     * returned even if there are enough distinct entities in the account
     * in cases where the relevance is estimated to be low.
     * 
     * <dl>
     * <dt>notes</dt>
     * <dd>If notes have been requested to be included, this will be the
     *     list of notes.</dd>
     * 
     * <dt>notebooks</dt>
     * <dd>If notebooks have been requested to be included, this will be the
     *     list of notebooks.</dd>
     * 
     * <dt>tags</dt>
     * <dd>If tags have been requested to be included, this will be the list
     *     of tags.</dd>
     * 
     * <dt>containingNotebooks</dt>
     * <dd>If <code>includeContainingNotebooks</code> is set to <code>true</code>
     *     in the RelatedResultSpec, return the list of notebooks to
     *     to which the returned related notes belong. The notebooks in this
     *     list will occur once per notebook GUID and are represented as
     *     NotebookDescriptor objects.</dd>
     * 
     * <dt>experts</dt>
     * <dd>If experts have been requested to be included, this will return
     *  a list of users within your business who have knowledge about the specified query.
     * </dd>
     * 
     * <dt>relatedContent</dt>
     * <dd>If related content has been requested to be included, this will be the list of
     *  related content snippets.
     * </dd>
     * 
     * <dt>cacheKey</dt>
     * <dd>If set and non-empty, this cache key may be used in subsequent
     *     "NoteStore.findRelated" calls (via "RelatedQuery") to re-use previous
     *     responses that were cached on the client-side, instead of actually performing
     *     another search.
     * 
     *     If set to an empty string, this indicates that the server could not determine
     *     a specific key for this response, but the client should nevertheless remove
     *     any previously cached result for this request.
     * 
     *     If unset/null, it is up to the client whether to re-use cached results or to
     *     use the server's response.
     * 
     *     If set to the exact non-empty cache key that was specified in
     *     "RelatedQuery.cacheKey", this indicates that the server decided that cached results
     *     could be reused.
     * 
     *     Depending on the cache key specified in the query, the "RelatedResult" may only be
     *     partially filled. For each set field, the client should replace the corresponding
     *     part in the previously cached result with the new partial result.
     * 
     *     For example, for a specific query that has both "RelatedResultSpec.maxNotes" and
     *     "RelatedResultSpec.maxRelatedContent" set to positive values, the server may decide
     *     that the previously requested and cached <em>Related Content</em> are unchanged,
     *     but new results for <em>Related Notes</em> are available. The
     *     response will have a new cache key and have "RelatedResult.notes" set, but have
     *     "RelatedResult.relatedContent" unset (not just empty, but really unset).
     * 
     *     In this situation, the client should replace any cached notes with the newly
     *     returned "RelatedResult.notes", but it can re-use the previously cached entries for
     *     "RelatedResult.relatedContent". List fields that are set, but empty indicate that
     *     no results could be found; the cache should be updated correspondingly.
     * </dd>
     * 
     * <dt>cacheExpires</dt>
     * <dd> If set, clients should reuse this response for any situations where the same input
     *      parameters are applicable for up to this many seconds after receiving this result.
     * 
     *      After this time has passed, the client may request a new result from the service,
     *      but it should supply the stored cacheKey to the service when checking for an
     *      update.
     * </dd>
     * 
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function findRelated($authenticationToken, \EDAM\NoteStore\RelatedQuery $query, \EDAM\NoteStore\RelatedResultSpec $resultSpec);
    /**
     * Perform the same operation as updateNote() would provided that the update
     * sequence number on the parameter Note object matches the current update sequence
     * number that the service has for the note.  If they do <i>not</i> match, then
     * <i>no</i> update is performed and the return value will have the current server
     * state in the note field and updated will be false.  If the update sequence
     * numbers between the client and server do match, then the note will be updated
     * and the note field of the return value will be returned as it would be for the
     * updateNote method.  This method allows you to check for an update to the note
     * on the service, by another client instance, from when you obtained the
     * note state as a baseline for your edits and the time when you wish to save your
     * edits.  If your client can merge the conflict, you can avoid overwriting changes
     * that were saved to the service by the other client.
     * 
     * See the updateNote method for information on the exceptions and parameters for
     * this method.  The only difference is that you must have an update sequence number
     * defined on the note parameter (equal to the USN of the note as synched to the
     * client), and the following additional exceptions might be thrown.
     * 
     * @throws EDAMUserException <ul>
     *   <li>DATA_REQUIRED "Note.updateSequenceNum" - If the update sequence number was
     *       not provided.  This includes a value that is set as 0.</li>
     *   <li>BAD_DATA_FORMAT "Note.updateSequenceNum" - If the note has an update
     *       sequence number that is larger than the current server value, which should
     *       not happen if your client is working correctly.</li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\Types\Note $note
     * @return \EDAM\NoteStore\UpdateNoteIfUsnMatchesResult The result of a call to updateNoteIfUsnMatches, which optionally updates a note
     * based on the current value of the note's update sequence number on the service.
     * 
     * <dl>
     * <dt>note</dt>
     * <dd>Either the current state of the note if <tt>updated</tt> is false or the
     * result of updating the note as would be done via the <tt>updateNote</tt> method.
     * If the note was not updated, you will receive a Note that does not include note
     * content, resources data, resources recognition data, or resources alternate data.
     * You can check for updates to these large objects by checking the Data.bodyHash
     * values and downloading accordingly.</dd>
     * 
     * <dt>updated</dt>
     * <dd>Whether or not the note was updated by the operation.</dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function updateNoteIfUsnMatches($authenticationToken, \EDAM\Types\Note $note);
    /**
     * Manage invitations and memberships associated with a given notebook.
     * 
     * <i>Note:</i> Beta method! This method is currently intended for
     * limited use by Evernote clients that have discussed using this
     * routine with the platform team.
     * 
     * @param parameters A structure containing all parameters for the updates.
     *    See the structure documentation for details.
     * 
     * @throws EDAMUserException <ul>
     *   <li>EDAMErrorCode.LIMIT_REACHED "SharedNotebook" - Trying to share a
     *    notebook while the notebook already has EDAM_NOTEBOOK_SHARED_NOTEBOOK_MAX
     *    shares.</li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param \EDAM\NoteStore\ManageNotebookSharesParameters $parameters
     * @return \EDAM\NoteStore\ManageNotebookSharesResult The return value of a call to the manageNotebookShares method.
     * 
     * <dl>
     * <dt>errors</dt>
     * <dd>If the method completed without throwing exceptions, some errors
     * might still have occurred, and in that case, this field will contain
     * the list of those errors the occurred.
     * </dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function manageNotebookShares($authenticationToken, \EDAM\NoteStore\ManageNotebookSharesParameters $parameters);
    /**
     * Return the share relationships for the given notebook, including
     * both the invitations and the memberships.
     * 
     * <i>Note:</i> Beta method! This method is currently intended for
     * limited use by Evernote clients that have discussed using this
     * routine with the platform team.
     * 
     * @param string $authenticationToken
     * @param string $notebookGuid
     * @return \EDAM\NoteStore\ShareRelationships Captures a collection of share relationships for a notebook, for
     * example, as returned by the getNotebookShares method.  The share
     * relationships fall into two broad categories: members, and
     * invitations that can be used to become members.
     * 
     * <dl>
     * <dt>invitations</dt>
     * <dd>A list of open invitations that can be redeemed into
     * memberships to the notebook.</dd>
     * 
     * <dt>memberships</dt>
     * <dd>A list of memberships of the notebook.  A member is identified
     * by their Evernote UserID and has rights to access the
     * notebook.</dd>
     * 
     * <dt>invitationRestrictions</dt>
     * <dd>The restrictions on what privileges may be granted to invitees
     * to this notebook. These restrictions may be specific to the calling
     * user or to the notebook itself. They represent the
     * union of all possible invite cases, so it is possible that once the
     * recipient of the invitation has been identified by the service, such
     * as by a business auto-join, the actual assigned privilege may change.
     * </dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function getNotebookShares($authenticationToken, $notebookGuid);
}
