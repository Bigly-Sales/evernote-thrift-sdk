<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 *  This structure is returned from calls to the findNotesMetadata function to
 *  give the high-level metadata about a subset of Notes that are found to
 *  match a specified NoteFilter in a search.
 * 
 * <dl>
 *  <dt>startIndex</dt>
 *    <dd>
 *    The starting index within the overall set of notes.  This
 *    is also the number of notes that are "before" this list in the set.
 *    </dd>
 * 
 *  <dt>totalNotes</dt>
 *    <dd>
 *    The number of notes in the larger set.  This can be used
 *    to calculate how many notes are "after" this note in the set.
 *    (I.e.  remaining = totalNotes - (startIndex + notes.length)  )
 *    </dd>
 * 
 *  <dt>notes</dt>
 *    <dd>
 *    The list of metadata for Notes in this range.  The set of optional fields
 *    that are set in each metadata structure will depend on the
 *    NotesMetadataResultSpec provided by the caller when the search was
 *    performed.  Only the 'guid' field will be guaranteed to be set in each
 *    Note.
 *    </dd>
 * 
 *  <dt>stoppedWords</dt>
 *    <dd>
 *    If the NoteList was produced using a text based search
 *    query that included words that are not indexed or searched by the service,
 *    this will include a list of those ignored words.
 *    </dd>
 * 
 *  <dt>searchedWords</dt>
 *    <dd>
 *    If the NoteList was produced using a text based search
 *    query that included viable search words or quoted expressions, this will
 *    include a list of those words.  Any stopped words will not be included
 *    in this list.
 *    </dd>
 * 
 *  <dt>updateCount</dt>
 *    <dd>
 *    Indicates the total number of transactions that have
 *    been committed within the account.  This reflects (for example) the
 *    number of discrete additions or modifications that have been made to
 *    the data in this account (tags, notes, resources, etc.).
 *    This number is the "high water mark" for Update Sequence Numbers (USN)
 *    within the account.
 *    </dd>
 * 
 *  <dt>searchContextBytes</dt>
 *    <dd>
 *    Specifies the correlating information about the current search session, in byte array.
 *    </dd>
 * 
 *  <dt>debugInfo</dt>
 *    <dd>
 *    Depends on the value of <code>context</code> in NoteFilter, this field
 *    may contain debug information if the service decides to do so.
 *    </dd>
 * 
 *  </dl>
 */
class NotesMetadataList
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'startIndex',
            'isRequired' => true,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'totalNotes',
            'isRequired' => true,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'notes',
            'isRequired' => true,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EDAM\NoteStore\NoteMetadata',
                ),
        ),
        4 => array(
            'var' => 'stoppedWords',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        5 => array(
            'var' => 'searchedWords',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        6 => array(
            'var' => 'updateCount',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'searchContextBytes',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'debugInfo',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var int
     */
    public $startIndex = null;
    /**
     * @var int
     */
    public $totalNotes = null;
    /**
     * @var \EDAM\NoteStore\NoteMetadata[]
     */
    public $notes = null;
    /**
     * @var string[]
     */
    public $stoppedWords = null;
    /**
     * @var string[]
     */
    public $searchedWords = null;
    /**
     * @var int
     */
    public $updateCount = null;
    /**
     * @var string
     */
    public $searchContextBytes = null;
    /**
     * @var string
     */
    public $debugInfo = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['startIndex'])) {
                $this->startIndex = $vals['startIndex'];
            }
            if (isset($vals['totalNotes'])) {
                $this->totalNotes = $vals['totalNotes'];
            }
            if (isset($vals['notes'])) {
                $this->notes = $vals['notes'];
            }
            if (isset($vals['stoppedWords'])) {
                $this->stoppedWords = $vals['stoppedWords'];
            }
            if (isset($vals['searchedWords'])) {
                $this->searchedWords = $vals['searchedWords'];
            }
            if (isset($vals['updateCount'])) {
                $this->updateCount = $vals['updateCount'];
            }
            if (isset($vals['searchContextBytes'])) {
                $this->searchContextBytes = $vals['searchContextBytes'];
            }
            if (isset($vals['debugInfo'])) {
                $this->debugInfo = $vals['debugInfo'];
            }
        }
    }

    public function getName()
    {
        return 'NotesMetadataList';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->startIndex);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->totalNotes);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->notes = array();
                        $_size120 = 0;
                        $_etype123 = 0;
                        $xfer += $input->readListBegin($_etype123, $_size120);
                        for ($_i124 = 0; $_i124 < $_size120; ++$_i124) {
                            $elem125 = null;
                            $elem125 = new \EDAM\NoteStore\NoteMetadata();
                            $xfer += $elem125->read($input);
                            $this->notes []= $elem125;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->stoppedWords = array();
                        $_size126 = 0;
                        $_etype129 = 0;
                        $xfer += $input->readListBegin($_etype129, $_size126);
                        for ($_i130 = 0; $_i130 < $_size126; ++$_i130) {
                            $elem131 = null;
                            $xfer += $input->readString($elem131);
                            $this->stoppedWords []= $elem131;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->searchedWords = array();
                        $_size132 = 0;
                        $_etype135 = 0;
                        $xfer += $input->readListBegin($_etype135, $_size132);
                        for ($_i136 = 0; $_i136 < $_size132; ++$_i136) {
                            $elem137 = null;
                            $xfer += $input->readString($elem137);
                            $this->searchedWords []= $elem137;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->updateCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->searchContextBytes);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->debugInfo);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('NotesMetadataList');
        if ($this->startIndex !== null) {
            $xfer += $output->writeFieldBegin('startIndex', TType::I32, 1);
            $xfer += $output->writeI32($this->startIndex);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->totalNotes !== null) {
            $xfer += $output->writeFieldBegin('totalNotes', TType::I32, 2);
            $xfer += $output->writeI32($this->totalNotes);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notes !== null) {
            if (!is_array($this->notes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notes', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->notes));
            foreach ($this->notes as $iter138) {
                $xfer += $iter138->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->stoppedWords !== null) {
            if (!is_array($this->stoppedWords)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('stoppedWords', TType::LST, 4);
            $output->writeListBegin(TType::STRING, count($this->stoppedWords));
            foreach ($this->stoppedWords as $iter139) {
                $xfer += $output->writeString($iter139);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->searchedWords !== null) {
            if (!is_array($this->searchedWords)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('searchedWords', TType::LST, 5);
            $output->writeListBegin(TType::STRING, count($this->searchedWords));
            foreach ($this->searchedWords as $iter140) {
                $xfer += $output->writeString($iter140);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->updateCount !== null) {
            $xfer += $output->writeFieldBegin('updateCount', TType::I32, 6);
            $xfer += $output->writeI32($this->updateCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->searchContextBytes !== null) {
            $xfer += $output->writeFieldBegin('searchContextBytes', TType::STRING, 7);
            $xfer += $output->writeString($this->searchContextBytes);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->debugInfo !== null) {
            $xfer += $output->writeFieldBegin('debugInfo', TType::STRING, 9);
            $xfer += $output->writeString($this->debugInfo);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
