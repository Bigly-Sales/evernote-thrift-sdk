<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * A structure to capture certain errors that occurred during a call
 * to manageNotebookShares.  That method can be run best-effort,
 * meaning that some change requests can be applied while others fail.
 * Note that some errors such as system errors will still fail the
 * entire transaction regardless of running best effort.  When some
 * change requests do not succeed, the error conditions are captured
 * in instances of this class, captured by the identity of the share
 * relationship and one of the exception fields.
 * 
 * <dl>
 * <dt>userIdentity</dt>
 * <dd>The identity of the share relationship whose update encountered
 * an error.</dd>
 * 
 * <dt>userException</dt>
 * <dd>If the error is represented as an EDAMUserException that would
 * have otherwise been thrown without best-effort execution.  Only one
 * exception field will be set.</dd>
 * 
 * <dt>notFoundException</dt>
 * <dd>If the error is represented as an EDAMNotFoundException that would
 * have otherwise been thrown without best-effort execution.  Only one
 * exception field will be set.</dd>
 * </dl>
 */
class ManageNotebookSharesError
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'userIdentity',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\UserIdentity',
        ),
        2 => array(
            'var' => 'userException',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Error\EDAMUserException',
        ),
        3 => array(
            'var' => 'notFoundException',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Error\EDAMNotFoundException',
        ),
    );

    /**
     * @var \EDAM\Types\UserIdentity
     */
    public $userIdentity = null;
    /**
     * @var \EDAM\Error\EDAMUserException
     */
    public $userException = null;
    /**
     * @var \EDAM\Error\EDAMNotFoundException
     */
    public $notFoundException = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['userIdentity'])) {
                $this->userIdentity = $vals['userIdentity'];
            }
            if (isset($vals['userException'])) {
                $this->userException = $vals['userException'];
            }
            if (isset($vals['notFoundException'])) {
                $this->notFoundException = $vals['notFoundException'];
            }
        }
    }

    public function getName()
    {
        return 'ManageNotebookSharesError';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->userIdentity = new \EDAM\Types\UserIdentity();
                        $xfer += $this->userIdentity->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->userException = new \EDAM\Error\EDAMUserException();
                        $xfer += $this->userException->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->notFoundException = new \EDAM\Error\EDAMNotFoundException();
                        $xfer += $this->notFoundException->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ManageNotebookSharesError');
        if ($this->userIdentity !== null) {
            if (!is_object($this->userIdentity)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('userIdentity', TType::STRUCT, 1);
            $xfer += $this->userIdentity->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userException !== null) {
            $xfer += $output->writeFieldBegin('userException', TType::STRUCT, 2);
            $xfer += $this->userException->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notFoundException !== null) {
            $xfer += $output->writeFieldBegin('notFoundException', TType::STRUCT, 3);
            $xfer += $this->notFoundException->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
