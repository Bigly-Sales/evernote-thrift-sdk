<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 *  A list of criteria that are used to indicate which notes are desired from
 *  the account.  This is used in queries to the NoteStore to determine
 *  which notes should be retrieved.
 * 
 * <dl>
 *  <dt>order</dt>
 *    <dd>
 *    The NoteSortOrder value indicating what criterion should be
 *    used to sort the results of the filter.
 *    </dd>
 * 
 *  <dt>ascending</dt>
 *    <dd>
 *    If true, the results will be ascending in the requested
 *    sort order.  If false, the results will be descending.
 *    </dd>
 * 
 *  <dt>words</dt>
 *    <dd>
 *    If present, a search query string that will filter the set of notes to be returned.
 *    Accepts the full search grammar documented in the Evernote API Overview.
 *    </dd>
 * 
 *  <dt>notebookGuid</dt>
 *    <dd>
 *    If present, the Guid of the notebook that must contain
 *    the notes.
 *    </dd>
 * 
 *  <dt>tagGuids</dt>
 *    <dd>
 *    If present, the list of tags (by GUID) that must be present
 *    on the notes.
 *    </dd>
 * 
 *  <dt>timeZone</dt>
 *    <dd>
 *    The zone ID for the user, which will be used to interpret
 *    any dates or times in the queries that do not include their desired zone
 *    information.
 *    For example, if a query requests notes created "yesterday", this
 *    will be evaluated from the provided time zone, if provided.
 *    The format must be encoded as a standard zone ID such as
 *    "America/Los_Angeles".
 *    </dd>
 * 
 *  <dt>inactive</dt>
 *    <dd>
 *    If true, then only notes that are not active (i.e. notes in
 *    the Trash) will be returned. Otherwise, only active notes will be returned.
 *    There is no way to find both active and inactive notes in a single query.
 *    </dd>
 * 
 *  <dt>emphasized</dt>
 *    <dd>
 *    If present, a search query string that may or may not influence the notes
 *    to be returned, both in terms of coverage as well as of order. Think of it
 *    as a wish list, not a requirement.
 *    Accepts the full search grammar documented in the Evernote API Overview.
 *    </dd>
 * 
 *  <dt>includeAllReadableNotebooks</dt>
 *    <dd>
 *    If true, then the search will include all business notebooks that are readable
 *    by the user. A business authentication token must be supplied for
 *    this option to take effect when calling search APIs.
 *    </dd>
 * 
 *  <dt>includeAllReadableWorkspaces</dt>
 *    <dd>
 *    If true, then the search will include all workspaces that are readable
 *    by the user. A business authentication token must be supplied for
 *    this option to take effect when calling search APIs.
 *    </dd>
 * 
 *  <dt>context</dt>
 *    <dd>
 *    Specifies the context to consider when determining result ranking.
 *    Clients must leave this value unset unless they wish to explicitly specify a known
 *    non-default context.
 *    </dd>
 * 
 *  <dt>rawWords</dt>
 *    <dd>
 *    If present, the raw user query input.
 *    Accepts the full search grammar documented in the Evernote API Overview.
 *    </dd>
 * 
 *  <dt>searchContextBytes</dt>
 *    <dd>
 *    Specifies the correlating information about the current search session, in byte array.
 *    If this request is not for the first page of search results, the client should populate
 *    this field with the value of searchContextBytes from the NotesMetadataList of the
 *    original search response.
 *    </dd>
 *  </dl>
 */
class NoteFilter
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'order',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'ascending',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        3 => array(
            'var' => 'words',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'notebookGuid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'tagGuids',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        6 => array(
            'var' => 'timeZone',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'inactive',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'emphasized',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'includeAllReadableNotebooks',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        15 => array(
            'var' => 'includeAllReadableWorkspaces',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        10 => array(
            'var' => 'context',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'rawWords',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'searchContextBytes',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var int
     */
    public $order = null;
    /**
     * @var bool
     */
    public $ascending = null;
    /**
     * @var string
     */
    public $words = null;
    /**
     * @var string
     */
    public $notebookGuid = null;
    /**
     * @var string[]
     */
    public $tagGuids = null;
    /**
     * @var string
     */
    public $timeZone = null;
    /**
     * @var bool
     */
    public $inactive = null;
    /**
     * @var string
     */
    public $emphasized = null;
    /**
     * @var bool
     */
    public $includeAllReadableNotebooks = null;
    /**
     * @var bool
     */
    public $includeAllReadableWorkspaces = null;
    /**
     * @var string
     */
    public $context = null;
    /**
     * @var string
     */
    public $rawWords = null;
    /**
     * @var string
     */
    public $searchContextBytes = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['order'])) {
                $this->order = $vals['order'];
            }
            if (isset($vals['ascending'])) {
                $this->ascending = $vals['ascending'];
            }
            if (isset($vals['words'])) {
                $this->words = $vals['words'];
            }
            if (isset($vals['notebookGuid'])) {
                $this->notebookGuid = $vals['notebookGuid'];
            }
            if (isset($vals['tagGuids'])) {
                $this->tagGuids = $vals['tagGuids'];
            }
            if (isset($vals['timeZone'])) {
                $this->timeZone = $vals['timeZone'];
            }
            if (isset($vals['inactive'])) {
                $this->inactive = $vals['inactive'];
            }
            if (isset($vals['emphasized'])) {
                $this->emphasized = $vals['emphasized'];
            }
            if (isset($vals['includeAllReadableNotebooks'])) {
                $this->includeAllReadableNotebooks = $vals['includeAllReadableNotebooks'];
            }
            if (isset($vals['includeAllReadableWorkspaces'])) {
                $this->includeAllReadableWorkspaces = $vals['includeAllReadableWorkspaces'];
            }
            if (isset($vals['context'])) {
                $this->context = $vals['context'];
            }
            if (isset($vals['rawWords'])) {
                $this->rawWords = $vals['rawWords'];
            }
            if (isset($vals['searchContextBytes'])) {
                $this->searchContextBytes = $vals['searchContextBytes'];
            }
        }
    }

    public function getName()
    {
        return 'NoteFilter';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->order);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->ascending);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->words);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->notebookGuid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->tagGuids = array();
                        $_size85 = 0;
                        $_etype88 = 0;
                        $xfer += $input->readListBegin($_etype88, $_size85);
                        for ($_i89 = 0; $_i89 < $_size85; ++$_i89) {
                            $elem90 = null;
                            $xfer += $input->readString($elem90);
                            $this->tagGuids []= $elem90;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->timeZone);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->inactive);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->emphasized);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeAllReadableNotebooks);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeAllReadableWorkspaces);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->context);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->rawWords);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->searchContextBytes);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('NoteFilter');
        if ($this->order !== null) {
            $xfer += $output->writeFieldBegin('order', TType::I32, 1);
            $xfer += $output->writeI32($this->order);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ascending !== null) {
            $xfer += $output->writeFieldBegin('ascending', TType::BOOL, 2);
            $xfer += $output->writeBool($this->ascending);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->words !== null) {
            $xfer += $output->writeFieldBegin('words', TType::STRING, 3);
            $xfer += $output->writeString($this->words);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notebookGuid !== null) {
            $xfer += $output->writeFieldBegin('notebookGuid', TType::STRING, 4);
            $xfer += $output->writeString($this->notebookGuid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->tagGuids !== null) {
            if (!is_array($this->tagGuids)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('tagGuids', TType::LST, 5);
            $output->writeListBegin(TType::STRING, count($this->tagGuids));
            foreach ($this->tagGuids as $iter91) {
                $xfer += $output->writeString($iter91);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timeZone !== null) {
            $xfer += $output->writeFieldBegin('timeZone', TType::STRING, 6);
            $xfer += $output->writeString($this->timeZone);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->inactive !== null) {
            $xfer += $output->writeFieldBegin('inactive', TType::BOOL, 7);
            $xfer += $output->writeBool($this->inactive);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->emphasized !== null) {
            $xfer += $output->writeFieldBegin('emphasized', TType::STRING, 8);
            $xfer += $output->writeString($this->emphasized);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeAllReadableNotebooks !== null) {
            $xfer += $output->writeFieldBegin('includeAllReadableNotebooks', TType::BOOL, 9);
            $xfer += $output->writeBool($this->includeAllReadableNotebooks);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->context !== null) {
            $xfer += $output->writeFieldBegin('context', TType::STRING, 10);
            $xfer += $output->writeString($this->context);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->rawWords !== null) {
            $xfer += $output->writeFieldBegin('rawWords', TType::STRING, 11);
            $xfer += $output->writeString($this->rawWords);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->searchContextBytes !== null) {
            $xfer += $output->writeFieldBegin('searchContextBytes', TType::STRING, 12);
            $xfer += $output->writeString($this->searchContextBytes);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeAllReadableWorkspaces !== null) {
            $xfer += $output->writeFieldBegin('includeAllReadableWorkspaces', TType::BOOL, 15);
            $xfer += $output->writeBool($this->includeAllReadableWorkspaces);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
