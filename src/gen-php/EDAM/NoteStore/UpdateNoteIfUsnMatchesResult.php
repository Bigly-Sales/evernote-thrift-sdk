<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * The result of a call to updateNoteIfUsnMatches, which optionally updates a note
 * based on the current value of the note's update sequence number on the service.
 * 
 * <dl>
 * <dt>note</dt>
 * <dd>Either the current state of the note if <tt>updated</tt> is false or the
 * result of updating the note as would be done via the <tt>updateNote</tt> method.
 * If the note was not updated, you will receive a Note that does not include note
 * content, resources data, resources recognition data, or resources alternate data.
 * You can check for updates to these large objects by checking the Data.bodyHash
 * values and downloading accordingly.</dd>
 * 
 * <dt>updated</dt>
 * <dd>Whether or not the note was updated by the operation.</dd>
 * </dl>
 */
class UpdateNoteIfUsnMatchesResult
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'note',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\Note',
        ),
        2 => array(
            'var' => 'updated',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var \EDAM\Types\Note
     */
    public $note = null;
    /**
     * @var bool
     */
    public $updated = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['note'])) {
                $this->note = $vals['note'];
            }
            if (isset($vals['updated'])) {
                $this->updated = $vals['updated'];
            }
        }
    }

    public function getName()
    {
        return 'UpdateNoteIfUsnMatchesResult';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->note = new \EDAM\Types\Note();
                        $xfer += $this->note->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->updated);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('UpdateNoteIfUsnMatchesResult');
        if ($this->note !== null) {
            if (!is_object($this->note)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('note', TType::STRUCT, 1);
            $xfer += $this->note->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->updated !== null) {
            $xfer += $output->writeFieldBegin('updated', TType::BOOL, 2);
            $xfer += $output->writeBool($this->updated);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
