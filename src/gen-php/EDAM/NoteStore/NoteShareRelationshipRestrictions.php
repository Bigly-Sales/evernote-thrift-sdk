<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * This structure is used by the service to communicate to clients, via
 * getNoteShareRelationships, which privilege levels are assignable to the
 * target of a note share relationship.
 * 
 * <dl>
 * <dt>noSetReadNote</dt>
 * <dd>This value is true if the user is not allowed to set the privilege
 * level to SharedNotePrivilegeLevel.READ_NOTE.</dd>
 * 
 * <dt>noSetModifyNote</dt>
 * <dd>This value is true if the user is not allowed to set the privilege
 * level to SharedNotePrivilegeLevel.MODIFY_NOTE.</dd>
 * 
 * <dt>noSetFullAccess</dt>
 * <dd>This value is true if the user is not allowed to set the
 * privilege level to SharedNotePrivilegeLevel.FULL_ACCESS.</dd>
 * </dl>
 */
class NoteShareRelationshipRestrictions
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'noSetReadNote',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        2 => array(
            'var' => 'noSetModifyNote',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        3 => array(
            'var' => 'noSetFullAccess',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var bool
     */
    public $noSetReadNote = null;
    /**
     * @var bool
     */
    public $noSetModifyNote = null;
    /**
     * @var bool
     */
    public $noSetFullAccess = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['noSetReadNote'])) {
                $this->noSetReadNote = $vals['noSetReadNote'];
            }
            if (isset($vals['noSetModifyNote'])) {
                $this->noSetModifyNote = $vals['noSetModifyNote'];
            }
            if (isset($vals['noSetFullAccess'])) {
                $this->noSetFullAccess = $vals['noSetFullAccess'];
            }
        }
    }

    public function getName()
    {
        return 'NoteShareRelationshipRestrictions';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->noSetReadNote);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->noSetModifyNote);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->noSetFullAccess);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('NoteShareRelationshipRestrictions');
        if ($this->noSetReadNote !== null) {
            $xfer += $output->writeFieldBegin('noSetReadNote', TType::BOOL, 1);
            $xfer += $output->writeBool($this->noSetReadNote);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->noSetModifyNote !== null) {
            $xfer += $output->writeFieldBegin('noSetModifyNote', TType::BOOL, 2);
            $xfer += $output->writeBool($this->noSetModifyNote);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->noSetFullAccess !== null) {
            $xfer += $output->writeFieldBegin('noSetFullAccess', TType::BOOL, 3);
            $xfer += $output->writeBool($this->noSetFullAccess);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
