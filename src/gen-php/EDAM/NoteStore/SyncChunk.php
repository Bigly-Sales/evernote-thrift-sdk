<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 *  This structure is given out by the NoteStore when a client asks to
 *  receive the current state of an account.  The client asks for the server's
 *  state one chunk at a time in order to allow clients to retrieve the state
 *  of a large account without needing to transfer the entire account in
 *  a single message.
 * 
 *  The server always gives SyncChunks using an ascending series of Update
 *  Sequence Numbers (USNs).
 * 
 * <dl>
 *  <dt>currentTime</dt>
 *    <dd>
 *    The server's current date and time.
 *    </dd>
 * 
 *  <dt>chunkHighUSN</dt>
 *    <dd>
 *    The highest USN for any of the data objects represented
 *    in this sync chunk.  If there are no objects in the chunk, this will not be
 *    set.
 *    </dd>
 * 
 *  <dt>updateCount</dt>
 *    <dd>
 *    The total number of updates that have been performed in
 *    the service for this account.  This is equal to the highest USN within the
 *    account at the point that this SyncChunk was generated.  If updateCount
 *    and chunkHighUSN are identical, that means that this is the last chunk
 *    in the account ... there is no more recent information.
 *    </dd>
 * 
 *  <dt>notes</dt>
 *    <dd>
 *    If present, this is a list of non-expunged notes that
 *    have a USN in this chunk.  This will include notes that are "deleted"
 *    but not expunged (i.e. in the trash).  The notes will include their list
 *    of tags and resources, but the note content, resource content, resource
 *    recognition data and resource alternate data will not be supplied.
 *    </dd>
 * 
 *  <dt>notebooks</dt>
 *    <dd>
 *    If present, this is a list of non-expunged notebooks that
 *    have a USN in this chunk.
 *    </dd>
 * 
 *  <dt>tags</dt>
 *    <dd>
 *    If present, this is a list of the non-expunged tags that have a
 *    USN in this chunk.
 *    </dd>
 * 
 *  <dt>searches</dt>
 *    <dd>
 *    If present, this is a list of non-expunged searches that
 *    have a USN in this chunk.
 *    </dd>
 * 
 *  <dt>resources</dt>
 *    <dd>
 *    If present, this is a list of the non-expunged resources
 *    that have a USN in this chunk.  This will include the metadata for each
 *    resource, but not its binary contents or recognition data, which must be
 *    retrieved separately.
 *    </dd>
 * 
 *  <dt>expungedNotes</dt>
 *    <dd>
 *    If present, the GUIDs of all of the notes that were
 *    permanently expunged in this chunk.
 *    </dd>
 * 
 *  <dt>expungedNotebooks</dt>
 *    <dd>
 *    If present, the GUIDs of all of the notebooks that
 *    were permanently expunged in this chunk.  When a notebook is expunged,
 *    this implies that all of its child notes (and their resources) were
 *    also expunged.
 *    </dd>
 * 
 *  <dt>expungedTags</dt>
 *    <dd>
 *    If present, the GUIDs of all of the tags that were
 *    permanently expunged in this chunk.
 *    </dd>
 * 
 *  <dt>expungedSearches</dt>
 *    <dd>
 *    If present, the GUIDs of all of the saved searches
 *    that were permanently expunged in this chunk.
 *    </dd>
 * 
 *  <dt>linkedNotebooks</dt>
 *    <dd>
 *    If present, this is a list of non-expunged LinkedNotebooks that
 *    have a USN in this chunk.
 *    </dd>
 * 
 *  <dt>expungedLinkedNotebooks</dt>
 *    <dd>
 *    If present, the GUIDs of all of the LinkedNotebooks
 *    that were permanently expunged in this chunk.
 *    </dd>
 */
class SyncChunk
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'currentTime',
            'isRequired' => true,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'chunkHighUSN',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'updateCount',
            'isRequired' => true,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'notes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EDAM\Types\Note',
                ),
        ),
        5 => array(
            'var' => 'notebooks',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EDAM\Types\Notebook',
                ),
        ),
        6 => array(
            'var' => 'tags',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EDAM\Types\Tag',
                ),
        ),
        7 => array(
            'var' => 'searches',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EDAM\Types\SavedSearch',
                ),
        ),
        8 => array(
            'var' => 'resources',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EDAM\Types\Resource',
                ),
        ),
        9 => array(
            'var' => 'expungedNotes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        10 => array(
            'var' => 'expungedNotebooks',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        11 => array(
            'var' => 'expungedTags',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        12 => array(
            'var' => 'expungedSearches',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        13 => array(
            'var' => 'linkedNotebooks',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EDAM\Types\LinkedNotebook',
                ),
        ),
        14 => array(
            'var' => 'expungedLinkedNotebooks',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var int
     */
    public $currentTime = null;
    /**
     * @var int
     */
    public $chunkHighUSN = null;
    /**
     * @var int
     */
    public $updateCount = null;
    /**
     * @var \EDAM\Types\Note[]
     */
    public $notes = null;
    /**
     * @var \EDAM\Types\Notebook[]
     */
    public $notebooks = null;
    /**
     * @var \EDAM\Types\Tag[]
     */
    public $tags = null;
    /**
     * @var \EDAM\Types\SavedSearch[]
     */
    public $searches = null;
    /**
     * @var \EDAM\Types\Resource[]
     */
    public $resources = null;
    /**
     * @var string[]
     */
    public $expungedNotes = null;
    /**
     * @var string[]
     */
    public $expungedNotebooks = null;
    /**
     * @var string[]
     */
    public $expungedTags = null;
    /**
     * @var string[]
     */
    public $expungedSearches = null;
    /**
     * @var \EDAM\Types\LinkedNotebook[]
     */
    public $linkedNotebooks = null;
    /**
     * @var string[]
     */
    public $expungedLinkedNotebooks = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['currentTime'])) {
                $this->currentTime = $vals['currentTime'];
            }
            if (isset($vals['chunkHighUSN'])) {
                $this->chunkHighUSN = $vals['chunkHighUSN'];
            }
            if (isset($vals['updateCount'])) {
                $this->updateCount = $vals['updateCount'];
            }
            if (isset($vals['notes'])) {
                $this->notes = $vals['notes'];
            }
            if (isset($vals['notebooks'])) {
                $this->notebooks = $vals['notebooks'];
            }
            if (isset($vals['tags'])) {
                $this->tags = $vals['tags'];
            }
            if (isset($vals['searches'])) {
                $this->searches = $vals['searches'];
            }
            if (isset($vals['resources'])) {
                $this->resources = $vals['resources'];
            }
            if (isset($vals['expungedNotes'])) {
                $this->expungedNotes = $vals['expungedNotes'];
            }
            if (isset($vals['expungedNotebooks'])) {
                $this->expungedNotebooks = $vals['expungedNotebooks'];
            }
            if (isset($vals['expungedTags'])) {
                $this->expungedTags = $vals['expungedTags'];
            }
            if (isset($vals['expungedSearches'])) {
                $this->expungedSearches = $vals['expungedSearches'];
            }
            if (isset($vals['linkedNotebooks'])) {
                $this->linkedNotebooks = $vals['linkedNotebooks'];
            }
            if (isset($vals['expungedLinkedNotebooks'])) {
                $this->expungedLinkedNotebooks = $vals['expungedLinkedNotebooks'];
            }
        }
    }

    public function getName()
    {
        return 'SyncChunk';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->currentTime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->chunkHighUSN);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->updateCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->notes = array();
                        $_size0 = 0;
                        $_etype3 = 0;
                        $xfer += $input->readListBegin($_etype3, $_size0);
                        for ($_i4 = 0; $_i4 < $_size0; ++$_i4) {
                            $elem5 = null;
                            $elem5 = new \EDAM\Types\Note();
                            $xfer += $elem5->read($input);
                            $this->notes []= $elem5;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->notebooks = array();
                        $_size6 = 0;
                        $_etype9 = 0;
                        $xfer += $input->readListBegin($_etype9, $_size6);
                        for ($_i10 = 0; $_i10 < $_size6; ++$_i10) {
                            $elem11 = null;
                            $elem11 = new \EDAM\Types\Notebook();
                            $xfer += $elem11->read($input);
                            $this->notebooks []= $elem11;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::LST) {
                        $this->tags = array();
                        $_size12 = 0;
                        $_etype15 = 0;
                        $xfer += $input->readListBegin($_etype15, $_size12);
                        for ($_i16 = 0; $_i16 < $_size12; ++$_i16) {
                            $elem17 = null;
                            $elem17 = new \EDAM\Types\Tag();
                            $xfer += $elem17->read($input);
                            $this->tags []= $elem17;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::LST) {
                        $this->searches = array();
                        $_size18 = 0;
                        $_etype21 = 0;
                        $xfer += $input->readListBegin($_etype21, $_size18);
                        for ($_i22 = 0; $_i22 < $_size18; ++$_i22) {
                            $elem23 = null;
                            $elem23 = new \EDAM\Types\SavedSearch();
                            $xfer += $elem23->read($input);
                            $this->searches []= $elem23;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::LST) {
                        $this->resources = array();
                        $_size24 = 0;
                        $_etype27 = 0;
                        $xfer += $input->readListBegin($_etype27, $_size24);
                        for ($_i28 = 0; $_i28 < $_size24; ++$_i28) {
                            $elem29 = null;
                            $elem29 = new \EDAM\Types\Resource();
                            $xfer += $elem29->read($input);
                            $this->resources []= $elem29;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::LST) {
                        $this->expungedNotes = array();
                        $_size30 = 0;
                        $_etype33 = 0;
                        $xfer += $input->readListBegin($_etype33, $_size30);
                        for ($_i34 = 0; $_i34 < $_size30; ++$_i34) {
                            $elem35 = null;
                            $xfer += $input->readString($elem35);
                            $this->expungedNotes []= $elem35;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::LST) {
                        $this->expungedNotebooks = array();
                        $_size36 = 0;
                        $_etype39 = 0;
                        $xfer += $input->readListBegin($_etype39, $_size36);
                        for ($_i40 = 0; $_i40 < $_size36; ++$_i40) {
                            $elem41 = null;
                            $xfer += $input->readString($elem41);
                            $this->expungedNotebooks []= $elem41;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::LST) {
                        $this->expungedTags = array();
                        $_size42 = 0;
                        $_etype45 = 0;
                        $xfer += $input->readListBegin($_etype45, $_size42);
                        for ($_i46 = 0; $_i46 < $_size42; ++$_i46) {
                            $elem47 = null;
                            $xfer += $input->readString($elem47);
                            $this->expungedTags []= $elem47;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::LST) {
                        $this->expungedSearches = array();
                        $_size48 = 0;
                        $_etype51 = 0;
                        $xfer += $input->readListBegin($_etype51, $_size48);
                        for ($_i52 = 0; $_i52 < $_size48; ++$_i52) {
                            $elem53 = null;
                            $xfer += $input->readString($elem53);
                            $this->expungedSearches []= $elem53;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::LST) {
                        $this->linkedNotebooks = array();
                        $_size54 = 0;
                        $_etype57 = 0;
                        $xfer += $input->readListBegin($_etype57, $_size54);
                        for ($_i58 = 0; $_i58 < $_size54; ++$_i58) {
                            $elem59 = null;
                            $elem59 = new \EDAM\Types\LinkedNotebook();
                            $xfer += $elem59->read($input);
                            $this->linkedNotebooks []= $elem59;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::LST) {
                        $this->expungedLinkedNotebooks = array();
                        $_size60 = 0;
                        $_etype63 = 0;
                        $xfer += $input->readListBegin($_etype63, $_size60);
                        for ($_i64 = 0; $_i64 < $_size60; ++$_i64) {
                            $elem65 = null;
                            $xfer += $input->readString($elem65);
                            $this->expungedLinkedNotebooks []= $elem65;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('SyncChunk');
        if ($this->currentTime !== null) {
            $xfer += $output->writeFieldBegin('currentTime', TType::I64, 1);
            $xfer += $output->writeI64($this->currentTime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->chunkHighUSN !== null) {
            $xfer += $output->writeFieldBegin('chunkHighUSN', TType::I32, 2);
            $xfer += $output->writeI32($this->chunkHighUSN);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->updateCount !== null) {
            $xfer += $output->writeFieldBegin('updateCount', TType::I32, 3);
            $xfer += $output->writeI32($this->updateCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notes !== null) {
            if (!is_array($this->notes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notes', TType::LST, 4);
            $output->writeListBegin(TType::STRUCT, count($this->notes));
            foreach ($this->notes as $iter66) {
                $xfer += $iter66->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notebooks !== null) {
            if (!is_array($this->notebooks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notebooks', TType::LST, 5);
            $output->writeListBegin(TType::STRUCT, count($this->notebooks));
            foreach ($this->notebooks as $iter67) {
                $xfer += $iter67->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->tags !== null) {
            if (!is_array($this->tags)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('tags', TType::LST, 6);
            $output->writeListBegin(TType::STRUCT, count($this->tags));
            foreach ($this->tags as $iter68) {
                $xfer += $iter68->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->searches !== null) {
            if (!is_array($this->searches)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('searches', TType::LST, 7);
            $output->writeListBegin(TType::STRUCT, count($this->searches));
            foreach ($this->searches as $iter69) {
                $xfer += $iter69->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->resources !== null) {
            if (!is_array($this->resources)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('resources', TType::LST, 8);
            $output->writeListBegin(TType::STRUCT, count($this->resources));
            foreach ($this->resources as $iter70) {
                $xfer += $iter70->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->expungedNotes !== null) {
            if (!is_array($this->expungedNotes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('expungedNotes', TType::LST, 9);
            $output->writeListBegin(TType::STRING, count($this->expungedNotes));
            foreach ($this->expungedNotes as $iter71) {
                $xfer += $output->writeString($iter71);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->expungedNotebooks !== null) {
            if (!is_array($this->expungedNotebooks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('expungedNotebooks', TType::LST, 10);
            $output->writeListBegin(TType::STRING, count($this->expungedNotebooks));
            foreach ($this->expungedNotebooks as $iter72) {
                $xfer += $output->writeString($iter72);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->expungedTags !== null) {
            if (!is_array($this->expungedTags)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('expungedTags', TType::LST, 11);
            $output->writeListBegin(TType::STRING, count($this->expungedTags));
            foreach ($this->expungedTags as $iter73) {
                $xfer += $output->writeString($iter73);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->expungedSearches !== null) {
            if (!is_array($this->expungedSearches)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('expungedSearches', TType::LST, 12);
            $output->writeListBegin(TType::STRING, count($this->expungedSearches));
            foreach ($this->expungedSearches as $iter74) {
                $xfer += $output->writeString($iter74);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->linkedNotebooks !== null) {
            if (!is_array($this->linkedNotebooks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('linkedNotebooks', TType::LST, 13);
            $output->writeListBegin(TType::STRUCT, count($this->linkedNotebooks));
            foreach ($this->linkedNotebooks as $iter75) {
                $xfer += $iter75->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->expungedLinkedNotebooks !== null) {
            if (!is_array($this->expungedLinkedNotebooks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('expungedLinkedNotebooks', TType::LST, 14);
            $output->writeListBegin(TType::STRING, count($this->expungedLinkedNotebooks));
            foreach ($this->expungedLinkedNotebooks as $iter76) {
                $xfer += $output->writeString($iter76);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
