<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 *  This structure is used with the 'getFilteredSyncChunk' call to provide
 *  fine-grained control over the data that's returned when a client needs
 *  to synchronize with the service. Each flag in this structure specifies
 *  whether to include one class of data in the results of that call.
 * 
 * <dl>
 *  <dt>includeNotes</dt>
 *    <dd>
 *    If true, then the server will include the SyncChunks.notes field
 *    </dd>
 * 
 *  <dt>includeNoteResources</dt>
 *    <dd>
 *    If true, then the server will include the 'resources' field on all of
 *    the Notes that are in SyncChunk.notes.
 *    If 'includeNotes' is false, then this will have no effect.
 *    </dd>
 * 
 *  <dt>includeNoteAttributes</dt>
 *    <dd>
 *    If true, then the server will include the 'attributes' field on all of
 *    the Notes that are in SyncChunks.notes.
 *    If 'includeNotes' is false, then this will have no effect.
 *    </dd>
 * 
 *  <dt>includeNotebooks</dt>
 *    <dd>
 *    If true, then the server will include the SyncChunks.notebooks field
 *    </dd>
 * 
 *  <dt>includeTags</dt>
 *    <dd>
 *    If true, then the server will include the SyncChunks.tags field
 *    </dd>
 * 
 *  <dt>includeSearches</dt>
 *    <dd>
 *    If true, then the server will include the SyncChunks.searches field
 *    </dd>
 * 
 *  <dt>includeResources</dt>
 *    <dd>
 *    If true, then the server will include the SyncChunks.resources field.
 *    Since the Resources are also provided with their Note
 *    (in the Notes.resources list), this is primarily useful for clients that
 *    want to watch for changes to individual Resources due to recognition data
 *    being added.
 *    </dd>
 * 
 *  <dt>includeLinkedNotebooks</dt>
 *    <dd>
 *    If true, then the server will include the SyncChunks.linkedNotebooks field.
 *    </dd>
 * 
 *  <dt>includeExpunged</dt>
 *    <dd>
 *    If true, then the server will include the 'expunged' data for any type
 *    of included data.  For example, if 'includeTags' and 'includeExpunged'
 *    are both true, then the SyncChunks.expungedTags field will be set with
 *    the GUIDs of tags that have been expunged from the server.
 *    </dd>
 * 
 *  <dt>includeNoteApplicationDataFullMap</dt>
 *    <dd>
 *    If true, then the values for the applicationData map will be filled
 *    in, assuming notes and note attributes are being returned.  Otherwise,
 *    only the keysOnly field will be filled in.
 *    </dd>
 * 
 *  <dt>includeResourceApplicationDataFullMap</dt>
 *    <dd>
 *    If true, then the fullMap values for the applicationData map will be
 *    filled in, assuming resources and resource attributes are being returned
 *    (includeResources is true).  Otherwise, only the keysOnly field will be
 *    filled in.
 *    </dd>
 * 
 *  <dt>includeNoteResourceApplicationDataFullMap</dt>
 *    <dd>
 *    If true, then the fullMap values for the applicationData map will be
 *    filled in for resources found inside of notes, assuming resources are
 *    being returned in notes (includeNoteResources is true).  Otherwise,
 *    only the keysOnly field will be filled in.
 *    </dd>
 * 
 *  <dt>omitSharedNotebooks<dt>
 *    <dd>
 *    Normally, if 'includeNotebooks' is true, then the SyncChunks will
 *    include Notebooks that may include a set of SharedNotebook
 *    invitations via Notebook.sharedNotebookIds and Notebook.sharedNotebooks.
 *    However, if omitSharedNotebooks is set to true, then the Notebooks
 *    will omit those two fields and leave them unset. This should be used
 *    by clients who want to know their own set of Notebooks (and the
 *    associated permissions via Notebook.recipientSettings), and who
 *    do not need to know the full set of other people who can also see
 *    that same notebook.
 *    </dd>
 * 
 *  <dt>requireNoteContentClass</dt>
 *    <dd>
 *    If set, then only send notes whose content class matches this value.
 *    The value can be a literal match or, if the last character is an
 *    asterisk, a prefix match.
 *    </dd>
 * 
 *  <dt>notebookGuids</dt>
 *    <dd>
 *    If set, then restrict the returned notebooks, notes, and
 *    resources to those associated with one of the notebooks whose
 *    GUID is provided in this list.  If not set, then no filtering on
 *    notebook GUID will be performed.  If you set this field, you may
 *    not also set includeExpunged else an EDAMUserException with an
 *    error code of DATA_CONFLICT will be thrown.  You only need to set
 *    this field if you want to restrict the returned entities more
 *    than what your authentication token allows you to access.  For
 *    example, there is no need to set this field for single notebook
 *    tokens such as for shared notebooks.  You can use this field to
 *    synchronize a newly discovered business notebook while
 *    incrementally synchronizing a business account, in which case you
 *    will only need to consider setting includeNotes,
 *    includeNotebooks, includeNoteAttributes, includeNoteResources,
 *    and maybe some of the "FullMap" fields.
 *    </dd>
 * 
 *  <dt>includeSharedNotes</dt>
 *    <dd>
 *    If true, then the service will include the sharedNotes field on all
 *    notes that are in SyncChunk.notes. If 'includeNotes' is false, then
 *    this will have no effect.
 *    </dd>
 *  </dl>
 */
class SyncChunkFilter
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'includeNotes',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        2 => array(
            'var' => 'includeNoteResources',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        3 => array(
            'var' => 'includeNoteAttributes',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        4 => array(
            'var' => 'includeNotebooks',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'includeTags',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        6 => array(
            'var' => 'includeSearches',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'includeResources',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'includeLinkedNotebooks',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        9 => array(
            'var' => 'includeExpunged',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        10 => array(
            'var' => 'includeNoteApplicationDataFullMap',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        12 => array(
            'var' => 'includeResourceApplicationDataFullMap',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        13 => array(
            'var' => 'includeNoteResourceApplicationDataFullMap',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        17 => array(
            'var' => 'includeSharedNotes',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        16 => array(
            'var' => 'omitSharedNotebooks',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        11 => array(
            'var' => 'requireNoteContentClass',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'notebookGuids',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var bool
     */
    public $includeNotes = null;
    /**
     * @var bool
     */
    public $includeNoteResources = null;
    /**
     * @var bool
     */
    public $includeNoteAttributes = null;
    /**
     * @var bool
     */
    public $includeNotebooks = null;
    /**
     * @var bool
     */
    public $includeTags = null;
    /**
     * @var bool
     */
    public $includeSearches = null;
    /**
     * @var bool
     */
    public $includeResources = null;
    /**
     * @var bool
     */
    public $includeLinkedNotebooks = null;
    /**
     * @var bool
     */
    public $includeExpunged = null;
    /**
     * @var bool
     */
    public $includeNoteApplicationDataFullMap = null;
    /**
     * @var bool
     */
    public $includeResourceApplicationDataFullMap = null;
    /**
     * @var bool
     */
    public $includeNoteResourceApplicationDataFullMap = null;
    /**
     * @var bool
     */
    public $includeSharedNotes = null;
    /**
     * @var bool
     */
    public $omitSharedNotebooks = null;
    /**
     * @var string
     */
    public $requireNoteContentClass = null;
    /**
     * @var string[]
     */
    public $notebookGuids = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['includeNotes'])) {
                $this->includeNotes = $vals['includeNotes'];
            }
            if (isset($vals['includeNoteResources'])) {
                $this->includeNoteResources = $vals['includeNoteResources'];
            }
            if (isset($vals['includeNoteAttributes'])) {
                $this->includeNoteAttributes = $vals['includeNoteAttributes'];
            }
            if (isset($vals['includeNotebooks'])) {
                $this->includeNotebooks = $vals['includeNotebooks'];
            }
            if (isset($vals['includeTags'])) {
                $this->includeTags = $vals['includeTags'];
            }
            if (isset($vals['includeSearches'])) {
                $this->includeSearches = $vals['includeSearches'];
            }
            if (isset($vals['includeResources'])) {
                $this->includeResources = $vals['includeResources'];
            }
            if (isset($vals['includeLinkedNotebooks'])) {
                $this->includeLinkedNotebooks = $vals['includeLinkedNotebooks'];
            }
            if (isset($vals['includeExpunged'])) {
                $this->includeExpunged = $vals['includeExpunged'];
            }
            if (isset($vals['includeNoteApplicationDataFullMap'])) {
                $this->includeNoteApplicationDataFullMap = $vals['includeNoteApplicationDataFullMap'];
            }
            if (isset($vals['includeResourceApplicationDataFullMap'])) {
                $this->includeResourceApplicationDataFullMap = $vals['includeResourceApplicationDataFullMap'];
            }
            if (isset($vals['includeNoteResourceApplicationDataFullMap'])) {
                $this->includeNoteResourceApplicationDataFullMap = $vals['includeNoteResourceApplicationDataFullMap'];
            }
            if (isset($vals['includeSharedNotes'])) {
                $this->includeSharedNotes = $vals['includeSharedNotes'];
            }
            if (isset($vals['omitSharedNotebooks'])) {
                $this->omitSharedNotebooks = $vals['omitSharedNotebooks'];
            }
            if (isset($vals['requireNoteContentClass'])) {
                $this->requireNoteContentClass = $vals['requireNoteContentClass'];
            }
            if (isset($vals['notebookGuids'])) {
                $this->notebookGuids = $vals['notebookGuids'];
            }
        }
    }

    public function getName()
    {
        return 'SyncChunkFilter';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeNotes);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeNoteResources);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeNoteAttributes);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeNotebooks);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeTags);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeSearches);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeResources);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeLinkedNotebooks);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeExpunged);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeNoteApplicationDataFullMap);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeResourceApplicationDataFullMap);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeNoteResourceApplicationDataFullMap);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->includeSharedNotes);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->omitSharedNotebooks);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->requireNoteContentClass);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::SET) {
                        $this->notebookGuids = array();
                        $_size77 = 0;
                        $_etype80 = 0;
                        $xfer += $input->readSetBegin($_etype80, $_size77);
                        for ($_i81 = 0; $_i81 < $_size77; ++$_i81) {
                            $elem82 = null;
                            $xfer += $input->readString($elem82);
                            $this->notebookGuids[$elem82] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('SyncChunkFilter');
        if ($this->includeNotes !== null) {
            $xfer += $output->writeFieldBegin('includeNotes', TType::BOOL, 1);
            $xfer += $output->writeBool($this->includeNotes);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeNoteResources !== null) {
            $xfer += $output->writeFieldBegin('includeNoteResources', TType::BOOL, 2);
            $xfer += $output->writeBool($this->includeNoteResources);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeNoteAttributes !== null) {
            $xfer += $output->writeFieldBegin('includeNoteAttributes', TType::BOOL, 3);
            $xfer += $output->writeBool($this->includeNoteAttributes);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeNotebooks !== null) {
            $xfer += $output->writeFieldBegin('includeNotebooks', TType::BOOL, 4);
            $xfer += $output->writeBool($this->includeNotebooks);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeTags !== null) {
            $xfer += $output->writeFieldBegin('includeTags', TType::BOOL, 5);
            $xfer += $output->writeBool($this->includeTags);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeSearches !== null) {
            $xfer += $output->writeFieldBegin('includeSearches', TType::BOOL, 6);
            $xfer += $output->writeBool($this->includeSearches);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeResources !== null) {
            $xfer += $output->writeFieldBegin('includeResources', TType::BOOL, 7);
            $xfer += $output->writeBool($this->includeResources);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeLinkedNotebooks !== null) {
            $xfer += $output->writeFieldBegin('includeLinkedNotebooks', TType::BOOL, 8);
            $xfer += $output->writeBool($this->includeLinkedNotebooks);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeExpunged !== null) {
            $xfer += $output->writeFieldBegin('includeExpunged', TType::BOOL, 9);
            $xfer += $output->writeBool($this->includeExpunged);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeNoteApplicationDataFullMap !== null) {
            $xfer += $output->writeFieldBegin('includeNoteApplicationDataFullMap', TType::BOOL, 10);
            $xfer += $output->writeBool($this->includeNoteApplicationDataFullMap);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->requireNoteContentClass !== null) {
            $xfer += $output->writeFieldBegin('requireNoteContentClass', TType::STRING, 11);
            $xfer += $output->writeString($this->requireNoteContentClass);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeResourceApplicationDataFullMap !== null) {
            $xfer += $output->writeFieldBegin('includeResourceApplicationDataFullMap', TType::BOOL, 12);
            $xfer += $output->writeBool($this->includeResourceApplicationDataFullMap);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeNoteResourceApplicationDataFullMap !== null) {
            $xfer += $output->writeFieldBegin('includeNoteResourceApplicationDataFullMap', TType::BOOL, 13);
            $xfer += $output->writeBool($this->includeNoteResourceApplicationDataFullMap);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notebookGuids !== null) {
            if (!is_array($this->notebookGuids)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notebookGuids', TType::SET, 15);
            $output->writeSetBegin(TType::STRING, count($this->notebookGuids));
            foreach ($this->notebookGuids as $iter83 => $iter84) {
                $xfer += $output->writeString($iter83);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->omitSharedNotebooks !== null) {
            $xfer += $output->writeFieldBegin('omitSharedNotebooks', TType::BOOL, 16);
            $xfer += $output->writeBool($this->omitSharedNotebooks);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->includeSharedNotes !== null) {
            $xfer += $output->writeFieldBegin('includeSharedNotes', TType::BOOL, 17);
            $xfer += $output->writeBool($this->includeSharedNotes);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
