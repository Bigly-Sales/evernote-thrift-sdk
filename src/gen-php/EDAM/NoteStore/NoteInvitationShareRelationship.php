<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Describes an invitation to a person to use their Evernote credentials
 * to gain access to a note belonging to another user.
 * 
 * <dl>
 * <dt>displayName</dt>
 * <dd>The string that clients should show to users to represent this
 * invitation.</dd>
 * 
 * <dt>recipientIdentityId</dt>
 * <dd>Identifies the identity of the invitation recipient. Once the
 * identity has been claimed by an Evernote user and they have accessed
 * the note at least once, the invitation will be used up and will no
 * longer be returned by the service to clients. Instead, that recipient
 * will be included in the list of NoteMemberShareRelationships.</dd>
 * 
 * <dt>privilege</dt>
 * <dd>The privilege level that the recipient will be granted when they
 * accept this invitation. If the user already has a higher privilege to
 * access this note then this will not affect the recipient's privileges.</dd>
 * 
 * <dt>sharerUserId</dt>
 * <dd>The user id of the user who most recently shared this note to this
 * recipient. This field is used by the service to convey information
 * to the user, so clients should treat it as read-only.</dd>
 */
class NoteInvitationShareRelationship
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'displayName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'recipientIdentityId',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'privilege',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\Types\SharedNotePrivilegeLevel',
        ),
        5 => array(
            'var' => 'sharerUserId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $displayName = null;
    /**
     * @var int
     */
    public $recipientIdentityId = null;
    /**
     * @var int
     */
    public $privilege = null;
    /**
     * @var int
     */
    public $sharerUserId = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['displayName'])) {
                $this->displayName = $vals['displayName'];
            }
            if (isset($vals['recipientIdentityId'])) {
                $this->recipientIdentityId = $vals['recipientIdentityId'];
            }
            if (isset($vals['privilege'])) {
                $this->privilege = $vals['privilege'];
            }
            if (isset($vals['sharerUserId'])) {
                $this->sharerUserId = $vals['sharerUserId'];
            }
        }
    }

    public function getName()
    {
        return 'NoteInvitationShareRelationship';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->displayName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->recipientIdentityId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->privilege);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->sharerUserId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('NoteInvitationShareRelationship');
        if ($this->displayName !== null) {
            $xfer += $output->writeFieldBegin('displayName', TType::STRING, 1);
            $xfer += $output->writeString($this->displayName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->recipientIdentityId !== null) {
            $xfer += $output->writeFieldBegin('recipientIdentityId', TType::I64, 2);
            $xfer += $output->writeI64($this->recipientIdentityId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->privilege !== null) {
            $xfer += $output->writeFieldBegin('privilege', TType::I32, 3);
            $xfer += $output->writeI32($this->privilege);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sharerUserId !== null) {
            $xfer += $output->writeFieldBegin('sharerUserId', TType::I32, 5);
            $xfer += $output->writeI32($this->sharerUserId);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
