<?php
namespace EDAM\Limits;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

final class Constant extends \Thrift\Type\TConstant
{
    static protected $EDAM_ATTRIBUTE_LEN_MIN;
    static protected $EDAM_ATTRIBUTE_LEN_MAX;
    static protected $EDAM_ATTRIBUTE_REGEX;
    static protected $EDAM_ATTRIBUTE_LIST_MAX;
    static protected $EDAM_ATTRIBUTE_MAP_MAX;
    static protected $EDAM_GUID_LEN_MIN;
    static protected $EDAM_GUID_LEN_MAX;
    static protected $EDAM_GUID_REGEX;
    static protected $EDAM_EMAIL_LEN_MIN;
    static protected $EDAM_EMAIL_LEN_MAX;
    static protected $EDAM_EMAIL_LOCAL_REGEX;
    static protected $EDAM_EMAIL_DOMAIN_REGEX;
    static protected $EDAM_EMAIL_REGEX;
    static protected $EDAM_VAT_REGEX;
    static protected $EDAM_TIMEZONE_LEN_MIN;
    static protected $EDAM_TIMEZONE_LEN_MAX;
    static protected $EDAM_TIMEZONE_REGEX;
    static protected $EDAM_MIME_LEN_MIN;
    static protected $EDAM_MIME_LEN_MAX;
    static protected $EDAM_MIME_REGEX;
    static protected $EDAM_MIME_TYPE_GIF;
    static protected $EDAM_MIME_TYPE_JPEG;
    static protected $EDAM_MIME_TYPE_PNG;
    static protected $EDAM_MIME_TYPE_TIFF;
    static protected $EDAM_MIME_TYPE_BMP;
    static protected $EDAM_MIME_TYPE_WAV;
    static protected $EDAM_MIME_TYPE_MP3;
    static protected $EDAM_MIME_TYPE_AMR;
    static protected $EDAM_MIME_TYPE_AAC;
    static protected $EDAM_MIME_TYPE_M4A;
    static protected $EDAM_MIME_TYPE_MP4_VIDEO;
    static protected $EDAM_MIME_TYPE_INK;
    static protected $EDAM_MIME_TYPE_PDF;
    static protected $EDAM_MIME_TYPE_DEFAULT;
    static protected $EDAM_MIME_TYPES;
    static protected $EDAM_INDEXABLE_RESOURCE_MIME_TYPES;
    static protected $EDAM_INDEXABLE_PLAINTEXT_MIME_TYPES;
    static protected $EDAM_SEARCH_QUERY_LEN_MIN;
    static protected $EDAM_SEARCH_QUERY_LEN_MAX;
    static protected $EDAM_SEARCH_QUERY_REGEX;
    static protected $EDAM_HASH_LEN;
    static protected $EDAM_USER_USERNAME_LEN_MIN;
    static protected $EDAM_USER_USERNAME_LEN_MAX;
    static protected $EDAM_USER_USERNAME_REGEX;
    static protected $EDAM_USER_NAME_LEN_MIN;
    static protected $EDAM_USER_NAME_LEN_MAX;
    static protected $EDAM_USER_NAME_REGEX;
    static protected $EDAM_TAG_NAME_LEN_MIN;
    static protected $EDAM_TAG_NAME_LEN_MAX;
    static protected $EDAM_TAG_NAME_REGEX;
    static protected $EDAM_NOTE_TITLE_LEN_MIN;
    static protected $EDAM_NOTE_TITLE_LEN_MAX;
    static protected $EDAM_NOTE_TITLE_REGEX;
    static protected $EDAM_NOTE_CONTENT_LEN_MIN;
    static protected $EDAM_NOTE_CONTENT_LEN_MAX;
    static protected $EDAM_APPLICATIONDATA_NAME_LEN_MIN;
    static protected $EDAM_APPLICATIONDATA_NAME_LEN_MAX;
    static protected $EDAM_APPLICATIONDATA_VALUE_LEN_MIN;
    static protected $EDAM_APPLICATIONDATA_VALUE_LEN_MAX;
    static protected $EDAM_APPLICATIONDATA_ENTRY_LEN_MAX;
    static protected $EDAM_APPLICATIONDATA_NAME_REGEX;
    static protected $EDAM_APPLICATIONDATA_VALUE_REGEX;
    static protected $EDAM_NOTEBOOK_NAME_LEN_MIN;
    static protected $EDAM_NOTEBOOK_NAME_LEN_MAX;
    static protected $EDAM_NOTEBOOK_NAME_REGEX;
    static protected $EDAM_NOTEBOOK_STACK_LEN_MIN;
    static protected $EDAM_NOTEBOOK_STACK_LEN_MAX;
    static protected $EDAM_NOTEBOOK_STACK_REGEX;
    static protected $EDAM_WORKSPACE_NAME_LEN_MIN;
    static protected $EDAM_WORKSPACE_NAME_LEN_MAX;
    static protected $EDAM_WORKSPACE_DESCRIPTION_LEN_MAX;
    static protected $EDAM_WORKSPACE_NAME_REGEX;
    static protected $EDAM_PUBLISHING_URI_LEN_MIN;
    static protected $EDAM_PUBLISHING_URI_LEN_MAX;
    static protected $EDAM_PUBLISHING_URI_REGEX;
    static protected $EDAM_PUBLISHING_URI_PROHIBITED;
    static protected $EDAM_PUBLISHING_DESCRIPTION_LEN_MIN;
    static protected $EDAM_PUBLISHING_DESCRIPTION_LEN_MAX;
    static protected $EDAM_PUBLISHING_DESCRIPTION_REGEX;
    static protected $EDAM_SAVED_SEARCH_NAME_LEN_MIN;
    static protected $EDAM_SAVED_SEARCH_NAME_LEN_MAX;
    static protected $EDAM_SAVED_SEARCH_NAME_REGEX;
    static protected $EDAM_USER_PASSWORD_LEN_MIN;
    static protected $EDAM_USER_PASSWORD_LEN_MAX;
    static protected $EDAM_USER_PASSWORD_REGEX;
    static protected $EDAM_BUSINESS_URI_LEN_MAX;
    static protected $EDAM_BUSINESS_MARKETING_CODE_REGEX_PATTERN;
    static protected $EDAM_NOTE_TAGS_MAX;
    static protected $EDAM_NOTE_RESOURCES_MAX;
    static protected $EDAM_USER_TAGS_MAX;
    static protected $EDAM_BUSINESS_TAGS_MAX;
    static protected $EDAM_USER_SAVED_SEARCHES_MAX;
    static protected $EDAM_USER_NOTES_MAX;
    static protected $EDAM_BUSINESS_NOTES_MAX;
    static protected $EDAM_USER_NOTEBOOKS_MAX;
    static protected $EDAM_USER_WORKSPACES_MAX;
    static protected $EDAM_BUSINESS_NOTEBOOKS_MAX;
    static protected $EDAM_BUSINESS_WORKSPACES_MAX;
    static protected $EDAM_USER_RECENT_MAILED_ADDRESSES_MAX;
    static protected $EDAM_USER_MAIL_LIMIT_DAILY_FREE;
    static protected $EDAM_USER_MAIL_LIMIT_DAILY_PREMIUM;
    static protected $EDAM_USER_UPLOAD_LIMIT_FREE;
    static protected $EDAM_USER_UPLOAD_LIMIT_PREMIUM;
    static protected $EDAM_USER_UPLOAD_LIMIT_BUSINESS_FIRST_MONTH;
    static protected $EDAM_USER_UPLOAD_LIMIT_BUSINESS_NEXT_MONTH;
    static protected $EDAM_USER_UPLOAD_LIMIT_PLUS;
    static protected $EDAM_USER_UPLOAD_SURVEY_THRESHOLD;
    static protected $EDAM_USER_UPLOAD_LIMIT_BUSINESS;
    static protected $EDAM_USER_UPLOAD_LIMIT_BUSINESS_PER_USER;
    static protected $EDAM_NOTE_SIZE_MAX_FREE;
    static protected $EDAM_NOTE_SIZE_MAX_PREMIUM;
    static protected $EDAM_RESOURCE_SIZE_MAX_FREE;
    static protected $EDAM_RESOURCE_SIZE_MAX_PREMIUM;
    static protected $EDAM_USER_LINKED_NOTEBOOK_MAX;
    static protected $EDAM_USER_LINKED_NOTEBOOK_MAX_PREMIUM;
    static protected $EDAM_NOTEBOOK_BUSINESS_SHARED_NOTEBOOK_MAX;
    static protected $EDAM_NOTEBOOK_PERSONAL_SHARED_NOTEBOOK_MAX;
    static protected $EDAM_NOTE_BUSINESS_SHARED_NOTE_MAX;
    static protected $EDAM_NOTE_PERSONAL_SHARED_NOTE_MAX;
    static protected $EDAM_NOTE_CONTENT_CLASS_LEN_MIN;
    static protected $EDAM_NOTE_CONTENT_CLASS_LEN_MAX;
    static protected $EDAM_NOTE_CONTENT_CLASS_REGEX;
    static protected $EDAM_HELLO_APP_CONTENT_CLASS_PREFIX;
    static protected $EDAM_FOOD_APP_CONTENT_CLASS_PREFIX;
    static protected $EDAM_CONTENT_CLASS_HELLO_ENCOUNTER;
    static protected $EDAM_CONTENT_CLASS_HELLO_PROFILE;
    static protected $EDAM_CONTENT_CLASS_FOOD_MEAL;
    static protected $EDAM_CONTENT_CLASS_SKITCH_PREFIX;
    static protected $EDAM_CONTENT_CLASS_SKITCH;
    static protected $EDAM_CONTENT_CLASS_SKITCH_PDF;
    static protected $EDAM_CONTENT_CLASS_PENULTIMATE_PREFIX;
    static protected $EDAM_CONTENT_CLASS_PENULTIMATE_NOTEBOOK;
    static protected $EDAM_SOURCE_APPLICATION_POSTIT;
    static protected $EDAM_SOURCE_APPLICATION_MOLESKINE;
    static protected $EDAM_SOURCE_APPLICATION_EN_SCANSNAP;
    static protected $EDAM_SOURCE_APPLICATION_EWC;
    static protected $EDAM_SOURCE_APPLICATION_ANDROID_SHARE_EXTENSION;
    static protected $EDAM_SOURCE_APPLICATION_IOS_SHARE_EXTENSION;
    static protected $EDAM_SOURCE_APPLICATION_WEB_CLIPPER;
    static protected $EDAM_SOURCE_OUTLOOK_CLIPPER;
    static protected $EDAM_NOTE_TITLE_QUALITY_UNTITLED;
    static protected $EDAM_NOTE_TITLE_QUALITY_LOW;
    static protected $EDAM_NOTE_TITLE_QUALITY_MEDIUM;
    static protected $EDAM_NOTE_TITLE_QUALITY_HIGH;
    static protected $EDAM_RELATED_PLAINTEXT_LEN_MIN;
    static protected $EDAM_RELATED_PLAINTEXT_LEN_MAX;
    static protected $EDAM_RELATED_MAX_NOTES;
    static protected $EDAM_RELATED_MAX_NOTEBOOKS;
    static protected $EDAM_RELATED_MAX_TAGS;
    static protected $EDAM_RELATED_MAX_EXPERTS;
    static protected $EDAM_RELATED_MAX_RELATED_CONTENT;
    static protected $EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MIN;
    static protected $EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MAX;
    static protected $EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_REGEX;
    static protected $EDAM_BUSINESS_PHONE_NUMBER_LEN_MAX;
    static protected $EDAM_PREFERENCE_NAME_LEN_MIN;
    static protected $EDAM_PREFERENCE_NAME_LEN_MAX;
    static protected $EDAM_PREFERENCE_VALUE_LEN_MIN;
    static protected $EDAM_PREFERENCE_VALUE_LEN_MAX;
    static protected $EDAM_MAX_PREFERENCES;
    static protected $EDAM_MAX_VALUES_PER_PREFERENCE;
    static protected $EDAM_PREFERENCE_ONLY_ONE_VALUE_LEN_MAX;
    static protected $EDAM_PREFERENCE_NAME_REGEX;
    static protected $EDAM_PREFERENCE_VALUE_REGEX;
    static protected $EDAM_PREFERENCE_ONLY_ONE_VALUE_REGEX;
    static protected $EDAM_PREFERENCE_SHORTCUTS;
    static protected $EDAM_PREFERENCE_BUSINESS_DEFAULT_NOTEBOOK;
    static protected $EDAM_PREFERENCE_BUSINESS_QUICKNOTE;
    static protected $EDAM_PREFERENCE_SHORTCUTS_MAX_VALUES;
    static protected $EDAM_DEVICE_ID_LEN_MAX;
    static protected $EDAM_DEVICE_ID_REGEX;
    static protected $EDAM_DEVICE_DESCRIPTION_LEN_MAX;
    static protected $EDAM_DEVICE_DESCRIPTION_REGEX;
    static protected $EDAM_SEARCH_SUGGESTIONS_MAX;
    static protected $EDAM_SEARCH_SUGGESTIONS_PREFIX_LEN_MAX;
    static protected $EDAM_SEARCH_SUGGESTIONS_PREFIX_LEN_MIN;
    static protected $EDAM_FIND_CONTACT_DEFAULT_MAX_RESULTS;
    static protected $EDAM_FIND_CONTACT_MAX_RESULTS;
    static protected $EDAM_NOTE_LOCK_VIEWERS_NOTES_MAX;
    static protected $EDAM_GET_ORDERS_MAX_RESULTS;
    static protected $EDAM_MESSAGE_BODY_LEN_MAX;
    static protected $EDAM_MESSAGE_BODY_REGEX;
    static protected $EDAM_MESSAGE_RECIPIENTS_MAX;
    static protected $EDAM_MESSAGE_ATTACHMENTS_MAX;
    static protected $EDAM_MESSAGE_ATTACHMENT_TITLE_LEN_MAX;
    static protected $EDAM_MESSAGE_ATTACHMENT_TITLE_REGEX;
    static protected $EDAM_MESSAGE_ATTACHMENT_SNIPPET_LEN_MAX;
    static protected $EDAM_MESSAGE_ATTACHMENT_SNIPPET_REGEX;
    static protected $EDAM_USER_PROFILE_PHOTO_MAX_BYTES;
    static protected $EDAM_PROMOTION_ID_LEN_MAX;
    static protected $EDAM_PROMOTION_ID_REGEX;
    static protected $EDAM_APP_RATING_MIN;
    static protected $EDAM_APP_RATING_MAX;
    static protected $EDAM_SNIPPETS_NOTES_MAX;
    static protected $EDAM_CONNECTED_IDENTITY_REQUEST_MAX;
    static protected $EDAM_OPEN_ID_ACCESS_TOKEN_MAX;

    protected static function init_EDAM_ATTRIBUTE_LEN_MIN()
    {
        return         /**
         * Minimum length of any string-based attribute, in Unicode chars
         */
1;
    }

    protected static function init_EDAM_ATTRIBUTE_LEN_MAX()
    {
        return         /**
         * Maximum length of any string-based attribute, in Unicode chars
         */
4096;
    }

    protected static function init_EDAM_ATTRIBUTE_REGEX()
    {
        return         /**
         * Any string-based attribute must match the provided regular expression.
         * This excludes all Unicode line endings and control characters.
         */
"^[^\\p{Cc}\\p{Zl}\\p{Zp}]{1,4096}\$";
    }

    protected static function init_EDAM_ATTRIBUTE_LIST_MAX()
    {
        return         /**
         * The maximum number of values that can be stored in a list-based attribute
         * (e.g. see UserAttributes.recentMailedAddresses)
         */
100;
    }

    protected static function init_EDAM_ATTRIBUTE_MAP_MAX()
    {
        return         /**
         * The maximum number of entries that can be stored in a map-based attribute
         * such as applicationData fields in Resources and Notes.
         */
100;
    }

    protected static function init_EDAM_GUID_LEN_MIN()
    {
        return         /**
         * The minimum length of a GUID generated by the Evernote service
         */
36;
    }

    protected static function init_EDAM_GUID_LEN_MAX()
    {
        return         /**
         * The maximum length of a GUID generated by the Evernote service
         */
36;
    }

    protected static function init_EDAM_GUID_REGEX()
    {
        return         /**
         * GUIDs generated by the Evernote service will match the provided pattern
         */
"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\$";
    }

    protected static function init_EDAM_EMAIL_LEN_MIN()
    {
        return         /**
         * The minimum length of any email address
         */
6;
    }

    protected static function init_EDAM_EMAIL_LEN_MAX()
    {
        return         /**
         * The maximum length of any email address
         */
255;
    }

    protected static function init_EDAM_EMAIL_LOCAL_REGEX()
    {
        return         /**
         * A regular expression that matches the part of an email address before
         * the '@' symbol.
         */
"^[A-Za-z0-9!#\$%&'*+/=?^_`{|}~-]+(\\.[A-Za-z0-9!#\$%&'*+/=?^_`{|}~-]+)*\$";
    }

    protected static function init_EDAM_EMAIL_DOMAIN_REGEX()
    {
        return         /**
         * A regular expression that matches the part of an email address after
         * the '@' symbol.
         */
"^[A-Za-z0-9-]*[A-Za-z0-9](\\.[A-Za-z0-9-]*[A-Za-z0-9])*\\.([A-Za-z]{2,})\$";
    }

    protected static function init_EDAM_EMAIL_REGEX()
    {
        return         /**
         * A regular expression that must match any email address given to Evernote.
         * Email addresses must comply with RFC 2821 and 2822.
         */
"^[A-Za-z0-9!#\$%&'*+/=?^_`{|}~-]+(\\.[A-Za-z0-9!#\$%&'*+/=?^_`{|}~-]+)*@[A-Za-z0-9-]*[A-Za-z0-9](\\.[A-Za-z0-9-]*[A-Za-z0-9])*\\.([A-Za-z]{2,})\$";
    }

    protected static function init_EDAM_VAT_REGEX()
    {
        return         /**
         * A regular expression that must match any VAT ID given to Evernote.
         * ref http://en.wikipedia.org/wiki/VAT_identification_number
         * ref http://my.safaribooksonline.com/book/programming/regular-expressions/9780596802837/4dot-validation-and-formatting/id2995136
         */
"^(AT)?U[0-9]{8}\$|^(BE)?0?[0-9]{9}\$|^(BG)?[0-9]{9,10}\$|^(CY)?[0-9]{8}L\$|^(CZ)?[0-9]{8,10}\$|^(DE)?[0-9]{9}\$|^(DK)?[0-9]{8}\$|^(EE)?[0-9]{9}\$|^(EL|GR)?[0-9]{9}\$|^(ES)?[0-9A-Z][0-9]{7}[0-9A-Z]\$|^(FI)?[0-9]{8}\$|^(FR)?[0-9A-Z]{2}[0-9]{9}\$|^(GB)?([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})\$|^(HU)?[0-9]{8}\$|^(IE)?[0-9]{7}[A-Z]{1,2}\$|^(IT)?[0-9]{11}\$|^(LT)?([0-9]{9}|[0-9]{12})\$|^(LU)?[0-9]{8}\$|^(LV)?[0-9]{11}\$|^(MT)?[0-9]{8}\$|^(NL)?[0-9]{9}B[0-9]{2}\$|^(PL)?[0-9]{10}\$|^(PT)?[0-9]{9}\$|^(RO)?[0-9]{2,10}\$|^(SE)?[0-9]{12}\$|^(SI)?[0-9]{8}\$|^(SK)?[0-9]{10}\$|^[0-9]{9}MVA\$|^[0-9]{6}\$|^CHE[0-9]{9}(TVA|MWST|IVA)\$";
    }

    protected static function init_EDAM_TIMEZONE_LEN_MIN()
    {
        return         /**
         * The minimum length of a timezone specification string
         */
1;
    }

    protected static function init_EDAM_TIMEZONE_LEN_MAX()
    {
        return         /**
         * The maximum length of a timezone specification string
         */
32;
    }

    protected static function init_EDAM_TIMEZONE_REGEX()
    {
        return         /**
         * Any timezone string given to Evernote must match the provided pattern.
         * This permits either a locale-based standard timezone or a GMT offset.
         * E.g.:<ul>
         *    <li>America/Los_Angeles</li>
         *    <li>GMT+08:00</li>
         * </ul>
         */
"^([A-Za-z_-]+(/[A-Za-z_-]+)*)|(GMT(-|\\+)[0-9]{1,2}(:[0-9]{2})?)\$";
    }

    protected static function init_EDAM_MIME_LEN_MIN()
    {
        return         /**
         * The minimum length of any MIME type string given to Evernote
         */
3;
    }

    protected static function init_EDAM_MIME_LEN_MAX()
    {
        return         /**
         * The maximum length of any MIME type string given to Evernote
         */
255;
    }

    protected static function init_EDAM_MIME_REGEX()
    {
        return         /**
         * Any MIME type string given to Evernote must match the provided pattern.
         * E.g.:  image/gif
         */
"^[A-Za-z]+/[A-Za-z0-9._+-]+\$";
    }

    protected static function init_EDAM_MIME_TYPE_GIF()
    {
        return         /**
         * Canonical MIME type string for GIF image resources
         */
"image/gif";
    }

    protected static function init_EDAM_MIME_TYPE_JPEG()
    {
        return         /**
         * Canonical MIME type string for JPEG image resources
         */
"image/jpeg";
    }

    protected static function init_EDAM_MIME_TYPE_PNG()
    {
        return         /**
         * Canonical MIME type string for PNG image resources
         */
"image/png";
    }

    protected static function init_EDAM_MIME_TYPE_TIFF()
    {
        return         /**
         * Canonical MIME type string for TIFF image resources
         */
"image/tiff";
    }

    protected static function init_EDAM_MIME_TYPE_BMP()
    {
        return         /**
         * Canonical MIME type string for BMP image resources
         */
"image/bmp";
    }

    protected static function init_EDAM_MIME_TYPE_WAV()
    {
        return         /**
         * Canonical MIME type string for WAV audio resources
         */
"audio/wav";
    }

    protected static function init_EDAM_MIME_TYPE_MP3()
    {
        return         /**
         * Canonical MIME type string for MP3 audio resources
         */
"audio/mpeg";
    }

    protected static function init_EDAM_MIME_TYPE_AMR()
    {
        return         /**
         * Canonical MIME type string for AMR audio resources
         */
"audio/amr";
    }

    protected static function init_EDAM_MIME_TYPE_AAC()
    {
        return         /**
         * Canonical MIME type string for AAC audio resources
         */
"audio/aac";
    }

    protected static function init_EDAM_MIME_TYPE_M4A()
    {
        return         /**
         * Canonical MIME type string for MP4 audio resources
         */
"audio/mp4";
    }

    protected static function init_EDAM_MIME_TYPE_MP4_VIDEO()
    {
        return         /**
         * Canonical MIME type string for MP4 video resources
         */
"video/mp4";
    }

    protected static function init_EDAM_MIME_TYPE_INK()
    {
        return         /**
         * Canonical MIME type string for Evernote Ink resources
         */
"application/vnd.evernote.ink";
    }

    protected static function init_EDAM_MIME_TYPE_PDF()
    {
        return         /**
         * Canonical MIME type string for PDF resources
         */
"application/pdf";
    }

    protected static function init_EDAM_MIME_TYPE_DEFAULT()
    {
        return         /**
         * MIME type used for attachments of an unspecified type
         */
"application/octet-stream";
    }

    protected static function init_EDAM_MIME_TYPES()
    {
        return         /**
         * The set of resource MIME types that are expected to be handled
         * correctly by all of the major Evernote client applications.
         */
array(
            "image/gif" => true,
            "image/jpeg" => true,
            "image/png" => true,
            "audio/wav" => true,
            "audio/mpeg" => true,
            "audio/amr" => true,
            "application/vnd.evernote.ink" => true,
            "application/pdf" => true,
            "video/mp4" => true,
            "audio/aac" => true,
            "audio/mp4" => true,
        );
    }

    protected static function init_EDAM_INDEXABLE_RESOURCE_MIME_TYPES()
    {
        return         /**
         * The set of MIME types that Evernote will parse and index for
         * searching. With exception of images, PDFs and plain text files,
         * which are handled in a different way.
         */
array(
            "application/msword" => true,
            "application/mspowerpoint" => true,
            "application/excel" => true,
            "application/vnd.ms-word" => true,
            "application/vnd.ms-powerpoint" => true,
            "application/vnd.ms-excel" => true,
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document" => true,
            "application/vnd.openxmlformats-officedocument.presentationml.presentation" => true,
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" => true,
            "application/vnd.apple.pages" => true,
            "application/vnd.apple.numbers" => true,
            "application/vnd.apple.keynote" => true,
            "application/x-iwork-pages-sffpages" => true,
            "application/x-iwork-numbers-sffnumbers" => true,
            "application/x-iwork-keynote-sffkey" => true,
        );
    }

    protected static function init_EDAM_INDEXABLE_PLAINTEXT_MIME_TYPES()
    {
        return         /**
         * The set of plain text MIME types that Evernote will parse and index
         * for searching. The MIME types which start with "text/" will be handled
         * separately by each client (i.e. hard-coded in each client).
         */
array(
            "application/x-sh" => true,
            "application/x-bsh" => true,
            "application/sql" => true,
            "application/x-sql" => true,
        );
    }

    protected static function init_EDAM_SEARCH_QUERY_LEN_MIN()
    {
        return         /**
         * The minimum length of a user search query string in Unicode chars
         */
0;
    }

    protected static function init_EDAM_SEARCH_QUERY_LEN_MAX()
    {
        return         /**
         * The maximum length of a user search query string in Unicode chars
         */
1024;
    }

    protected static function init_EDAM_SEARCH_QUERY_REGEX()
    {
        return         /**
         * Search queries must match the provided pattern.  This is used for
         * both ad-hoc queries and SavedSearch.query fields.
         * This excludes all control characters and line/paragraph separators.
         */
"^[^\\p{Cc}\\p{Zl}\\p{Zp}]{0,1024}\$";
    }

    protected static function init_EDAM_HASH_LEN()
    {
        return         /**
         * The exact length of a MD5 hash checksum, in binary bytes.
         * This is the exact length that must be matched for any binary hash
         * value.
         */
16;
    }

    protected static function init_EDAM_USER_USERNAME_LEN_MIN()
    {
        return         /**
         * The minimum length of an Evernote username
         */
1;
    }

    protected static function init_EDAM_USER_USERNAME_LEN_MAX()
    {
        return         /**
         * The maximum length of an Evernote username
         */
64;
    }

    protected static function init_EDAM_USER_USERNAME_REGEX()
    {
        return         /**
         * Any Evernote User.username field must match this pattern.  This
         * restricts usernames to a format that could permit use as a domain
         * name component.  E.g. "username.whatever.evernote.com"
         */
"^[a-z0-9]([a-z0-9_-]{0,62}[a-z0-9])?\$";
    }

    protected static function init_EDAM_USER_NAME_LEN_MIN()
    {
        return         /**
         * Minimum length of the User.name field
         */
1;
    }

    protected static function init_EDAM_USER_NAME_LEN_MAX()
    {
        return         /**
         * Maximum length of the User.name field
         */
255;
    }

    protected static function init_EDAM_USER_NAME_REGEX()
    {
        return         /**
         * The User.name field must match this pattern, which excludes line
         * endings and control characters.
         */
"^[^\\p{Cc}\\p{Zl}\\p{Zp}]{1,255}\$";
    }

    protected static function init_EDAM_TAG_NAME_LEN_MIN()
    {
        return         /**
         * The minimum length of a Tag.name, in Unicode characters
         */
1;
    }

    protected static function init_EDAM_TAG_NAME_LEN_MAX()
    {
        return         /**
         * The maximum length of a Tag.name, in Unicode characters
         */
100;
    }

    protected static function init_EDAM_TAG_NAME_REGEX()
    {
        return         /**
         * All Tag.name fields must match this pattern.
         * This excludes control chars, commas or line/paragraph separators.
         * The string may not begin or end with whitespace.
         */
"^[^,\\p{Cc}\\p{Z}]([^,\\p{Cc}\\p{Zl}\\p{Zp}]{0,98}[^,\\p{Cc}\\p{Z}])?\$";
    }

    protected static function init_EDAM_NOTE_TITLE_LEN_MIN()
    {
        return         /**
         * The minimum length of a Note.title, in Unicode characters
         */
1;
    }

    protected static function init_EDAM_NOTE_TITLE_LEN_MAX()
    {
        return         /**
         * The maximum length of a Note.title, in Unicode characters
         */
255;
    }

    protected static function init_EDAM_NOTE_TITLE_REGEX()
    {
        return         /**
         * All Note.title fields must match this pattern.
         * This excludes control chars or line/paragraph separators.
         * The string may not begin or end with whitespace.
         */
"^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,253}[^\\p{Cc}\\p{Z}])?\$";
    }

    protected static function init_EDAM_NOTE_CONTENT_LEN_MIN()
    {
        return         /**
         * Minimum length of a Note.content field.
         * Note.content fields must comply with the ENML DTD.
         */
0;
    }

    protected static function init_EDAM_NOTE_CONTENT_LEN_MAX()
    {
        return         /**
         * Maximum length of a Note.content field
         * Note.content fields must comply with the ENML DTD.
         */
5242880;
    }

    protected static function init_EDAM_APPLICATIONDATA_NAME_LEN_MIN()
    {
        return         /**
         * Minimum length of an application name, which is the key in an
         * applicationData LazyMap found in entities such as Resources and
         * Notes.
         */
3;
    }

    protected static function init_EDAM_APPLICATIONDATA_NAME_LEN_MAX()
    {
        return         /**
         * Maximum length of an application name, which is the key in an
         * applicationData LazyMap found in entities such as Resources and
         * Notes.
         */
32;
    }

    protected static function init_EDAM_APPLICATIONDATA_VALUE_LEN_MIN()
    {
        return         /**
         * Minimum length of an applicationData value in a LazyMap, found
         * in entities such as Resources and Notes.
         */
0;
    }

    protected static function init_EDAM_APPLICATIONDATA_VALUE_LEN_MAX()
    {
        return         /**
         * Maximum length of an applicationData value in a LazyMap, found
         * in entities such as Resources and Notes.  Note, however, that
         * the sum of the size of hte key and value is constrained by
         * EDAM_APPLICATIONDATA_ENTRY_LEN_MAX, so the maximum length, in
         * practice, depends upon the key value being used.
         */
4092;
    }

    protected static function init_EDAM_APPLICATIONDATA_ENTRY_LEN_MAX()
    {
        return         /**
         * The total length of an entry in an applicationData LazyMap, which
         * is the sum of the length of the key and the value for the entry.
         */
4095;
    }

    protected static function init_EDAM_APPLICATIONDATA_NAME_REGEX()
    {
        return         /**
         * An application name must match this regex.  An application
         * name is the key portion of an entry in an applicationData
         * map as found in entities such as Resources and Notes.
         * Note that even if both the name and value regexes match,
         * it is still necessary to check the sum of the lengths
         * against EDAM_APPLICATIONDATA_ENTRY_LEN_MAX.
         */
"^[A-Za-z0-9_.-]{3,32}\$";
    }

    protected static function init_EDAM_APPLICATIONDATA_VALUE_REGEX()
    {
        return         /**
         * An applicationData map value must match this regex.
         * Note that even if both the name and value regexes match,
         * it is still necessary to check the sum of the lengths
         * against EDAM_APPLICATIONDATA_ENTRY_LEN_MAX.
         */
"^[\\p{Space}[^\\p{Cc}]]{0,4092}\$";
    }

    protected static function init_EDAM_NOTEBOOK_NAME_LEN_MIN()
    {
        return         /**
         * The minimum length of a Notebook.name, in Unicode characters
         */
1;
    }

    protected static function init_EDAM_NOTEBOOK_NAME_LEN_MAX()
    {
        return         /**
         * The maximum length of a Notebook.name, in Unicode characters
         */
100;
    }

    protected static function init_EDAM_NOTEBOOK_NAME_REGEX()
    {
        return         /**
         * All Notebook.name fields must match this pattern.
         * This excludes control chars or line/paragraph separators.
         * The string may not begin or end with whitespace.
         */
"^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,98}[^\\p{Cc}\\p{Z}])?\$";
    }

    protected static function init_EDAM_NOTEBOOK_STACK_LEN_MIN()
    {
        return         /**
         * The minimum length of a Notebook.stack, in Unicode characters
         */
1;
    }

    protected static function init_EDAM_NOTEBOOK_STACK_LEN_MAX()
    {
        return         /**
         * The maximum length of a Notebook.stack, in Unicode characters
         */
100;
    }

    protected static function init_EDAM_NOTEBOOK_STACK_REGEX()
    {
        return         /**
         * All Notebook.stack fields must match this pattern.
         * This excludes control chars or line/paragraph separators.
         * The string may not begin or end with whitespace.
         */
"^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,98}[^\\p{Cc}\\p{Z}])?\$";
    }

    protected static function init_EDAM_WORKSPACE_NAME_LEN_MIN()
    {
        return         /**
         * The minimum length of a Workspace.name, in Unicode characters
         */
1;
    }

    protected static function init_EDAM_WORKSPACE_NAME_LEN_MAX()
    {
        return         /**
         * The maximum length of a Workspace.name, in Unicode characters
         */
100;
    }

    protected static function init_EDAM_WORKSPACE_DESCRIPTION_LEN_MAX()
    {
        return         /**
         * The maximum length of a Workspace.description, in Unicode characters
         */
600;
    }

    protected static function init_EDAM_WORKSPACE_NAME_REGEX()
    {
        return         /**
         * All Workspace.name fields must match this pattern.
         * This excludes control chars or line/paragraph separators.
         * The string may not begin or end with whitespace.
         */
"^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,98}[^\\p{Cc}\\p{Z}])?\$";
    }

    protected static function init_EDAM_PUBLISHING_URI_LEN_MIN()
    {
        return         /**
         * The minimum length of a public notebook URI component
         */
1;
    }

    protected static function init_EDAM_PUBLISHING_URI_LEN_MAX()
    {
        return         /**
         * The maximum length of a public notebook URI component
         */
255;
    }

    protected static function init_EDAM_PUBLISHING_URI_REGEX()
    {
        return         /**
         * A public notebook URI component must match the provided pattern
         */
"^[a-zA-Z0-9.~_+-]{1,255}\$";
    }

    protected static function init_EDAM_PUBLISHING_URI_PROHIBITED()
    {
        return         /**
         * The set of strings that may not be used as a publishing URI
         */
array(
            "." => true,
            ".." => true,
        );
    }

    protected static function init_EDAM_PUBLISHING_DESCRIPTION_LEN_MIN()
    {
        return         /**
         * The minimum length of a Publishing.publicDescription field.
         */
1;
    }

    protected static function init_EDAM_PUBLISHING_DESCRIPTION_LEN_MAX()
    {
        return         /**
         * The maximum length of a Publishing.publicDescription field.
         */
200;
    }

    protected static function init_EDAM_PUBLISHING_DESCRIPTION_REGEX()
    {
        return         /**
         * Any public notebook's Publishing.publicDescription field must match
         * this pattern.
         * No control chars or line/paragraph separators, and can't start or
         * end with whitespace.
         */
"^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,198}[^\\p{Cc}\\p{Z}])?\$";
    }

    protected static function init_EDAM_SAVED_SEARCH_NAME_LEN_MIN()
    {
        return         /**
         * The minimum length of a SavedSearch.name field
         */
1;
    }

    protected static function init_EDAM_SAVED_SEARCH_NAME_LEN_MAX()
    {
        return         /**
         * The maximum length of a SavedSearch.name field
         */
100;
    }

    protected static function init_EDAM_SAVED_SEARCH_NAME_REGEX()
    {
        return         /**
         * SavedSearch.name fields must match this pattern.
         * No control chars or line/paragraph separators, and can't start or
         * end with whitespace.
         */
"^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,98}[^\\p{Cc}\\p{Z}])?\$";
    }

    protected static function init_EDAM_USER_PASSWORD_LEN_MIN()
    {
        return         /**
         * The minimum length of an Evernote user password
         */
6;
    }

    protected static function init_EDAM_USER_PASSWORD_LEN_MAX()
    {
        return         /**
         * The maximum length of an Evernote user password
         */
64;
    }

    protected static function init_EDAM_USER_PASSWORD_REGEX()
    {
        return         /**
         * Evernote user passwords must match this regular expression
         */
"^[A-Za-z0-9!#\$%&'()*+,./:;<=>?@^_`{|}~\\[\\]\\\\-]{6,64}\$";
    }

    protected static function init_EDAM_BUSINESS_URI_LEN_MAX()
    {
        return         /**
         * The maximum length of an Evernote Business URI
         */
32;
    }

    protected static function init_EDAM_BUSINESS_MARKETING_CODE_REGEX_PATTERN()
    {
        return         /**
         * Valid Evernote Business marketing code / affiliate code format.
         */
"[A-Za-z0-9-]{1,128}";
    }

    protected static function init_EDAM_NOTE_TAGS_MAX()
    {
        return         /**
         * The maximum number of Tags per Note
         */
100;
    }

    protected static function init_EDAM_NOTE_RESOURCES_MAX()
    {
        return         /**
         * The maximum number of Resources per Note
         */
1000;
    }

    protected static function init_EDAM_USER_TAGS_MAX()
    {
        return         /**
         * Maximum number of Tags per account
         */
100000;
    }

    protected static function init_EDAM_BUSINESS_TAGS_MAX()
    {
        return         /**
         * Maximum number of Tags per business account.
         */
100000;
    }

    protected static function init_EDAM_USER_SAVED_SEARCHES_MAX()
    {
        return         /**
         * Maximum number of SavedSearches per account
         */
100;
    }

    protected static function init_EDAM_USER_NOTES_MAX()
    {
        return         /**
         * Maximum number of Notes per user
         */
100000;
    }

    protected static function init_EDAM_BUSINESS_NOTES_MAX()
    {
        return         /**
         * Maximum number of Notes per business account
         */
500000;
    }

    protected static function init_EDAM_USER_NOTEBOOKS_MAX()
    {
        return         /**
         * Maximum number of Notebooks per user
         */
250;
    }

    protected static function init_EDAM_USER_WORKSPACES_MAX()
    {
        return         /**
         * Maximum number of Workspaces per user
         */
0;
    }

    protected static function init_EDAM_BUSINESS_NOTEBOOKS_MAX()
    {
        return         /**
         * Maximum number of Notebooks in a business account
         */
10000;
    }

    protected static function init_EDAM_BUSINESS_WORKSPACES_MAX()
    {
        return         /**
         * Maximum number of Workspaces in a business account
         */
1000;
    }

    protected static function init_EDAM_USER_RECENT_MAILED_ADDRESSES_MAX()
    {
        return         /**
         * Maximum number of recent email addresses that are maintained
         * (see UserAttributes.recentMailedAddresses)
         */
10;
    }

    protected static function init_EDAM_USER_MAIL_LIMIT_DAILY_FREE()
    {
        return         /**
         * The number of emails of any type that can be sent by a user with a Free
         * account from the service per day.  If an email is sent to two different
         * recipients, this counts as two emails.
         */
50;
    }

    protected static function init_EDAM_USER_MAIL_LIMIT_DAILY_PREMIUM()
    {
        return         /**
         * The number of emails of any type that can be sent by a user with a Premium
         * account from the service per day.  If an email is sent to two different
         * recipients, this counts as two emails.
         */
200;
    }

    protected static function init_EDAM_USER_UPLOAD_LIMIT_FREE()
    {
        return         /**
         * The number of bytes of new data that may be uploaded to a Free user's
         * account each month.
         */
62914560;
    }

    protected static function init_EDAM_USER_UPLOAD_LIMIT_PREMIUM()
    {
        return         /**
         * The number of bytes of new data that may be uploaded to a Premium user's
         * account each month.
         */
10737418240;
    }

    protected static function init_EDAM_USER_UPLOAD_LIMIT_BUSINESS_FIRST_MONTH()
    {
        return         /**
         * The number of bytes of new data that may be uploaded to new business
         * account during the first month. 50GB.
         */
53687091200;
    }

    protected static function init_EDAM_USER_UPLOAD_LIMIT_BUSINESS_NEXT_MONTH()
    {
        return         /**
         * The number of bytes of new data that may be uploaded to a business
         * account for the next month. 20GB.
         */
21474836480;
    }

    protected static function init_EDAM_USER_UPLOAD_LIMIT_PLUS()
    {
        return         /**
         * The number of bytes of new data that may be uploaded each month to an account at
         * a Plus service level.
         */
1073741824;
    }

    protected static function init_EDAM_USER_UPLOAD_SURVEY_THRESHOLD()
    {
        return         /**
         * The number of bytes of new data uploaded in a monthly quota cycle at which point
         * users should be prompted with a survey to gather information on how they are using
         * Evernote.
         */
5368709120;
    }

    protected static function init_EDAM_USER_UPLOAD_LIMIT_BUSINESS()
    {
        return         /**
         * The number of bytes of new data that may be uploaded to a Business user's
         * personal account each month. Note that content uploaded into the Business
         * notebooks by the user does not count against this limit.
         */
10737418240;
    }

    protected static function init_EDAM_USER_UPLOAD_LIMIT_BUSINESS_PER_USER()
    {
        return         /**
         * The number of bytes of new data that may be uploaded to a Business for each
         * member of the business per month. The total bytes available can be determined
         * by multiplying this with the number of business users.
         */
2147483647;
    }

    protected static function init_EDAM_NOTE_SIZE_MAX_FREE()
    {
        return         /**
         * Maximum total size of a Note that can be added to a Free account.
         * The size of a note is calculated as:
         * ENML content length (in Unicode characters) plus the sum of all resource
         * sizes (in bytes).
         */
26214400;
    }

    protected static function init_EDAM_NOTE_SIZE_MAX_PREMIUM()
    {
        return         /**
         * Maximum total size of a Note that can be added to a Premium account.
         * The size of a note is calculated as:
         * ENML content length (in Unicode characters) plus the sum of all resource
         * sizes (in bytes).
         */
209715200;
    }

    protected static function init_EDAM_RESOURCE_SIZE_MAX_FREE()
    {
        return         /**
         * Maximum size of a resource, in bytes, for Free accounts
         */
26214400;
    }

    protected static function init_EDAM_RESOURCE_SIZE_MAX_PREMIUM()
    {
        return         /**
         * Maximum size of a resource, in bytes, for Premium accounts
         */
209715200;
    }

    protected static function init_EDAM_USER_LINKED_NOTEBOOK_MAX()
    {
        return         /**
         * Maximum number of linked notebooks per account, for a free
         * account.
         */
100;
    }

    protected static function init_EDAM_USER_LINKED_NOTEBOOK_MAX_PREMIUM()
    {
        return         /**
         * Maximum number of linked notebooks per account, for a premium
         * account.  Users who are part of an active business are also
         * covered under "premium".
         */
500;
    }

    protected static function init_EDAM_NOTEBOOK_BUSINESS_SHARED_NOTEBOOK_MAX()
    {
        return         /**
         * Maximum number of shared notebooks per business notebook
         */
5000;
    }

    protected static function init_EDAM_NOTEBOOK_PERSONAL_SHARED_NOTEBOOK_MAX()
    {
        return         /**
         * Maximum number of shared notebooks per personal notebook
         */
500;
    }

    protected static function init_EDAM_NOTE_BUSINESS_SHARED_NOTE_MAX()
    {
        return         /**
         * Maximum number of SharedNote records per business note
         */
1000;
    }

    protected static function init_EDAM_NOTE_PERSONAL_SHARED_NOTE_MAX()
    {
        return         /**
         * Maximum number of SharedNote records per personal note
         */
100;
    }

    protected static function init_EDAM_NOTE_CONTENT_CLASS_LEN_MIN()
    {
        return         /**
         * The minimum length of the content class attribute of a note.
         */
3;
    }

    protected static function init_EDAM_NOTE_CONTENT_CLASS_LEN_MAX()
    {
        return         /**
         * The maximum length of the content class attribute of a note.
         */
32;
    }

    protected static function init_EDAM_NOTE_CONTENT_CLASS_REGEX()
    {
        return         /**
         * The regular expression that the content class of a note must match
         * to be valid.
         */
"^[A-Za-z0-9_.-]{3,32}\$";
    }

    protected static function init_EDAM_HELLO_APP_CONTENT_CLASS_PREFIX()
    {
        return         /**
         * The content class prefix used for all notes created by Evernote Hello.
         * This prefix can be used to assemble individual content class strings,
         * or can be used to create a wildcard search to get all notes created by
         * Hello. When performing a wildcard search via filtered sync chunks or
         * search strings, the * character must be appended to this constant.
         */
"evernote.hello.";
    }

    protected static function init_EDAM_FOOD_APP_CONTENT_CLASS_PREFIX()
    {
        return         /**
         * The content class prefix used for all notes created by Evernote Food.
         * This prefix can be used to assemble individual content class strings,
         * or can be used to create a wildcard search to get all notes created by
         * Food. When performing a wildcard search via filtered sync chunks or
         * search strings, the * character must be appended to this constant.
         */
"evernote.food.";
    }

    protected static function init_EDAM_CONTENT_CLASS_HELLO_ENCOUNTER()
    {
        return         /**
         * The content class prefix used for structured notes created by Evernote
         * Hello that represents an encounter with a person. When performing a
         * wildcard search via filtered sync chunks or search strings, the *
         * character must be appended to this constant.
         */
"evernote.hello.encounter";
    }

    protected static function init_EDAM_CONTENT_CLASS_HELLO_PROFILE()
    {
        return         /**
         * The content class prefix used for structured notes created by Evernote
         * Hello that represents the user's profile. When performing a
         * wildcard search via filtered sync chunks or search strings, the *
         * character must be appended to this constant.
         */
"evernote.hello.profile";
    }

    protected static function init_EDAM_CONTENT_CLASS_FOOD_MEAL()
    {
        return         /**
         * The content class prefix used for structured notes created by
         * Evernote Food that captures the experience of a particular meal.
         * When performing a wildcard search via filtered sync chunks or search
         * strings, the * character must be appended to this constant.
         */
"evernote.food.meal";
    }

    protected static function init_EDAM_CONTENT_CLASS_SKITCH_PREFIX()
    {
        return         /**
         * The content class prefix used for structured notes created by Evernote
         * Skitch. When performing a wildcard search via filtered sync chunks
         * or search strings, the * character must be appended to this constant.
         */
"evernote.skitch";
    }

    protected static function init_EDAM_CONTENT_CLASS_SKITCH()
    {
        return         /**
         * The content class value used for structured image notes created by Evernote
         * Skitch.
         */
"evernote.skitch";
    }

    protected static function init_EDAM_CONTENT_CLASS_SKITCH_PDF()
    {
        return         /**
         * The content class value used for structured PDF notes created by Evernote
         * Skitch.
         */
"evernote.skitch.pdf";
    }

    protected static function init_EDAM_CONTENT_CLASS_PENULTIMATE_PREFIX()
    {
        return         /**
         * The content class prefix used for structured notes created by Evernote
         * Penultimate. When performing a wildcard search via filtered sync chunks
         * or search strings, the * character must be appended to this constant.
         */
"evernote.penultimate.";
    }

    protected static function init_EDAM_CONTENT_CLASS_PENULTIMATE_NOTEBOOK()
    {
        return         /**
         * The content class value used for structured notes created by Evernote
         * Penultimate that represents a Penultimate notebook.
         */
"evernote.penultimate.notebook";
    }

    protected static function init_EDAM_SOURCE_APPLICATION_POSTIT()
    {
        return         /**
         * The NoteAttributes.sourceApplication value used for notes captured by the Post-it
         * camera.
         */
"postit";
    }

    protected static function init_EDAM_SOURCE_APPLICATION_MOLESKINE()
    {
        return         /**
         * The NoteAttributes.sourceApplication value used for notes captured by the Moleskine
         * page camera.
         */
"moleskine";
    }

    protected static function init_EDAM_SOURCE_APPLICATION_EN_SCANSNAP()
    {
        return         /**
         * The NoteAttributes.sourceApplication value used for notes captured by
         * PFU ScanSnap Evernote Edition.
         */
"scanner.scansnap.evernote";
    }

    protected static function init_EDAM_SOURCE_APPLICATION_EWC()
    {
        return         /**
         * The NoteAttributes.sourceApplication value used for notes captured with the Embedded
         * Web Clipper.
         */
"clipncite.web";
    }

    protected static function init_EDAM_SOURCE_APPLICATION_ANDROID_SHARE_EXTENSION()
    {
        return         /**
         * The NoteAttributes.sourceApplication value used for notes captured with the Android
         * share extension.
         */
"android.clipper.evernote";
    }

    protected static function init_EDAM_SOURCE_APPLICATION_IOS_SHARE_EXTENSION()
    {
        return         /**
         * The NoteAttributes.sourceApplication value used for notes captured with the iOS share
         * extension.
         */
"ios.clipper.evernote";
    }

    protected static function init_EDAM_SOURCE_APPLICATION_WEB_CLIPPER()
    {
        return         /**
         * The NoteAttributes.sourceApplication value used for notes captured with the Evernote
         * Web Clipper.
         */
"webclipper.evernote";
    }

    protected static function init_EDAM_SOURCE_OUTLOOK_CLIPPER()
    {
        return         /**
         * The NoteAttributes.source value used for notes captured by the Microsoft Outlook clipper.
         */
"app.ms.outlook";
    }

    protected static function init_EDAM_NOTE_TITLE_QUALITY_UNTITLED()
    {
        return         /**
         * A NoteAttributes.noteTitleQuality value indicating that a note has no meaningful title,
         * only a placeholder value such as "Untitled Note".
         */
0;
    }

    protected static function init_EDAM_NOTE_TITLE_QUALITY_LOW()
    {
        return         /**
         * A NoteAttributes.noteTitleQuality value indicating that the quality of an automatically
         * generated note title is low. Examples of low quality titles include those based on a
         * note's type and location, such as "Snapshot from 123 Sesame Street in New York".
         */
1;
    }

    protected static function init_EDAM_NOTE_TITLE_QUALITY_MEDIUM()
    {
        return         /**
         * A NoteAttributes.noteTitleQuality value indicating that the quality of an automatically
         * generated note title is medium. Examples of medium quality titles include those based on a
         * calendar entry, such as "Note from Weekly Staff Meeting".
         */
2;
    }

    protected static function init_EDAM_NOTE_TITLE_QUALITY_HIGH()
    {
        return         /**
         * A NoteAttributes.noteTitleQuality value indicating that the quality of an automatically
         * generated note title is high. Examples of high quality titles include those based on a
         * scanned business card, such as "John Doe - Scanned Business Card".
         */
3;
    }

    protected static function init_EDAM_RELATED_PLAINTEXT_LEN_MIN()
    {
        return         /**
         * The minimum length of the plain text in a findRelated query, assuming that
         * plaintext is being provided.
         */
1;
    }

    protected static function init_EDAM_RELATED_PLAINTEXT_LEN_MAX()
    {
        return         /**
         * The maximum length of the plain text in a findRelated query, assuming that
         * plaintext is being provided.
         */
131072;
    }

    protected static function init_EDAM_RELATED_MAX_NOTES()
    {
        return         /**
         * The maximum number of notes that will be returned from a findRelated()
         * query.
         */
25;
    }

    protected static function init_EDAM_RELATED_MAX_NOTEBOOKS()
    {
        return         /**
         * The maximum number of notebooks that will be returned from a findRelated()
         * query.
         */
1;
    }

    protected static function init_EDAM_RELATED_MAX_TAGS()
    {
        return         /**
         * The maximum number of tags that will be returned from a findRelated() query.
         */
25;
    }

    protected static function init_EDAM_RELATED_MAX_EXPERTS()
    {
        return         /**
         * The maximum number of experts that will be returned from a findRelated() query
         */
10;
    }

    protected static function init_EDAM_RELATED_MAX_RELATED_CONTENT()
    {
        return         /**
         * The maximum number of related content snippets that will be returned from a
         * findRelated() query.
         */
10;
    }

    protected static function init_EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MIN()
    {
        return         /**
         * The minimum length, in Unicode characters, of a description for a business
         * notebook.
         */
1;
    }

    protected static function init_EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MAX()
    {
        return         /**
         * The maximum length, in Unicode characters, of a description for a business
         * notebook.
         */
200;
    }

    protected static function init_EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_REGEX()
    {
        return         /**
         * All business notebook descriptions must match this pattern.
         * This excludes control chars or line/paragraph separators.
         * The string may not begin or end with whitespace.
         */
"^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,198}[^\\p{Cc}\\p{Z}])?\$";
    }

    protected static function init_EDAM_BUSINESS_PHONE_NUMBER_LEN_MAX()
    {
        return         /**
         * The maximum length of a business phone number.
         */
20;
    }

    protected static function init_EDAM_PREFERENCE_NAME_LEN_MIN()
    {
        return         /**
         * Minimum length of a preference name
         */
3;
    }

    protected static function init_EDAM_PREFERENCE_NAME_LEN_MAX()
    {
        return         /**
         * Maximum length of a preference name
         */
32;
    }

    protected static function init_EDAM_PREFERENCE_VALUE_LEN_MIN()
    {
        return         /**
         * Minimum length of a preference value
         */
1;
    }

    protected static function init_EDAM_PREFERENCE_VALUE_LEN_MAX()
    {
        return         /**
         * Maximum length of a preference value
         */
1024;
    }

    protected static function init_EDAM_MAX_PREFERENCES()
    {
        return         /**
         * Maximum number of name/value pairs allowed
         */
100;
    }

    protected static function init_EDAM_MAX_VALUES_PER_PREFERENCE()
    {
        return         /**
         * Maximum number of values per preference name when using
         * values of size no greater than EDAM_PREFERENCE_VALUE_LEN_MAX.
         */
256;
    }

    protected static function init_EDAM_PREFERENCE_ONLY_ONE_VALUE_LEN_MAX()
    {
        return         /**
         * The maximum length of a preference value if you only use one value
         * per preference rather than up to EDAM_MAX_VALUES_PER_PREFERENCE.
         * This option is useful if you want a single string that is larger
         * than EDAM_PREFERENCE_VALUE_LEN_MAX and would otherwise need to
         * split the string into multiple pieces to store it.
         */
16384;
    }

    protected static function init_EDAM_PREFERENCE_NAME_REGEX()
    {
        return         /**
         * A preference name must match this regex.
         */
"^[A-Za-z0-9_.-]{3,32}\$";
    }

    protected static function init_EDAM_PREFERENCE_VALUE_REGEX()
    {
        return         /**
         * A preference value must match this regex if you are using more
         * than a single value for a preference.
         */
"^[^\\p{Cc}]{1,1024}\$";
    }

    protected static function init_EDAM_PREFERENCE_ONLY_ONE_VALUE_REGEX()
    {
        return         /**
         * A preference value must match this regex if you are using a single
         * value for a preference.
         */
"^[^\\p{Cc}]{1,16384}\$";
    }

    protected static function init_EDAM_PREFERENCE_SHORTCUTS()
    {
        return         /**
         * The name of the preferences entry that contains shortcuts.
         */
"evernote.shortcuts";
    }

    protected static function init_EDAM_PREFERENCE_BUSINESS_DEFAULT_NOTEBOOK()
    {
        return         /**
         * The name of the preferences entry that contains the notebook GUID (not the linked notebook) of
         * the default business notebook. It must be in the format EDAM_GUID_REGEX.
         * If a default business notebook is not set and the user is a business user
         * the user should be prompted to set the default business notebook.
         * The default business notebook must be a read/write notebook.
         * Whenever the default business notebook guid is used, it must be revalidiated as a writable
         * notebook. If it is not valid, the user should be re-prompted to set the value.
         * This value is used by clients only.
         */
"evernote.business.notebook";
    }

    protected static function init_EDAM_PREFERENCE_BUSINESS_QUICKNOTE()
    {
        return         /**
         * The name of the preferences entry that contains a boolean indicating that default
         * quicknotes should go into a business notebook. The EDAM_PREFERENCE_BUSINESS_DEFAULT_NOTEBOOK
         * must be set correctly for this preference to be honored.
         * The quicknote preferences should only be set to "true", if quicknote should use a business
         * notebook.
         * Any value other than "true" (or the omission of a value) should be treated as "false".
         * In this case, quicknotes should be created in in the user's personal default notebook.
         * The interface should not allow users to set quicknote to a business notebook
         * without a valid default business notebook selected, however, clients should handle the edge
         * case of an invalid business notebook guid.  If a user stops being a business user or
         * does not have write access to any business notebooks the quicknote preference should be
         * ignored.
         */
"evernote.business.quicknote";
    }

    protected static function init_EDAM_PREFERENCE_SHORTCUTS_MAX_VALUES()
    {
        return         /**
         * The maximum number of shortcuts that a user may have.
         */
250;
    }

    protected static function init_EDAM_DEVICE_ID_LEN_MAX()
    {
        return         /**
         * Maximum length of the device identifier string associated with long sessions.
         */
32;
    }

    protected static function init_EDAM_DEVICE_ID_REGEX()
    {
        return         /**
         * Regular expression for device identifier strings associated with long sessions.
         */
"^[^\\p{Cc}]{1,32}\$";
    }

    protected static function init_EDAM_DEVICE_DESCRIPTION_LEN_MAX()
    {
        return         /**
         * Maximum length of the device description string associated with long sessions.
         */
64;
    }

    protected static function init_EDAM_DEVICE_DESCRIPTION_REGEX()
    {
        return         /**
         * Regular expression for device description strings associated with long sessions.
         */
"^[^\\p{Cc}]{1,64}\$";
    }

    protected static function init_EDAM_SEARCH_SUGGESTIONS_MAX()
    {
        return         /**
         * Maximum number of search suggestions that can be returned
         */
10;
    }

    protected static function init_EDAM_SEARCH_SUGGESTIONS_PREFIX_LEN_MAX()
    {
        return         /**
         * Maximum length of the search suggestion prefix
         */
1024;
    }

    protected static function init_EDAM_SEARCH_SUGGESTIONS_PREFIX_LEN_MIN()
    {
        return         /**
         * Minimum length of the search suggestion prefix
         */
2;
    }

    protected static function init_EDAM_FIND_CONTACT_DEFAULT_MAX_RESULTS()
    {
        return         /**
         * Default maximum number of results the service will return for findContact
         */
100;
    }

    protected static function init_EDAM_FIND_CONTACT_MAX_RESULTS()
    {
        return         /**
         * Absolute maximum number of results the service will return for findContact
         */
256;
    }

    protected static function init_EDAM_NOTE_LOCK_VIEWERS_NOTES_MAX()
    {
        return         /**
         * The maximum number of separate notes that may be queried in a single call to
         * NoteStore.getViewersForNotes.
         */
150;
    }

    protected static function init_EDAM_GET_ORDERS_MAX_RESULTS()
    {
        return         /**
         * Absolute maximum number of results the servce will return for PersistentInternalMarket.getOrders()
         */
2000;
    }

    protected static function init_EDAM_MESSAGE_BODY_LEN_MAX()
    {
        return         /**
         * The maximum length of a message body in unicode characters.
         */
2048;
    }

    protected static function init_EDAM_MESSAGE_BODY_REGEX()
    {
        return         /**
         * The regex to validate message.body against
         */
"^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,2046}[^\\p{Cc}\\p{Z}])?\$";
    }

    protected static function init_EDAM_MESSAGE_RECIPIENTS_MAX()
    {
        return         /**
         * The maximum number of recipients on a MessageThread.
         */
50;
    }

    protected static function init_EDAM_MESSAGE_ATTACHMENTS_MAX()
    {
        return         /**
         * The maximum number of attachments a Message can have.
         */
100;
    }

    protected static function init_EDAM_MESSAGE_ATTACHMENT_TITLE_LEN_MAX()
    {
        return         /**
         * The maximum length of a message attachment title in unicode characters.
         */
255;
    }

    protected static function init_EDAM_MESSAGE_ATTACHMENT_TITLE_REGEX()
    {
        return         /**
         * The regex to validate message attachment titles against
         */
"^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,253}[^\\p{Cc}\\p{Z}])?\$";
    }

    protected static function init_EDAM_MESSAGE_ATTACHMENT_SNIPPET_LEN_MAX()
    {
        return         /**
         * The maximum length of a message attachment snippet in unicode characters.
         */
2048;
    }

    protected static function init_EDAM_MESSAGE_ATTACHMENT_SNIPPET_REGEX()
    {
        return         /**
         * The regex to validate message attachment snippets against
         */
"^[^\\p{Cc}\\p{Z}]([\\n[^\\p{Cc}\\p{Zl}\\p{Zp}]]{0,2046}[^\\p{Cc}\\p{Z}])?\$";
    }

    protected static function init_EDAM_USER_PROFILE_PHOTO_MAX_BYTES()
    {
        return         /**
         * Maximum user profile photo size, in bytes, that clients may send to the service.
         * Photos may be resized before being stored on the service.
         */
716800;
    }

    protected static function init_EDAM_PROMOTION_ID_LEN_MAX()
    {
        return         /**
         * The maximum length of a promotion ID in unicode characters.
         */
32;
    }

    protected static function init_EDAM_PROMOTION_ID_REGEX()
    {
        return         /**
         * The regex to validate promotion IDs against.
         */
"^[A-Za-z0-9_.-]{1,32}\$";
    }

    protected static function init_EDAM_APP_RATING_MIN()
    {
        return         /**
         * App Feedback Rating range
         */
1;
    }

    protected static function init_EDAM_APP_RATING_MAX()
    {
        return 5;
    }

    protected static function init_EDAM_SNIPPETS_NOTES_MAX()
    {
        return         /**
         * The maximium number of note snippets you can retrieve in a single request
         */
24;
    }

    protected static function init_EDAM_CONNECTED_IDENTITY_REQUEST_MAX()
    {
        return         /**
         * The maximum number of connected identities a client can request.
         */
100;
    }

    protected static function init_EDAM_OPEN_ID_ACCESS_TOKEN_MAX()
    {
        return         /**
         * Maximum length for OpenID token. There is no official enforced limit. The length of the Token ID depends
         * on the provider. 1000 seems to be the safest value at this time.
         */
1000;
    }
}
