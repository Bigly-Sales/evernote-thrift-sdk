<?php
namespace EDAM\Error;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * An exception thrown when the provided Contacts fail validation. For instance,
 * email domains could be invalid, phone numbers might not be valid for SMS,
 * etc.
 * 
 * We will not provide individual reasons for each Contact's validation failure.
 * The presence of the Contact in this exception means that the user must figure
 * out how to take appropriate action to fix this Contact.
 * 
 * <dl>
 *   <dt>contacts</dt>
 *   <dd>The list of Contacts that are considered invalid by the service</dd>
 * 
 *   <dt>parameter</dt>
 *   <dd>If the error applied to a particular input parameter, this will
 *   indicate which parameter.</dd>
 * 
 *   <dt>reasons</dt>
 *   <dd>If supplied, the list of reasons why the server considered a contact invalid,
 *   matching, in order, the list returned in the contacts field.</dd>
 * </dl>
 */
class EDAMInvalidContactsException extends TException
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'contacts',
            'isRequired' => true,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EDAM\Types\Contact',
                ),
        ),
        2 => array(
            'var' => 'parameter',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'reasons',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::I32,
            'elem' => array(
                'type' => TType::I32,
                'class' => '\EDAM\Error\EDAMInvalidContactReason',
                ),
        ),
    );

    /**
     * @var \EDAM\Types\Contact[]
     */
    public $contacts = null;
    /**
     * @var string
     */
    public $parameter = null;
    /**
     * @var int[]
     */
    public $reasons = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['contacts'])) {
                $this->contacts = $vals['contacts'];
            }
            if (isset($vals['parameter'])) {
                $this->parameter = $vals['parameter'];
            }
            if (isset($vals['reasons'])) {
                $this->reasons = $vals['reasons'];
            }
        }
    }

    public function getName()
    {
        return 'EDAMInvalidContactsException';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->contacts = array();
                        $_size0 = 0;
                        $_etype3 = 0;
                        $xfer += $input->readListBegin($_etype3, $_size0);
                        for ($_i4 = 0; $_i4 < $_size0; ++$_i4) {
                            $elem5 = null;
                            $elem5 = new \EDAM\Types\Contact();
                            $xfer += $elem5->read($input);
                            $this->contacts []= $elem5;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->parameter);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->reasons = array();
                        $_size6 = 0;
                        $_etype9 = 0;
                        $xfer += $input->readListBegin($_etype9, $_size6);
                        for ($_i10 = 0; $_i10 < $_size6; ++$_i10) {
                            $elem11 = null;
                            $xfer += $input->readI32($elem11);
                            $this->reasons []= $elem11;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('EDAMInvalidContactsException');
        if ($this->contacts !== null) {
            if (!is_array($this->contacts)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('contacts', TType::LST, 1);
            $output->writeListBegin(TType::STRUCT, count($this->contacts));
            foreach ($this->contacts as $iter12) {
                $xfer += $iter12->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->parameter !== null) {
            $xfer += $output->writeFieldBegin('parameter', TType::STRING, 2);
            $xfer += $output->writeString($this->parameter);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->reasons !== null) {
            if (!is_array($this->reasons)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('reasons', TType::LST, 3);
            $output->writeListBegin(TType::I32, count($this->reasons));
            foreach ($this->reasons as $iter13) {
                $xfer += $output->writeI32($iter13);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
