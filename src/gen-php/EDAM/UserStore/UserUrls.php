<?php
namespace EDAM\UserStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * <dl>
 * <dt>noteStoreUrl:</dt>
 *   <dd>
 *   This field will contain the full URL that clients should use to make
 *   NoteStore requests to the server shard that contains that user's data.
 *   I.e. this is the URL that should be used to create the Thrift HTTP client
 *   transport to send messages to the NoteStore service for the account.
 *   </dd>
 * <dt>webApiUrlPrefix:</dt>
 *   <dd>
 *   This field will contain the initial part of the URLs that should be used
 *   to make requests to Evernote's thin client "web API", which provide
 *   optimized operations for clients that aren't capable of manipulating
 *   the full contents of accounts via the full Thrift data model. Clients
 *   should concatenate the relative path for the various servlets onto the
 *   end of this string to construct the full URL, as documented on our
 *   developer web site.
 *   </dd>
 * <dt>userStoreUrl:</dt>
 *   <dd>
 *   This field will contain the full URL that clients should use to make UserStore
 *   requests after successfully authenticating. I.e. this is the URL that should be used
 *   to create the Thrift HTTP client transport to send messages to the UserStore service
 *   for this account.
 *   </dd>
 * <dt>utilityUrl:</dt>
 *   <dd>
 *   This field will contain the full URL that clients should use to make Utility requests
 *   to the server shard that contains that user's data. I.e. this is the URL that should
 *   be used to create the Thrift HTTP client transport to send messages to the Utility
 *   service for the account.
 *   </dd>
 * <dt>messageStoreUrl:</dt>
 *   <dd>
 *   This field will contain the full URL that clients should use to make MessageStore
 *   requests to the server. I.e. this is the URL that should be used to create the
 *   Thrift HTTP client transport to send messages to the MessageStore service for the
 *   account.
 *   </dd>
 * <dt>userWebSocketUrl:</dt>
 *   <dd>
 *   This field will contain the full URL that clients should use when opening a
 *   persistent web socket to recieve notification of events for the authenticated user.
 *   </dd>
 * </dl>
 */
class UserUrls
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'noteStoreUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'webApiUrlPrefix',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'userStoreUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'utilityUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'messageStoreUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'userWebSocketUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $noteStoreUrl = null;
    /**
     * @var string
     */
    public $webApiUrlPrefix = null;
    /**
     * @var string
     */
    public $userStoreUrl = null;
    /**
     * @var string
     */
    public $utilityUrl = null;
    /**
     * @var string
     */
    public $messageStoreUrl = null;
    /**
     * @var string
     */
    public $userWebSocketUrl = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['noteStoreUrl'])) {
                $this->noteStoreUrl = $vals['noteStoreUrl'];
            }
            if (isset($vals['webApiUrlPrefix'])) {
                $this->webApiUrlPrefix = $vals['webApiUrlPrefix'];
            }
            if (isset($vals['userStoreUrl'])) {
                $this->userStoreUrl = $vals['userStoreUrl'];
            }
            if (isset($vals['utilityUrl'])) {
                $this->utilityUrl = $vals['utilityUrl'];
            }
            if (isset($vals['messageStoreUrl'])) {
                $this->messageStoreUrl = $vals['messageStoreUrl'];
            }
            if (isset($vals['userWebSocketUrl'])) {
                $this->userWebSocketUrl = $vals['userWebSocketUrl'];
            }
        }
    }

    public function getName()
    {
        return 'UserUrls';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->noteStoreUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->webApiUrlPrefix);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->userStoreUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->utilityUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->messageStoreUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->userWebSocketUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('UserUrls');
        if ($this->noteStoreUrl !== null) {
            $xfer += $output->writeFieldBegin('noteStoreUrl', TType::STRING, 1);
            $xfer += $output->writeString($this->noteStoreUrl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->webApiUrlPrefix !== null) {
            $xfer += $output->writeFieldBegin('webApiUrlPrefix', TType::STRING, 2);
            $xfer += $output->writeString($this->webApiUrlPrefix);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userStoreUrl !== null) {
            $xfer += $output->writeFieldBegin('userStoreUrl', TType::STRING, 3);
            $xfer += $output->writeString($this->userStoreUrl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->utilityUrl !== null) {
            $xfer += $output->writeFieldBegin('utilityUrl', TType::STRING, 4);
            $xfer += $output->writeString($this->utilityUrl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->messageStoreUrl !== null) {
            $xfer += $output->writeFieldBegin('messageStoreUrl', TType::STRING, 5);
            $xfer += $output->writeString($this->messageStoreUrl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userWebSocketUrl !== null) {
            $xfer += $output->writeFieldBegin('userWebSocketUrl', TType::STRING, 6);
            $xfer += $output->writeString($this->userWebSocketUrl);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
