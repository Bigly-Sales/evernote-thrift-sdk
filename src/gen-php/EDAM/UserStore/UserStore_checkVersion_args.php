<?php
namespace EDAM\UserStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class UserStore_checkVersion_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'clientName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'edamVersionMajor',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        3 => array(
            'var' => 'edamVersionMinor',
            'isRequired' => false,
            'type' => TType::I16,
        ),
    );

    /**
     * @var string
     */
    public $clientName = null;
    /**
     * @var int
     */
    public $edamVersionMajor = 1;
    /**
     * @var int
     */
    public $edamVersionMinor = 28;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['clientName'])) {
                $this->clientName = $vals['clientName'];
            }
            if (isset($vals['edamVersionMajor'])) {
                $this->edamVersionMajor = $vals['edamVersionMajor'];
            }
            if (isset($vals['edamVersionMinor'])) {
                $this->edamVersionMinor = $vals['edamVersionMinor'];
            }
        }
    }

    public function getName()
    {
        return 'UserStore_checkVersion_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->clientName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->edamVersionMajor);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->edamVersionMinor);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('UserStore_checkVersion_args');
        if ($this->clientName !== null) {
            $xfer += $output->writeFieldBegin('clientName', TType::STRING, 1);
            $xfer += $output->writeString($this->clientName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->edamVersionMajor !== null) {
            $xfer += $output->writeFieldBegin('edamVersionMajor', TType::I16, 2);
            $xfer += $output->writeI16($this->edamVersionMajor);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->edamVersionMinor !== null) {
            $xfer += $output->writeFieldBegin('edamVersionMinor', TType::I16, 3);
            $xfer += $output->writeI16($this->edamVersionMinor);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
