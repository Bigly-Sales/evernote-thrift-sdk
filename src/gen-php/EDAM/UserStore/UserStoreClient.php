<?php
namespace EDAM\UserStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class UserStoreClient implements \EDAM\UserStore\UserStoreIf
{
    protected $input_ = null;
    protected $output_ = null;

    protected $seqid_ = 0;

    public function __construct($input, $output = null)
    {
        $this->input_ = $input;
        $this->output_ = $output ? $output : $input;
    }


    public function checkVersion($clientName, $edamVersionMajor, $edamVersionMinor)
    {
        $this->send_checkVersion($clientName, $edamVersionMajor, $edamVersionMinor);
        return $this->recv_checkVersion();
    }

    public function send_checkVersion($clientName, $edamVersionMajor, $edamVersionMinor)
    {
        $args = new \EDAM\UserStore\UserStore_checkVersion_args();
        $args->clientName = $clientName;
        $args->edamVersionMajor = $edamVersionMajor;
        $args->edamVersionMinor = $edamVersionMinor;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'checkVersion',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('checkVersion', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_checkVersion()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\EDAM\UserStore\UserStore_checkVersion_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \EDAM\UserStore\UserStore_checkVersion_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("checkVersion failed: unknown result");
    }

    public function getBootstrapInfo($locale)
    {
        $this->send_getBootstrapInfo($locale);
        return $this->recv_getBootstrapInfo();
    }

    public function send_getBootstrapInfo($locale)
    {
        $args = new \EDAM\UserStore\UserStore_getBootstrapInfo_args();
        $args->locale = $locale;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getBootstrapInfo',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getBootstrapInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getBootstrapInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\EDAM\UserStore\UserStore_getBootstrapInfo_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \EDAM\UserStore\UserStore_getBootstrapInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("getBootstrapInfo failed: unknown result");
    }

    public function authenticateLongSession($username, $password, $consumerKey, $consumerSecret, $deviceIdentifier, $deviceDescription, $supportsTwoFactor)
    {
        $this->send_authenticateLongSession($username, $password, $consumerKey, $consumerSecret, $deviceIdentifier, $deviceDescription, $supportsTwoFactor);
        return $this->recv_authenticateLongSession();
    }

    public function send_authenticateLongSession($username, $password, $consumerKey, $consumerSecret, $deviceIdentifier, $deviceDescription, $supportsTwoFactor)
    {
        $args = new \EDAM\UserStore\UserStore_authenticateLongSession_args();
        $args->username = $username;
        $args->password = $password;
        $args->consumerKey = $consumerKey;
        $args->consumerSecret = $consumerSecret;
        $args->deviceIdentifier = $deviceIdentifier;
        $args->deviceDescription = $deviceDescription;
        $args->supportsTwoFactor = $supportsTwoFactor;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'authenticateLongSession',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('authenticateLongSession', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_authenticateLongSession()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\EDAM\UserStore\UserStore_authenticateLongSession_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \EDAM\UserStore\UserStore_authenticateLongSession_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->userException !== null) {
            throw $result->userException;
        }
        if ($result->systemException !== null) {
            throw $result->systemException;
        }
        throw new \Exception("authenticateLongSession failed: unknown result");
    }

    public function completeTwoFactorAuthentication($authenticationToken, $oneTimeCode, $deviceIdentifier, $deviceDescription)
    {
        $this->send_completeTwoFactorAuthentication($authenticationToken, $oneTimeCode, $deviceIdentifier, $deviceDescription);
        return $this->recv_completeTwoFactorAuthentication();
    }

    public function send_completeTwoFactorAuthentication($authenticationToken, $oneTimeCode, $deviceIdentifier, $deviceDescription)
    {
        $args = new \EDAM\UserStore\UserStore_completeTwoFactorAuthentication_args();
        $args->authenticationToken = $authenticationToken;
        $args->oneTimeCode = $oneTimeCode;
        $args->deviceIdentifier = $deviceIdentifier;
        $args->deviceDescription = $deviceDescription;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'completeTwoFactorAuthentication',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('completeTwoFactorAuthentication', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_completeTwoFactorAuthentication()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\EDAM\UserStore\UserStore_completeTwoFactorAuthentication_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \EDAM\UserStore\UserStore_completeTwoFactorAuthentication_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->userException !== null) {
            throw $result->userException;
        }
        if ($result->systemException !== null) {
            throw $result->systemException;
        }
        throw new \Exception("completeTwoFactorAuthentication failed: unknown result");
    }

    public function revokeLongSession($authenticationToken)
    {
        $this->send_revokeLongSession($authenticationToken);
        $this->recv_revokeLongSession();
    }

    public function send_revokeLongSession($authenticationToken)
    {
        $args = new \EDAM\UserStore\UserStore_revokeLongSession_args();
        $args->authenticationToken = $authenticationToken;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'revokeLongSession',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('revokeLongSession', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_revokeLongSession()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\EDAM\UserStore\UserStore_revokeLongSession_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \EDAM\UserStore\UserStore_revokeLongSession_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->userException !== null) {
            throw $result->userException;
        }
        if ($result->systemException !== null) {
            throw $result->systemException;
        }
        return;
    }

    public function authenticateToBusiness($authenticationToken)
    {
        $this->send_authenticateToBusiness($authenticationToken);
        return $this->recv_authenticateToBusiness();
    }

    public function send_authenticateToBusiness($authenticationToken)
    {
        $args = new \EDAM\UserStore\UserStore_authenticateToBusiness_args();
        $args->authenticationToken = $authenticationToken;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'authenticateToBusiness',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('authenticateToBusiness', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_authenticateToBusiness()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\EDAM\UserStore\UserStore_authenticateToBusiness_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \EDAM\UserStore\UserStore_authenticateToBusiness_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->userException !== null) {
            throw $result->userException;
        }
        if ($result->systemException !== null) {
            throw $result->systemException;
        }
        throw new \Exception("authenticateToBusiness failed: unknown result");
    }

    public function getUser($authenticationToken)
    {
        $this->send_getUser($authenticationToken);
        return $this->recv_getUser();
    }

    public function send_getUser($authenticationToken)
    {
        $args = new \EDAM\UserStore\UserStore_getUser_args();
        $args->authenticationToken = $authenticationToken;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getUser',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getUser', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getUser()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\EDAM\UserStore\UserStore_getUser_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \EDAM\UserStore\UserStore_getUser_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->userException !== null) {
            throw $result->userException;
        }
        if ($result->systemException !== null) {
            throw $result->systemException;
        }
        throw new \Exception("getUser failed: unknown result");
    }

    public function getPublicUserInfo($username)
    {
        $this->send_getPublicUserInfo($username);
        return $this->recv_getPublicUserInfo();
    }

    public function send_getPublicUserInfo($username)
    {
        $args = new \EDAM\UserStore\UserStore_getPublicUserInfo_args();
        $args->username = $username;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getPublicUserInfo',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getPublicUserInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getPublicUserInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\EDAM\UserStore\UserStore_getPublicUserInfo_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \EDAM\UserStore\UserStore_getPublicUserInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->notFoundException !== null) {
            throw $result->notFoundException;
        }
        if ($result->systemException !== null) {
            throw $result->systemException;
        }
        if ($result->userException !== null) {
            throw $result->userException;
        }
        throw new \Exception("getPublicUserInfo failed: unknown result");
    }

    public function getUserUrls($authenticationToken)
    {
        $this->send_getUserUrls($authenticationToken);
        return $this->recv_getUserUrls();
    }

    public function send_getUserUrls($authenticationToken)
    {
        $args = new \EDAM\UserStore\UserStore_getUserUrls_args();
        $args->authenticationToken = $authenticationToken;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getUserUrls',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getUserUrls', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getUserUrls()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\EDAM\UserStore\UserStore_getUserUrls_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \EDAM\UserStore\UserStore_getUserUrls_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->userException !== null) {
            throw $result->userException;
        }
        if ($result->systemException !== null) {
            throw $result->systemException;
        }
        throw new \Exception("getUserUrls failed: unknown result");
    }

    public function inviteToBusiness($authenticationToken, $emailAddress)
    {
        $this->send_inviteToBusiness($authenticationToken, $emailAddress);
        $this->recv_inviteToBusiness();
    }

    public function send_inviteToBusiness($authenticationToken, $emailAddress)
    {
        $args = new \EDAM\UserStore\UserStore_inviteToBusiness_args();
        $args->authenticationToken = $authenticationToken;
        $args->emailAddress = $emailAddress;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'inviteToBusiness',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('inviteToBusiness', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_inviteToBusiness()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\EDAM\UserStore\UserStore_inviteToBusiness_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \EDAM\UserStore\UserStore_inviteToBusiness_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->userException !== null) {
            throw $result->userException;
        }
        if ($result->systemException !== null) {
            throw $result->systemException;
        }
        return;
    }

    public function removeFromBusiness($authenticationToken, $emailAddress)
    {
        $this->send_removeFromBusiness($authenticationToken, $emailAddress);
        $this->recv_removeFromBusiness();
    }

    public function send_removeFromBusiness($authenticationToken, $emailAddress)
    {
        $args = new \EDAM\UserStore\UserStore_removeFromBusiness_args();
        $args->authenticationToken = $authenticationToken;
        $args->emailAddress = $emailAddress;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'removeFromBusiness',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('removeFromBusiness', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_removeFromBusiness()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\EDAM\UserStore\UserStore_removeFromBusiness_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \EDAM\UserStore\UserStore_removeFromBusiness_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->userException !== null) {
            throw $result->userException;
        }
        if ($result->systemException !== null) {
            throw $result->systemException;
        }
        if ($result->notFoundException !== null) {
            throw $result->notFoundException;
        }
        return;
    }

    public function updateBusinessUserIdentifier($authenticationToken, $oldEmailAddress, $newEmailAddress)
    {
        $this->send_updateBusinessUserIdentifier($authenticationToken, $oldEmailAddress, $newEmailAddress);
        $this->recv_updateBusinessUserIdentifier();
    }

    public function send_updateBusinessUserIdentifier($authenticationToken, $oldEmailAddress, $newEmailAddress)
    {
        $args = new \EDAM\UserStore\UserStore_updateBusinessUserIdentifier_args();
        $args->authenticationToken = $authenticationToken;
        $args->oldEmailAddress = $oldEmailAddress;
        $args->newEmailAddress = $newEmailAddress;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'updateBusinessUserIdentifier',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('updateBusinessUserIdentifier', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_updateBusinessUserIdentifier()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\EDAM\UserStore\UserStore_updateBusinessUserIdentifier_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \EDAM\UserStore\UserStore_updateBusinessUserIdentifier_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->userException !== null) {
            throw $result->userException;
        }
        if ($result->systemException !== null) {
            throw $result->systemException;
        }
        if ($result->notFoundException !== null) {
            throw $result->notFoundException;
        }
        return;
    }

    public function listBusinessUsers($authenticationToken)
    {
        $this->send_listBusinessUsers($authenticationToken);
        return $this->recv_listBusinessUsers();
    }

    public function send_listBusinessUsers($authenticationToken)
    {
        $args = new \EDAM\UserStore\UserStore_listBusinessUsers_args();
        $args->authenticationToken = $authenticationToken;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'listBusinessUsers',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('listBusinessUsers', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_listBusinessUsers()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\EDAM\UserStore\UserStore_listBusinessUsers_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \EDAM\UserStore\UserStore_listBusinessUsers_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->userException !== null) {
            throw $result->userException;
        }
        if ($result->systemException !== null) {
            throw $result->systemException;
        }
        throw new \Exception("listBusinessUsers failed: unknown result");
    }

    public function listBusinessInvitations($authenticationToken, $includeRequestedInvitations)
    {
        $this->send_listBusinessInvitations($authenticationToken, $includeRequestedInvitations);
        return $this->recv_listBusinessInvitations();
    }

    public function send_listBusinessInvitations($authenticationToken, $includeRequestedInvitations)
    {
        $args = new \EDAM\UserStore\UserStore_listBusinessInvitations_args();
        $args->authenticationToken = $authenticationToken;
        $args->includeRequestedInvitations = $includeRequestedInvitations;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'listBusinessInvitations',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('listBusinessInvitations', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_listBusinessInvitations()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\EDAM\UserStore\UserStore_listBusinessInvitations_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \EDAM\UserStore\UserStore_listBusinessInvitations_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->userException !== null) {
            throw $result->userException;
        }
        if ($result->systemException !== null) {
            throw $result->systemException;
        }
        throw new \Exception("listBusinessInvitations failed: unknown result");
    }

    public function getAccountLimits($serviceLevel)
    {
        $this->send_getAccountLimits($serviceLevel);
        return $this->recv_getAccountLimits();
    }

    public function send_getAccountLimits($serviceLevel)
    {
        $args = new \EDAM\UserStore\UserStore_getAccountLimits_args();
        $args->serviceLevel = $serviceLevel;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getAccountLimits',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getAccountLimits', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getAccountLimits()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\EDAM\UserStore\UserStore_getAccountLimits_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \EDAM\UserStore\UserStore_getAccountLimits_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->userException !== null) {
            throw $result->userException;
        }
        throw new \Exception("getAccountLimits failed: unknown result");
    }
}
