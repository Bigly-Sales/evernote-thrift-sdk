<?php
namespace EDAM\UserStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Service:  UserStore
 * <p>
 * The UserStore service is primarily used by EDAM clients to establish
 * authentication via username and password over a trusted connection (e.g.
 * SSL).  A client's first call to this interface should be checkVersion() to
 * ensure that the client's software is up to date.
 * </p>
 * All calls which require an authenticationToken may throw an
 * EDAMUserException for the following reasons:
 *  <ul>
 *   <li> AUTH_EXPIRED "authenticationToken" - token has expired
 *   <li> BAD_DATA_FORMAT "authenticationToken" - token is malformed
 *   <li> DATA_REQUIRED "authenticationToken" - token is empty
 *   <li> INVALID_AUTH "authenticationToken" - token signature is invalid
 *   <li> PERMISSION_DENIED "authenticationToken" - token does not convey sufficient
 *     privileges
 * </ul>
 */
interface UserStoreIf
{
    /**
     * This should be the first call made by a client to the EDAM service.  It
     * tells the service what protocol version is used by the client.  The
     * service will then return true if the client is capable of talking to
     * the service, and false if the client's protocol version is incompatible
     * with the service, so the client must upgrade.  If a client receives a
     * false value, it should report the incompatibility to the user and not
     * continue with any more EDAM requests (UserStore or NoteStore).
     * 
     * @param clientName
     *   This string provides some information about the client for
     *   tracking/logging on the service.  It should provide information about
     *   the client's software and platform. The structure should be:
     *   application/version; platform/version; [ device/version ]
     *   E.g. "Evernote Windows/3.0.1; Windows/XP SP3".
     * 
     * @param edamVersionMajor
     *   This should be the major protocol version that was compiled by the
     *   client.  This should be the current value of the EDAM_VERSION_MAJOR
     *   constant for the client.
     * 
     * @param edamVersionMinor
     *   This should be the major protocol version that was compiled by the
     *   client.  This should be the current value of the EDAM_VERSION_MINOR
     *   constant for the client.
     * 
     * @param string $clientName
     * @param int $edamVersionMajor
     * @param int $edamVersionMinor
     * @return bool
     */
    public function checkVersion($clientName, $edamVersionMajor, $edamVersionMinor);
    /**
     * This provides bootstrap information to the client. Various bootstrap
     * profiles and settings may be used by the client to configure itself.
     * 
     * @param locale
     *   The client's current locale, expressed in language[_country]
     *   format. E.g., "en_US". See ISO-639 and ISO-3166 for valid
     *   language and country codes.
     * 
     * @return
     *   The bootstrap information suitable for this client.
     * 
     * @param string $locale
     * @return \EDAM\UserStore\BootstrapInfo  This structure describes a collection of bootstrap profiles.
     * <dl>
     *  <dt>profiles:</dt>
     *    <dd>
     *    List of one or more bootstrap profiles, in descending
     *    preference order.
     *    </dd>
     *  </dl>
     * 
     */
    public function getBootstrapInfo($locale);
    /**
     * This is used to check a username and password in order to create a
     * long-lived authentication token that can be used for further actions.
     * 
     * This function is not available to most third party applications,
     * which typically authenticate using OAuth as
     * described at
     * <a href="http://dev.evernote.com/documentation/cloud/">dev.evernote.com</a>.
     * If you believe that your application requires permission to authenticate
     * using username and password instead of OAuth, please contact Evernote
     * developer support by visiting
     * <a href="http://dev.evernote.com">dev.evernote.com</a>.
     * 
     * @param username
     *   The username or registered email address of the account to
     *   authenticate against.
     * 
     * @param password
     *   The plaintext password to check against the account.  Since
     *   this is not protected by the EDAM protocol, this information must be
     *   provided over a protected transport (i.e. SSL).
     * 
     * @param consumerKey
     *   The "consumer key" portion of the API key issued to the client application
     *   by Evernote.
     * 
     * @param consumerSecret
     *   The "consumer secret" portion of the API key issued to the client application
     *   by Evernote.
     * 
     * @param deviceIdentifier
     *   An optional string that uniquely identifies the device from which the
     *   authentication is being performed. This string allows the service to return the
     *   same authentication token when a given application requests authentication
     *   repeatedly from the same device. This may happen when the user logs out of an
     *   application and then logs back in, or when the application is uninstalled
     *   and later reinstalled. If no reliable device identifier can be created,
     *   this value should be omitted. If set, the device identifier must be between
     *   1 and EDAM_DEVICE_ID_LEN_MAX characters long and must match the regular expression
     *   EDAM_DEVICE_ID_REGEX.
     * 
     * @param deviceDescription
     *   A description of the device from which the authentication is being performed.
     *   This field is displayed to the user in a list of authorized applications to
     *   allow them to distinguish between multiple tokens issued to the same client
     *   application on different devices. For example, the Evernote iOS client on
     *   a user's iPhone and iPad might pass the iOS device names "Bob's iPhone" and
     *   "Bob's iPad". The device description must be between 1 and
     *   EDAM_DEVICE_DESCRIPTION_LEN_MAX characters long and must match the regular
     *   expression EDAM_DEVICE_DESCRIPTION_REGEX.
     * 
     * @param supportsTwoFactor
     *   Whether the calling application supports two-factor authentication. If this
     *   parameter is false, this method will fail with the error code INVALID_AUTH and the
     *   parameter "password" when called for a user who has enabled two-factor
     *   authentication.
     * 
     * @return
     *   <p>The result of the authentication. The level of detail provided in the returned
     *   AuthenticationResult.User structure depends on the access level granted by
     *   calling application's API key.</p>
     *   <p>If the user has two-factor authentication enabled,
     *   AuthenticationResult.secondFactorRequired will be set and
     *   AuthenticationResult.authenticationToken will contain a short-lived token
     *   that may only be used to complete the two-factor authentication process by calling
     *   UserStore.completeTwoFactorAuthentication.</p>
     * 
     * @throws EDAMUserException <ul>
     *   <li> DATA_REQUIRED "username" - username is empty
     *   <li> DATA_REQUIRED "password" - password is empty
     *   <li> DATA_REQUIRED "consumerKey" - consumerKey is empty
     *   <li> DATA_REQUIRED "consumerSecret" - consumerSecret is empty
     *   <li> DATA_REQUIRED "deviceDescription" - deviceDescription is empty
     *   <li> BAD_DATA_FORMAT "deviceDescription" - deviceDescription is not valid.
     *   <li> BAD_DATA_FORMAT "deviceIdentifier" - deviceIdentifier is not valid.
     *   <li> INVALID_AUTH "username" - username not found
     *   <li> INVALID_AUTH "password" - password did not match
     *   <li> INVALID_AUTH "consumerKey" - consumerKey is not authorized
     *   <li> INVALID_AUTH "consumerSecret" - consumerSecret is incorrect
     *   <li> INVALID_AUTH "businessOnly" - the user is a business-only account
     *   <li> PERMISSION_DENIED "User.active" - user account is closed
     *   <li> PERMISSION_DENIED "User.tooManyFailuresTryAgainLater" - user has
     *     failed authentication too often
     *   <li> AUTH_EXPIRED "password" - user password is expired
     * </ul>
     * 
     * @param string $username
     * @param string $password
     * @param string $consumerKey
     * @param string $consumerSecret
     * @param string $deviceIdentifier
     * @param string $deviceDescription
     * @param bool $supportsTwoFactor
     * @return \EDAM\UserStore\AuthenticationResult  When an authentication (or re-authentication) is performed, this structure
     *  provides the result to the client.
     * <dl>
     *  <dt>currentTime:</dt>
     *    <dd>
     *    The server-side date and time when this result was
     *    generated.
     *    </dd>
     *  <dt>authenticationToken:</dt>
     *    <dd>
     *    Holds an opaque, ASCII-encoded token that can be
     *    used by the client to perform actions on a NoteStore.
     *    </dd>
     *  <dt>expiration:</dt>
     *    <dd>
     *    Holds the server-side date and time when the
     *    authentication token will expire.
     *    This time can be compared to "currentTime" to produce an expiration
     *    time that can be reconciled with the client's local clock.
     *    </dd>
     *  <dt>user:</dt>
     *    <dd>
     *    Holds the information about the account which was
     *    authenticated if this was a full authentication.  May be absent if this
     *    particular authentication did not require user information.
     *    </dd>
     *  <dt>publicUserInfo:</dt>
     *    <dd>
     *    If this authentication result was achieved without full permissions to
     *    access the full User structure, this field may be set to give back
     *    a more limited public set of data.
     *    </dd>
     *  <dt>noteStoreUrl:</dt>
     *    <dd>
     *    DEPRECATED - Client applications should use urls.noteStoreUrl.
     *    </dd>
     *  <dt>webApiUrlPrefix:</dt>
     *    <dd>
     *    DEPRECATED - Client applications should use urls.webApiUrlPrefix.
     *    </dd>
     *  <dt>secondFactorRequired:</dt>
     *    <dd>
     *    If set to true, this field indicates that the user has enabled two-factor
     *    authentication and must enter their second factor in order to complete
     *    authentication. In this case the value of authenticationResult will be
     *    a short-lived authentication token that may only be used to make a
     *    subsequent call to completeTwoFactorAuthentication.
     *    </dd>
     *  <dt>secondFactorDeliveryHint:</dt>
     *    <dd>
     *    When secondFactorRequired is set to true, this field may contain a string
     *    describing the second factor delivery method that the user has configured.
     *    This will typically be an obfuscated mobile device number, such as
     *    "(xxx) xxx-x095". This string can be displayed to the user to remind them
     *    how to obtain the required second factor.
     *    </dd>
     *  <dt>urls</dt>
     *    <dd>
     *    This structure will contain all of the URLs that clients need to make requests to the
     *    Evernote service on behalf of the authenticated User.
     *    </dd>
     *  </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function authenticateLongSession($username, $password, $consumerKey, $consumerSecret, $deviceIdentifier, $deviceDescription, $supportsTwoFactor);
    /**
     * Complete the authentication process when a second factor is required. This
     * call is made after a successful call to authenticate or authenticateLongSession
     * when the authenticating user has enabled two-factor authentication.
     * 
     * @param authenticationToken An authentication token returned by a previous
     *   call to UserStore.authenticate or UserStore.authenticateLongSession that
     *   could not be completed in a single call because a second factor was required.
     * 
     * @param oneTimeCode The one time code entered by the user. This value is delivered
     *   out-of-band, typically via SMS or an authenticator application.
     * 
     * @param deviceIdentifier See the corresponding parameter in authenticateLongSession.
     * 
     * @param deviceDescription See the corresponding parameter in authenticateLongSession.
     * 
     * @return
     *   The result of the authentication. The level of detail provided in the returned
     *   AuthenticationResult.User structure depends on the access level granted by the
     *   calling application's API key. If the initial authentication call was made to
     *   authenticateLongSession, the AuthenticationResult will contain a long-lived
     *   authentication token.
     * 
     * @throws EDAMUserException <ul>
     *   <li> DATA_REQUIRED "authenticationToken" - authenticationToken is empty
     *   <li> DATA_REQUIRED "oneTimeCode" - oneTimeCode is empty
     *   <li> BAD_DATA_FORMAT "deviceIdentifier" - deviceIdentifier is not valid
     *   <li> BAD_DATA_FORMAT "authenticationToken" - authenticationToken is not well formed
     *   <li> INVALID_AUTH "oneTimeCode" - oneTimeCode did not match
     *   <li> AUTH_EXPIRED "authenticationToken" - authenticationToken has expired
     *   <li> PERMISSION_DENIED "authenticationToken" - authenticationToken is not valid
     *   <li> PERMISSION_DENIED "User.active" - user account is closed
     *   <li> PERMISSION_DENIED "User.tooManyFailuresTryAgainLater" - user has
     *     failed authentication too often
     *   <li> DATA_CONFLICT "User.twoFactorAuthentication" - The user has not enabled
     *      two-factor authentication.</li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $oneTimeCode
     * @param string $deviceIdentifier
     * @param string $deviceDescription
     * @return \EDAM\UserStore\AuthenticationResult  When an authentication (or re-authentication) is performed, this structure
     *  provides the result to the client.
     * <dl>
     *  <dt>currentTime:</dt>
     *    <dd>
     *    The server-side date and time when this result was
     *    generated.
     *    </dd>
     *  <dt>authenticationToken:</dt>
     *    <dd>
     *    Holds an opaque, ASCII-encoded token that can be
     *    used by the client to perform actions on a NoteStore.
     *    </dd>
     *  <dt>expiration:</dt>
     *    <dd>
     *    Holds the server-side date and time when the
     *    authentication token will expire.
     *    This time can be compared to "currentTime" to produce an expiration
     *    time that can be reconciled with the client's local clock.
     *    </dd>
     *  <dt>user:</dt>
     *    <dd>
     *    Holds the information about the account which was
     *    authenticated if this was a full authentication.  May be absent if this
     *    particular authentication did not require user information.
     *    </dd>
     *  <dt>publicUserInfo:</dt>
     *    <dd>
     *    If this authentication result was achieved without full permissions to
     *    access the full User structure, this field may be set to give back
     *    a more limited public set of data.
     *    </dd>
     *  <dt>noteStoreUrl:</dt>
     *    <dd>
     *    DEPRECATED - Client applications should use urls.noteStoreUrl.
     *    </dd>
     *  <dt>webApiUrlPrefix:</dt>
     *    <dd>
     *    DEPRECATED - Client applications should use urls.webApiUrlPrefix.
     *    </dd>
     *  <dt>secondFactorRequired:</dt>
     *    <dd>
     *    If set to true, this field indicates that the user has enabled two-factor
     *    authentication and must enter their second factor in order to complete
     *    authentication. In this case the value of authenticationResult will be
     *    a short-lived authentication token that may only be used to make a
     *    subsequent call to completeTwoFactorAuthentication.
     *    </dd>
     *  <dt>secondFactorDeliveryHint:</dt>
     *    <dd>
     *    When secondFactorRequired is set to true, this field may contain a string
     *    describing the second factor delivery method that the user has configured.
     *    This will typically be an obfuscated mobile device number, such as
     *    "(xxx) xxx-x095". This string can be displayed to the user to remind them
     *    how to obtain the required second factor.
     *    </dd>
     *  <dt>urls</dt>
     *    <dd>
     *    This structure will contain all of the URLs that clients need to make requests to the
     *    Evernote service on behalf of the authenticated User.
     *    </dd>
     *  </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function completeTwoFactorAuthentication($authenticationToken, $oneTimeCode, $deviceIdentifier, $deviceDescription);
    /**
     * Revoke an existing long lived authentication token. This can be used to
     * revoke OAuth tokens or tokens created by calling authenticateLongSession,
     * and allows a user to effectively log out of Evernote from the perspective
     * of the application that holds the token. The authentication token that is
     * passed is immediately revoked and may not be used to call any authenticated
     * EDAM function.
     * 
     * @param authenticationToken the authentication token to revoke.
     * 
     * @throws EDAMUserException <ul>
     *   <li> DATA_REQUIRED "authenticationToken" - no authentication token provided
     *   <li> BAD_DATA_FORMAT "authenticationToken" - the authentication token is not well formed
     *   <li> INVALID_AUTH "authenticationToken" - the authentication token is invalid
     *   <li> AUTH_EXPIRED "authenticationToken" - the authentication token is expired or
     *     is already revoked.
     * </ul>
     * 
     * @param string $authenticationToken
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function revokeLongSession($authenticationToken);
    /**
     * This is used to take an existing authentication token that grants access
     * to an individual user account (returned from 'authenticate',
     * 'authenticateLongSession' or an OAuth authorization) and obtain an additional
     * authentication token that may be used to access business notebooks if the user
     * is a member of an Evernote Business account.
     * 
     * The resulting authentication token may be used to make NoteStore API calls
     * against the business using the NoteStore URL returned in the result.
     * 
     * @param authenticationToken
     *   The authentication token for the user. This may not be a shared authentication
     *   token (returned by NoteStore.authenticateToSharedNotebook or
     *   NoteStore.authenticateToSharedNote) or a business authentication token.
     * 
     * @return
     *   The result of the authentication, with the token granting access to the
     *   business in the result's 'authenticationToken' field. The URL that must
     *   be used to access the business account NoteStore will be returned in the
     *   result's 'noteStoreUrl' field.  The 'User' field will
     *   not be set in the result.
     * 
     * @throws EDAMUserException <ul>
     *   <li> PERMISSION_DENIED "authenticationToken" - the provided authentication token
     *        is a shared or business authentication token. </li>
     *   <li> PERMISSION_DENIED "Business" - the user identified by the provided
     *        authentication token is not currently a member of a business. </li>
     *   <li> PERMISSION_DENIED "Business.status" - the business that the user is a
     *        member of is not currently in an active status. </li>
     *   <li> BUSINESS_SECURITY_LOGIN_REQUIRED "sso" - the user must complete single
     *        sign-on before authenticating to the business.
     * </ul>
     * 
     * @param string $authenticationToken
     * @return \EDAM\UserStore\AuthenticationResult  When an authentication (or re-authentication) is performed, this structure
     *  provides the result to the client.
     * <dl>
     *  <dt>currentTime:</dt>
     *    <dd>
     *    The server-side date and time when this result was
     *    generated.
     *    </dd>
     *  <dt>authenticationToken:</dt>
     *    <dd>
     *    Holds an opaque, ASCII-encoded token that can be
     *    used by the client to perform actions on a NoteStore.
     *    </dd>
     *  <dt>expiration:</dt>
     *    <dd>
     *    Holds the server-side date and time when the
     *    authentication token will expire.
     *    This time can be compared to "currentTime" to produce an expiration
     *    time that can be reconciled with the client's local clock.
     *    </dd>
     *  <dt>user:</dt>
     *    <dd>
     *    Holds the information about the account which was
     *    authenticated if this was a full authentication.  May be absent if this
     *    particular authentication did not require user information.
     *    </dd>
     *  <dt>publicUserInfo:</dt>
     *    <dd>
     *    If this authentication result was achieved without full permissions to
     *    access the full User structure, this field may be set to give back
     *    a more limited public set of data.
     *    </dd>
     *  <dt>noteStoreUrl:</dt>
     *    <dd>
     *    DEPRECATED - Client applications should use urls.noteStoreUrl.
     *    </dd>
     *  <dt>webApiUrlPrefix:</dt>
     *    <dd>
     *    DEPRECATED - Client applications should use urls.webApiUrlPrefix.
     *    </dd>
     *  <dt>secondFactorRequired:</dt>
     *    <dd>
     *    If set to true, this field indicates that the user has enabled two-factor
     *    authentication and must enter their second factor in order to complete
     *    authentication. In this case the value of authenticationResult will be
     *    a short-lived authentication token that may only be used to make a
     *    subsequent call to completeTwoFactorAuthentication.
     *    </dd>
     *  <dt>secondFactorDeliveryHint:</dt>
     *    <dd>
     *    When secondFactorRequired is set to true, this field may contain a string
     *    describing the second factor delivery method that the user has configured.
     *    This will typically be an obfuscated mobile device number, such as
     *    "(xxx) xxx-x095". This string can be displayed to the user to remind them
     *    how to obtain the required second factor.
     *    </dd>
     *  <dt>urls</dt>
     *    <dd>
     *    This structure will contain all of the URLs that clients need to make requests to the
     *    Evernote service on behalf of the authenticated User.
     *    </dd>
     *  </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function authenticateToBusiness($authenticationToken);
    /**
     * Returns the User corresponding to the provided authentication token,
     * or throws an exception if this token is not valid.
     * The level of detail provided in the returned User structure depends on
     * the access level granted by the token, so a web service client may receive
     * fewer fields than an integrated desktop client.
     * 
     * @param string $authenticationToken
     * @return \EDAM\Types\User  This represents the information about a single user account.
     * <dl>
     *  <dt>id</dt>
     *    <dd>The unique numeric identifier for the account, which will not
     *    change for the lifetime of the account.
     *    </dd>
     * 
     *  <dt>username</dt>
     *    <dd>The name that uniquely identifies a single user account. This name
     *    may be presented by the user, along with their password, to log into
     *    their account.
     *    May only contain a-z, 0-9, or '-', and may not start or end with the '-'
     *    <br/>
     *    Length:  EDAM_USER_USERNAME_LEN_MIN - EDAM_USER_USERNAME_LEN_MAX
     *    <br/>
     *    Regex:  EDAM_USER_USERNAME_REGEX
     *    </dd>
     * 
     *  <dt>email</dt>
     *    <dd>The email address registered for the user.  Must comply with
     *    RFC 2821 and RFC 2822.<br/>
     *    Third party applications that authenticate using OAuth do not have
     *    access to this field.
     *    Length:  EDAM_EMAIL_LEN_MIN - EDAM_EMAIL_LEN_MAX
     *    <br/>
     *    Regex:  EDAM_EMAIL_REGEX
     *    </dd>
     * 
     *  <dt>name</dt>
     *    <dd>The printable name of the user, which may be a combination
     *    of given and family names.  This is used instead of separate "first"
     *    and "last" names due to variations in international name format/order.
     *    May not start or end with a whitespace character.  May contain any
     *    character but carriage return or newline (Unicode classes Zl and Zp).
     *    <br/>
     *    Length:  EDAM_USER_NAME_LEN_MIN - EDAM_USER_NAME_LEN_MAX
     *    <br/>
     *    Regex:  EDAM_USER_NAME_REGEX
     *    </dd>
     * 
     *  <dt>timezone</dt>
     *    <dd>The zone ID for the user's default location.  If present,
     *    this may be used to localize the display of any timestamp for which no
     *    other timezone is available.
     *    The format must be encoded as a standard zone ID such as
     *    "America/Los_Angeles" or "GMT+08:00"
     *    <br/>
     *    Length:  EDAM_TIMEZONE_LEN_MIN - EDAM_TIMEZONE_LEN_MAX
     *    <br/>
     *    Regex:  EDAM_TIMEZONE_REGEX
     *    </dd>
     * 
     *  <dt>serviceLevel</dt>
     *    <dd>The level of service the user currently receives. This will always be populated
     *        for users retrieved from the Evernote service.
     *    </dd>
     * 
     *  <dt>created</dt>
     *    <dd>The date and time when this user account was created in the
     *    service.
     *    </dd>
     * 
     *  <dt>updated</dt>
     *    <dd>The date and time when this user account was last modified
     *    in the service.
     *    </dd>
     * 
     *  <dt>deleted</dt>
     *    <dd>If the account has been deleted from the system (e.g. as
     *    the result of a legal request by the user), the date and time of the
     *    deletion will be represented here.  If not, this value will not be set.
     *    </dd>
     * 
     *  <dt>active</dt>
     *    <dd>If the user account is available for login and
     *    synchronization, this flag will be set to true.
     *    </dd>
     * 
     *  <dt>shardId</dt>
     *    <dd>DEPRECATED - Client applications should have no need to use this field.
     *    </dd>
     * 
     *  <dt>attributes</dt>
     *    <dd>If present, this will contain a list of the attributes
     *    for this user account.
     *    </dd>
     * 
     *  <dt>accounting</dt>
     *    <dd>Bookkeeping information for the user's subscription.
     *    </dd>
     * 
     *  <dt>businessUserInfo</dt>
     *    <dd>If present, this will contain a set of business information
     *    relating to the user's business membership.  If not present, the
     *    user is not currently part of a business.
     *    </dd>
     * 
     *  <dt>photoUrl</dt>
     *    <dd>The URL of the photo that represents this User. This field is filled in by the
     *    service and is read-only to clients. If <code>photoLastUpdated</code> is
     *    not set, this url will point to a placeholder user photo generated by the
     *    service.</dd>
     * 
     *  <dt>photoLastUpdated</dt>
     *    <dd>The time at which the photo at 'photoUrl' was last updated by this User. This
     *    field will be null if the User never set a profile photo. This field is filled in by
     *    the service and is read-only to clients.</dd>
     * 
     *  <dt>accountLimits</dt>
     *    <dd>Account limits applicable for this user.</dd>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function getUser($authenticationToken);
    /**
     * Asks the UserStore about the publicly available location information for
     * a particular username.
     * 
     * @throws EDAMUserException <ul>
     *   <li> DATA_REQUIRED "username" - username is empty
     * </ul>
     * 
     * @param string $username
     * @return \EDAM\UserStore\PublicUserInfo  This structure is used to provide publicly-available user information
     *  about a particular account.
     * <dl>
     *  <dt>userId:</dt>
     *    <dd>
     *    The unique numeric user identifier for the user account.
     *    </dd>
     *  <dt>serviceLevel:</dt>
     *    <dd>
     *    The service level of the account.
     *    </dd>
     *  <dt>noteStoreUrl:</dt>
     *    <dd>
     *    This field will contain the full URL that clients should use to make
     *    NoteStore requests to the server shard that contains that user's data.
     *    I.e. this is the URL that should be used to create the Thrift HTTP client
     *    transport to send messages to the NoteStore service for the account.
     *    </dd>
     *  <dt>webApiUrlPrefix:</dt>
     *    <dd>
     *    This field will contain the initial part of the URLs that should be used
     *    to make requests to Evernote's thin client "web API", which provide
     *    optimized operations for clients that aren't capable of manipulating
     *    the full contents of accounts via the full Thrift data model. Clients
     *    should concatenate the relative path for the various servlets onto the
     *    end of this string to construct the full URL, as documented on our
     *    developer web site.
     *    </dd>
     *  </dl>
     * 
     * @throws \EDAM\Error\EDAMNotFoundException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMUserException
     */
    public function getPublicUserInfo($username);
    /**
     * <p>Returns the URLs that should be used when sending requests to the service on
     * behalf of the account represented by the provided authenticationToken.</p>
     * 
     * <p>This method isn't needed by most clients, who can retreive the correct set of
     * UserUrls from the AuthenticationResult returned from
     * UserStore#authenticateLongSession(). This method is typically only needed to look up
     * the correct URLs for an existing long-lived authentication token.</p>
     * 
     * @param string $authenticationToken
     * @return \EDAM\UserStore\UserUrls <dl>
     * <dt>noteStoreUrl:</dt>
     *   <dd>
     *   This field will contain the full URL that clients should use to make
     *   NoteStore requests to the server shard that contains that user's data.
     *   I.e. this is the URL that should be used to create the Thrift HTTP client
     *   transport to send messages to the NoteStore service for the account.
     *   </dd>
     * <dt>webApiUrlPrefix:</dt>
     *   <dd>
     *   This field will contain the initial part of the URLs that should be used
     *   to make requests to Evernote's thin client "web API", which provide
     *   optimized operations for clients that aren't capable of manipulating
     *   the full contents of accounts via the full Thrift data model. Clients
     *   should concatenate the relative path for the various servlets onto the
     *   end of this string to construct the full URL, as documented on our
     *   developer web site.
     *   </dd>
     * <dt>userStoreUrl:</dt>
     *   <dd>
     *   This field will contain the full URL that clients should use to make UserStore
     *   requests after successfully authenticating. I.e. this is the URL that should be used
     *   to create the Thrift HTTP client transport to send messages to the UserStore service
     *   for this account.
     *   </dd>
     * <dt>utilityUrl:</dt>
     *   <dd>
     *   This field will contain the full URL that clients should use to make Utility requests
     *   to the server shard that contains that user's data. I.e. this is the URL that should
     *   be used to create the Thrift HTTP client transport to send messages to the Utility
     *   service for the account.
     *   </dd>
     * <dt>messageStoreUrl:</dt>
     *   <dd>
     *   This field will contain the full URL that clients should use to make MessageStore
     *   requests to the server. I.e. this is the URL that should be used to create the
     *   Thrift HTTP client transport to send messages to the MessageStore service for the
     *   account.
     *   </dd>
     * <dt>userWebSocketUrl:</dt>
     *   <dd>
     *   This field will contain the full URL that clients should use when opening a
     *   persistent web socket to recieve notification of events for the authenticated user.
     *   </dd>
     * </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function getUserUrls($authenticationToken);
    /**
     * Invite a user to join an Evernote Business account.
     * 
     * Behavior will depend on the auth token. <ol>
     *   <li>
     *     auth token with privileges to manage Evernote Business membership.
     *       "External Provisioning" - The user will receive an email inviting
     *       them to join the business. They do not need to have an existing Evernote
     *       account. If the user has already been invited, a new invitation email
     *       will be sent.
     *   </li>
     *   <li>
     *     business auth token issued to an admin user. Only for first-party clients:
     *       "Approve Invitation" - If there has been a request to invite the email,
     *       approve it. Invited user will receive email with a link to join business.
     *       "Invite User" - If no invitation for the email exists, create an approved
     *       invitation for the email. An email will be sent to the emailAddress with
     *       a link to join the caller's business.
     *   </li>
     *   </li>
     *     business auth token:
     *       "Request Invitation" - If no invitation exists, create a request to
     *       invite the user to the business. These requests do not count towards a
     *       business' max active user limit.
     *   </li>
     * </ol>
     * 
     * @param authenticationToken
     *   the authentication token with sufficient privileges to manage Evernote Business
     *   membership or a business auth token.
     * 
     * @param emailAddress
     *   the email address of the user to invite to join the Evernote Business account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> DATA_REQUIRED "email" - if no email address was provided </li>
     *   <li> BAD_DATA_FORMAT "email" - if the email address is not well formed </li>
     *   <li> DATA_CONFLICT "BusinessUser.email" - if there is already a user in the business
     *     whose business email address matches the specified email address. </li>
     *   <li> LIMIT_REACHED "Business.maxActiveUsers" - if the business has reached its
     *     user limit. </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $emailAddress
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function inviteToBusiness($authenticationToken, $emailAddress);
    /**
     * Remove a user from an Evernote Business account. Once removed, the user will no
     * longer be able to access content within the Evernote Business account.
     * 
     * <p>The email address of the user to remove from the business must match the email
     * address used to invite a user to join the business via UserStore.inviteToBusiness.
     * This function will only remove users who were invited by external provisioning</p>
     * 
     * @param authenticationToken
     *   An authentication token with sufficient privileges to manage Evernote Business
     *   membership.
     * 
     * @param emailAddress
     *   The email address of the user to remove from the Evernote Business account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> DATA_REQUIRED "email" - if no email address was provided </li>
     *   <li> BAD_DATA_FORMAT "email" - The email address is not well formed </li>
     * </ul>
     * @throws EDAMNotFoundException <ul>
     *   <li> "email" - If there is no user with the specified email address in the
     *     business or that user was not invited via external provisioning. </li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $emailAddress
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function removeFromBusiness($authenticationToken, $emailAddress);
    /**
     * Update the email address used to uniquely identify an Evernote Business user.
     * 
     * This will update the identifier for a user who was previously invited using
     * inviteToBusiness, ensuring that caller and the Evernote service maintain an
     * agreed-upon identifier for a specific user.
     * 
     * For example, the following sequence of calls would invite a user to join
     * a business, update their email address, and then remove the user
     * from the business using the updated email address.
     * 
     * inviteToBusiness("foo@bar.com")
     * updateBusinessUserIdentifier("foo@bar.com", "baz@bar.com")
     * removeFromBusiness("baz@bar.com")
     * 
     * @param authenticationToken
     *   An authentication token with sufficient privileges to manage Evernote Business
     *   membership.
     * 
     * @param oldEmailAddress
     *   The existing email address used to uniquely identify the user.
     * 
     * @param newEmailAddress
     *   The new email address used to uniquely identify the user.
     * 
     * @throws EDAMUserException <ul>
     *   <li>DATA_REQUIRED "oldEmailAddress" - No old email address was provided</li>
     *   <li>DATA_REQUIRED "newEmailAddress" - No new email address was provided</li>
     *   <li>BAD_DATA_FORMAT "oldEmailAddress" - The old email address is not well formed</li>
     *   <li>BAD_DATA_FORMAT "newEmailAddress" - The new email address is not well formed</li>
     *   <li>DATA_CONFLICT "oldEmailAddress" - The old and new email addresses were the same</li>
     *   <li>DATA_CONFLICT "newEmailAddress" - There is already an invitation or registered user with
     *     the provided new email address.</li>
     *   <li>DATA_CONFLICT "invitation.externallyProvisioned" - The user identified by
     *     oldEmailAddress was not added via UserStore.inviteToBusiness and therefore cannot be
     *     updated.</li>
     * </ul>
     * @throws EDAMNotFoundException <ul>
     *   <li>"oldEmailAddress" - If there is no user or invitation with the specified oldEmailAddress
     *     in the business.</li>
     * </ul>
     * 
     * @param string $authenticationToken
     * @param string $oldEmailAddress
     * @param string $newEmailAddress
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     * @throws \EDAM\Error\EDAMNotFoundException
     */
    public function updateBusinessUserIdentifier($authenticationToken, $oldEmailAddress, $newEmailAddress);
    /**
     * Returns a list of active business users in a given business.
     * 
     * Clients are required to cache this information and re-fetch no more than once per day
     * or when they encountered a user ID or username that was not known to them.
     * 
     * To avoid excessive look ups, clients should also track user IDs and usernames that belong
     * to users who are not in the business, since they will not be included in the result.
     * 
     * I.e., when a client encounters a previously unknown user ID as a note's creator, it may query
     * listBusinessUsers to find information about this user. If the user is not in the resulting
     * list, the client should track that fact and not re-query the service the next time that it sees
     * this user on a note.
     * 
     * @param authenticationToken
     *   A business authentication token returned by authenticateToBusiness or with sufficient
     *   privileges to manage Evernote Business membership.
     * 
     * @param string $authenticationToken
     * @return \EDAM\Types\UserProfile[]
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function listBusinessUsers($authenticationToken);
    /**
     * Returns a list of outstanding invitations to join an Evernote Business account.
     * 
     * Only outstanding invitations are returned by this function. Users who have accepted an
     * invitation and joined a business are listed using listBusinessUsers.
     * 
     * @param authenticationToken
     *   An authentication token with sufficient privileges to manage Evernote Business membership.
     * 
     * @param includeRequestedInvitations
     *   If true, invitations with a status of BusinessInvitationStatus.REQUESTED will be included
     *   in the returned list. If false, only invitations with a status of
     *   BusinessInvitationStatus.APPROVED will be included.
     * 
     * @param string $authenticationToken
     * @param bool $includeRequestedInvitations
     * @return \EDAM\Types\BusinessInvitation[]
     * @throws \EDAM\Error\EDAMUserException
     * @throws \EDAM\Error\EDAMSystemException
     */
    public function listBusinessInvitations($authenticationToken, $includeRequestedInvitations);
    /**
     * Retrieve the standard account limits for a given service level. This should only be
     * called when necessary, e.g. to determine if a higher level is available should the
     * user upgrade, and should be cached for long periods (e.g. 30 days) as the values are
     * not expected to fluctuate frequently.
     * 
     * @throws EDAMUserException <ul>
     *   <li>DATA_REQUIRED "serviceLevel" - serviceLevel is null</li>
     * </ul>
     * 
     * @param int $serviceLevel
     * @return \EDAM\Types\AccountLimits  This structure is used to provide account limits that are in effect for this user.
     * <dl>
     *  <dt>userMailLimitDaily</dt>
     *    <dd>The number of emails of any type that can be sent by a user from the
     *        service per day.  If an email is sent to two different recipients, this
     *        counts as two emails.
     *    </dd>
     *  <dt>noteSizeMax</dt>
     *    <dd>Maximum total size of a Note that can be added.  The size of a note is
     *        calculated as:
     *        ENML content length (in Unicode characters) plus the sum of all resource
     *        sizes (in bytes).
     *    </dd>
     *  <dt>resourceSizeMax</dt>
     *    <dd>Maximum size of a resource, in bytes
     *    </dd>
     *  <dt>userLinkedNotebookMax</dt>
     *    <dd>Maximum number of linked notebooks per account.
     *    </dd>
     *  <dt>uploadLimit</dt>
     *    <dd>The number of bytes that can be uploaded to the account
     *    in the current month.  For new notes that are created, this is the length
     *    of the note content (in Unicode characters) plus the size of each resource
     *    (in bytes).  For edited notes, this is the the difference between the old
     *    length and the new length (if this is greater than 0) plus the size of
     *    each new resource.
     *    </dd>
     *  <dt>userNoteCountMax</dt>
     *    <dd>Maximum number of Notes per user</dd>
     *  <dt>userNotebookCountMax</dt>
     *    <dd>Maximum number of Notebooks per user</dd>
     *  <dt>userTagCountMax</dt>
     *    <dd>Maximum number of Tags per account</dd>
     *  <dt>noteTagCountMax</dt>
     *    <dd>Maximum number of Tags per Note</dd>
     *  <dt>userSavedSearchesMax</dt>
     *    <dd>Maximum number of SavedSearches per account</dd>
     *  <dt>noteResourceCountMax</dt>
     *    <dd>The maximum number of Resources per Note</dd>
     *  </dl>
     * 
     * @throws \EDAM\Error\EDAMUserException
     */
    public function getAccountLimits($serviceLevel);
}
