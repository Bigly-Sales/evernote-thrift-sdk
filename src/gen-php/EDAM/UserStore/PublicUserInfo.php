<?php
namespace EDAM\UserStore;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 *  This structure is used to provide publicly-available user information
 *  about a particular account.
 * <dl>
 *  <dt>userId:</dt>
 *    <dd>
 *    The unique numeric user identifier for the user account.
 *    </dd>
 *  <dt>serviceLevel:</dt>
 *    <dd>
 *    The service level of the account.
 *    </dd>
 *  <dt>noteStoreUrl:</dt>
 *    <dd>
 *    This field will contain the full URL that clients should use to make
 *    NoteStore requests to the server shard that contains that user's data.
 *    I.e. this is the URL that should be used to create the Thrift HTTP client
 *    transport to send messages to the NoteStore service for the account.
 *    </dd>
 *  <dt>webApiUrlPrefix:</dt>
 *    <dd>
 *    This field will contain the initial part of the URLs that should be used
 *    to make requests to Evernote's thin client "web API", which provide
 *    optimized operations for clients that aren't capable of manipulating
 *    the full contents of accounts via the full Thrift data model. Clients
 *    should concatenate the relative path for the various servlets onto the
 *    end of this string to construct the full URL, as documented on our
 *    developer web site.
 *    </dd>
 *  </dl>
 */
class PublicUserInfo
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'userId',
            'isRequired' => true,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'serviceLevel',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\EDAM\Types\ServiceLevel',
        ),
        4 => array(
            'var' => 'username',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'noteStoreUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'webApiUrlPrefix',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var int
     */
    public $userId = null;
    /**
     * @var int
     */
    public $serviceLevel = null;
    /**
     * @var string
     */
    public $username = null;
    /**
     * @var string
     */
    public $noteStoreUrl = null;
    /**
     * @var string
     */
    public $webApiUrlPrefix = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['userId'])) {
                $this->userId = $vals['userId'];
            }
            if (isset($vals['serviceLevel'])) {
                $this->serviceLevel = $vals['serviceLevel'];
            }
            if (isset($vals['username'])) {
                $this->username = $vals['username'];
            }
            if (isset($vals['noteStoreUrl'])) {
                $this->noteStoreUrl = $vals['noteStoreUrl'];
            }
            if (isset($vals['webApiUrlPrefix'])) {
                $this->webApiUrlPrefix = $vals['webApiUrlPrefix'];
            }
        }
    }

    public function getName()
    {
        return 'PublicUserInfo';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->userId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->serviceLevel);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->username);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->noteStoreUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->webApiUrlPrefix);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('PublicUserInfo');
        if ($this->userId !== null) {
            $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
            $xfer += $output->writeI32($this->userId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->username !== null) {
            $xfer += $output->writeFieldBegin('username', TType::STRING, 4);
            $xfer += $output->writeString($this->username);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->noteStoreUrl !== null) {
            $xfer += $output->writeFieldBegin('noteStoreUrl', TType::STRING, 5);
            $xfer += $output->writeString($this->noteStoreUrl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->webApiUrlPrefix !== null) {
            $xfer += $output->writeFieldBegin('webApiUrlPrefix', TType::STRING, 6);
            $xfer += $output->writeString($this->webApiUrlPrefix);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->serviceLevel !== null) {
            $xfer += $output->writeFieldBegin('serviceLevel', TType::I32, 7);
            $xfer += $output->writeI32($this->serviceLevel);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
